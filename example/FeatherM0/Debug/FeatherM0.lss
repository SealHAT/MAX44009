
FeatherM0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00007e24  00002000  00002000  00002000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000120  20000000  00009e24  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000042c  20000120  00009f44  00010120  2**2
                  ALLOC
  3 .stack        00002004  2000054c  0000a370  00010120  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00010120  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  00010148  2**0
                  CONTENTS, READONLY
  6 .debug_info   0003a181  00000000  00000000  000101a1  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000514d  00000000  00000000  0004a322  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00015306  00000000  00000000  0004f46f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00001180  00000000  00000000  00064775  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 000019c0  00000000  00000000  000658f5  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  0001dc20  00000000  00000000  000672b5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00017bee  00000000  00000000  00084ed5  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0008cea4  00000000  00000000  0009cac3  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  000035dc  00000000  00000000  00129968  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00002000 <exception_table>:
    2000:	50 25 00 20 01 22 00 00 fd 21 00 00 fd 21 00 00     P%. ."...!...!..
	...
    202c:	fd 21 00 00 00 00 00 00 00 00 00 00 fd 21 00 00     .!...........!..
    203c:	fd 21 00 00 fd 21 00 00 fd 21 00 00 fd 21 00 00     .!...!...!...!..
    204c:	fd 21 00 00 fd 21 00 00 fd 21 00 00 fd 21 00 00     .!...!...!...!..
    205c:	c9 4d 00 00 fd 21 00 00 fd 21 00 00 fd 21 00 00     .M...!...!...!..
    206c:	fd 21 00 00 fd 21 00 00 fd 21 00 00 fd 21 00 00     .!...!...!...!..
    207c:	fd 21 00 00 fd 21 00 00 fd 21 00 00 fd 21 00 00     .!...!...!...!..
    208c:	fd 21 00 00 fd 21 00 00 00 00 00 00 00 00 00 00     .!...!..........
    209c:	fd 21 00 00 fd 21 00 00 fd 21 00 00 fd 21 00 00     .!...!...!...!..
    20ac:	fd 21 00 00 00 00 00 00                             .!......

000020b4 <__do_global_dtors_aux>:
    20b4:	b510      	push	{r4, lr}
    20b6:	4c06      	ldr	r4, [pc, #24]	; (20d0 <__do_global_dtors_aux+0x1c>)
    20b8:	7823      	ldrb	r3, [r4, #0]
    20ba:	2b00      	cmp	r3, #0
    20bc:	d107      	bne.n	20ce <__do_global_dtors_aux+0x1a>
    20be:	4b05      	ldr	r3, [pc, #20]	; (20d4 <__do_global_dtors_aux+0x20>)
    20c0:	2b00      	cmp	r3, #0
    20c2:	d002      	beq.n	20ca <__do_global_dtors_aux+0x16>
    20c4:	4804      	ldr	r0, [pc, #16]	; (20d8 <__do_global_dtors_aux+0x24>)
    20c6:	e000      	b.n	20ca <__do_global_dtors_aux+0x16>
    20c8:	bf00      	nop
    20ca:	2301      	movs	r3, #1
    20cc:	7023      	strb	r3, [r4, #0]
    20ce:	bd10      	pop	{r4, pc}
    20d0:	20000120 	.word	0x20000120
    20d4:	00000000 	.word	0x00000000
    20d8:	00009e24 	.word	0x00009e24

000020dc <frame_dummy>:
    20dc:	4b08      	ldr	r3, [pc, #32]	; (2100 <frame_dummy+0x24>)
    20de:	b510      	push	{r4, lr}
    20e0:	2b00      	cmp	r3, #0
    20e2:	d003      	beq.n	20ec <frame_dummy+0x10>
    20e4:	4907      	ldr	r1, [pc, #28]	; (2104 <frame_dummy+0x28>)
    20e6:	4808      	ldr	r0, [pc, #32]	; (2108 <frame_dummy+0x2c>)
    20e8:	e000      	b.n	20ec <frame_dummy+0x10>
    20ea:	bf00      	nop
    20ec:	4807      	ldr	r0, [pc, #28]	; (210c <frame_dummy+0x30>)
    20ee:	6803      	ldr	r3, [r0, #0]
    20f0:	2b00      	cmp	r3, #0
    20f2:	d100      	bne.n	20f6 <frame_dummy+0x1a>
    20f4:	bd10      	pop	{r4, pc}
    20f6:	4b06      	ldr	r3, [pc, #24]	; (2110 <frame_dummy+0x34>)
    20f8:	2b00      	cmp	r3, #0
    20fa:	d0fb      	beq.n	20f4 <frame_dummy+0x18>
    20fc:	4798      	blx	r3
    20fe:	e7f9      	b.n	20f4 <frame_dummy+0x18>
    2100:	00000000 	.word	0x00000000
    2104:	20000124 	.word	0x20000124
    2108:	00009e24 	.word	0x00009e24
    210c:	00009e24 	.word	0x00009e24
    2110:	00000000 	.word	0x00000000

00002114 <readReg>:
    uint8_t address;    /* The I2C address of the sensor */
	struct io_descriptor *wire_io;
} max44009_data;

/* read a single register */
static uint8_t readReg(const uint8_t REG) {
    2114:	b530      	push	{r4, r5, lr}
    2116:	b085      	sub	sp, #20
    2118:	466b      	mov	r3, sp
    211a:	1dd9      	adds	r1, r3, #7
    211c:	7008      	strb	r0, [r1, #0]
	uint8_t retval;
	io_write(max44009_data.wire_io, &REG, 1);
    211e:	4d07      	ldr	r5, [pc, #28]	; (213c <readReg+0x28>)
    2120:	2201      	movs	r2, #1
    2122:	6868      	ldr	r0, [r5, #4]
    2124:	4b06      	ldr	r3, [pc, #24]	; (2140 <readReg+0x2c>)
    2126:	4798      	blx	r3
	io_read(max44009_data.wire_io, &retval, 1);
    2128:	240f      	movs	r4, #15
    212a:	446c      	add	r4, sp
    212c:	6868      	ldr	r0, [r5, #4]
    212e:	2201      	movs	r2, #1
    2130:	0021      	movs	r1, r4
    2132:	4b04      	ldr	r3, [pc, #16]	; (2144 <readReg+0x30>)
    2134:	4798      	blx	r3
	return retval;
    2136:	7820      	ldrb	r0, [r4, #0]
} 
    2138:	b005      	add	sp, #20
    213a:	bd30      	pop	{r4, r5, pc}
    213c:	2000013c 	.word	0x2000013c
    2140:	0000287d 	.word	0x0000287d
    2144:	000028b1 	.word	0x000028b1

00002148 <max44009_init>:
	sendvals[1] = VAL;
	io_write(max44009_data.wire_io, sendvals, 2);
}

bool max44009_init(struct i2c_m_sync_desc *const WIRE_I2C, const uint8_t ADDR)
{
    2148:	b570      	push	{r4, r5, r6, lr}
    214a:	0004      	movs	r4, r0
	max44009_data.address = ADDR;
    214c:	4d07      	ldr	r5, [pc, #28]	; (216c <max44009_init+0x24>)
    214e:	7029      	strb	r1, [r5, #0]
	i2c_m_sync_get_io_descriptor(WIRE_I2C, &max44009_data.wire_io);
    2150:	1d29      	adds	r1, r5, #4
    2152:	4b07      	ldr	r3, [pc, #28]	; (2170 <max44009_init+0x28>)
    2154:	4798      	blx	r3
    i2c_m_sync_enable(WIRE_I2C);
    2156:	0020      	movs	r0, r4
    2158:	4b06      	ldr	r3, [pc, #24]	; (2174 <max44009_init+0x2c>)
    215a:	4798      	blx	r3
    i2c_m_sync_set_slaveaddr(WIRE_I2C, max44009_data.address, I2C_M_SEVEN);
    215c:	7829      	ldrb	r1, [r5, #0]
    215e:	2280      	movs	r2, #128	; 0x80
    2160:	0112      	lsls	r2, r2, #4
    2162:	0020      	movs	r0, r4
    2164:	4b04      	ldr	r3, [pc, #16]	; (2178 <max44009_init+0x30>)
    2166:	4798      	blx	r3
	return true;
}
    2168:	2001      	movs	r0, #1
    216a:	bd70      	pop	{r4, r5, r6, pc}
    216c:	2000013c 	.word	0x2000013c
    2170:	00002873 	.word	0x00002873
    2174:	00002855 	.word	0x00002855
    2178:	00002861 	.word	0x00002861

0000217c <max44009_read_float>:
    writeReg(LIGHT_ISR_ENABLE, enable);
	return true;
}

float max44009_read_float()
{
    217c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    uint8_t luxHigh;
    uint8_t luxLow;
    uint8_t exponent;
    uint8_t mantissa;

    luxHigh = readReg(LIGHT_LUX_MSB);
    217e:	2003      	movs	r0, #3
    2180:	4d11      	ldr	r5, [pc, #68]	; (21c8 <max44009_read_float+0x4c>)
    2182:	47a8      	blx	r5
    2184:	0004      	movs	r4, r0
    luxLow = readReg(LIGHT_LUX_LSB);
    2186:	2004      	movs	r0, #4
    2188:	47a8      	blx	r5
    218a:	0005      	movs	r5, r0
    exponent = (luxHigh & 0xF0) >> 4;
    218c:	0920      	lsrs	r0, r4, #4
    mantissa = ((luxHigh & 0x0F) << 4) | (luxLow & 0x0F);

    return pow(2, exponent) * mantissa * FULL_ACCURACY_CONSTANT;
    218e:	b2c0      	uxtb	r0, r0
    2190:	4b0e      	ldr	r3, [pc, #56]	; (21cc <max44009_read_float+0x50>)
    2192:	4798      	blx	r3
    2194:	0002      	movs	r2, r0
    2196:	000b      	movs	r3, r1
    2198:	2000      	movs	r0, #0
    219a:	2180      	movs	r1, #128	; 0x80
    219c:	05c9      	lsls	r1, r1, #23
    219e:	4e0c      	ldr	r6, [pc, #48]	; (21d0 <max44009_read_float+0x54>)
    21a0:	47b0      	blx	r6
    21a2:	0006      	movs	r6, r0
    21a4:	000f      	movs	r7, r1
    mantissa = ((luxHigh & 0x0F) << 4) | (luxLow & 0x0F);
    21a6:	0124      	lsls	r4, r4, #4
    21a8:	200f      	movs	r0, #15
    21aa:	4028      	ands	r0, r5
    21ac:	4320      	orrs	r0, r4
    return pow(2, exponent) * mantissa * FULL_ACCURACY_CONSTANT;
    21ae:	b2c0      	uxtb	r0, r0
    21b0:	4b08      	ldr	r3, [pc, #32]	; (21d4 <max44009_read_float+0x58>)
    21b2:	4798      	blx	r3
    21b4:	4c08      	ldr	r4, [pc, #32]	; (21d8 <max44009_read_float+0x5c>)
    21b6:	0032      	movs	r2, r6
    21b8:	003b      	movs	r3, r7
    21ba:	47a0      	blx	r4
    21bc:	4a07      	ldr	r2, [pc, #28]	; (21dc <max44009_read_float+0x60>)
    21be:	4b08      	ldr	r3, [pc, #32]	; (21e0 <max44009_read_float+0x64>)
    21c0:	47a0      	blx	r4
    21c2:	4b08      	ldr	r3, [pc, #32]	; (21e4 <max44009_read_float+0x68>)
    21c4:	4798      	blx	r3
}
    21c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    21c8:	00002115 	.word	0x00002115
    21cc:	00008f09 	.word	0x00008f09
    21d0:	00005d81 	.word	0x00005d81
    21d4:	00008e85 	.word	0x00008e85
    21d8:	00008319 	.word	0x00008319
    21dc:	70a3d70a 	.word	0x70a3d70a
    21e0:	3fa70a3d 	.word	0x3fa70a3d
    21e4:	00008f79 	.word	0x00008f79

000021e8 <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
**/
void atmel_start_init(void)
{
    21e8:	b510      	push	{r4, lr}
	system_init();
    21ea:	4b02      	ldr	r3, [pc, #8]	; (21f4 <atmel_start_init+0xc>)
    21ec:	4798      	blx	r3
	usb_init();
    21ee:	4b02      	ldr	r3, [pc, #8]	; (21f8 <atmel_start_init+0x10>)
    21f0:	4798      	blx	r3
}
    21f2:	bd10      	pop	{r4, pc}
    21f4:	00002685 	.word	0x00002685
    21f8:	00005cb9 	.word	0x00005cb9

000021fc <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    21fc:	e7fe      	b.n	21fc <Dummy_Handler>
	...

00002200 <Reset_Handler>:
{
    2200:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (pSrc != pDest) {
    2202:	4a2a      	ldr	r2, [pc, #168]	; (22ac <Reset_Handler+0xac>)
    2204:	4b2a      	ldr	r3, [pc, #168]	; (22b0 <Reset_Handler+0xb0>)
    2206:	429a      	cmp	r2, r3
    2208:	d011      	beq.n	222e <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
    220a:	001a      	movs	r2, r3
    220c:	4b29      	ldr	r3, [pc, #164]	; (22b4 <Reset_Handler+0xb4>)
    220e:	429a      	cmp	r2, r3
    2210:	d20d      	bcs.n	222e <Reset_Handler+0x2e>
    2212:	4a29      	ldr	r2, [pc, #164]	; (22b8 <Reset_Handler+0xb8>)
    2214:	3303      	adds	r3, #3
    2216:	1a9b      	subs	r3, r3, r2
    2218:	089b      	lsrs	r3, r3, #2
    221a:	3301      	adds	r3, #1
    221c:	009b      	lsls	r3, r3, #2
    221e:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
    2220:	4823      	ldr	r0, [pc, #140]	; (22b0 <Reset_Handler+0xb0>)
    2222:	4922      	ldr	r1, [pc, #136]	; (22ac <Reset_Handler+0xac>)
    2224:	588c      	ldr	r4, [r1, r2]
    2226:	5084      	str	r4, [r0, r2]
    2228:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
    222a:	429a      	cmp	r2, r3
    222c:	d1fa      	bne.n	2224 <Reset_Handler+0x24>
        for (pDest = &_szero; pDest < &_ezero;) {
    222e:	4a23      	ldr	r2, [pc, #140]	; (22bc <Reset_Handler+0xbc>)
    2230:	4b23      	ldr	r3, [pc, #140]	; (22c0 <Reset_Handler+0xc0>)
    2232:	429a      	cmp	r2, r3
    2234:	d20a      	bcs.n	224c <Reset_Handler+0x4c>
    2236:	43d3      	mvns	r3, r2
    2238:	4921      	ldr	r1, [pc, #132]	; (22c0 <Reset_Handler+0xc0>)
    223a:	185b      	adds	r3, r3, r1
    223c:	2103      	movs	r1, #3
    223e:	438b      	bics	r3, r1
    2240:	3304      	adds	r3, #4
    2242:	189b      	adds	r3, r3, r2
                *pDest++ = 0;
    2244:	2100      	movs	r1, #0
    2246:	c202      	stmia	r2!, {r1}
        for (pDest = &_szero; pDest < &_ezero;) {
    2248:	4293      	cmp	r3, r2
    224a:	d1fc      	bne.n	2246 <Reset_Handler+0x46>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    224c:	4a1d      	ldr	r2, [pc, #116]	; (22c4 <Reset_Handler+0xc4>)
    224e:	21ff      	movs	r1, #255	; 0xff
    2250:	4b1d      	ldr	r3, [pc, #116]	; (22c8 <Reset_Handler+0xc8>)
    2252:	438b      	bics	r3, r1
    2254:	6093      	str	r3, [r2, #8]
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    2256:	39fd      	subs	r1, #253	; 0xfd
    2258:	2390      	movs	r3, #144	; 0x90
    225a:	005b      	lsls	r3, r3, #1
    225c:	4a1b      	ldr	r2, [pc, #108]	; (22cc <Reset_Handler+0xcc>)
    225e:	50d1      	str	r1, [r2, r3]
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    2260:	4a1b      	ldr	r2, [pc, #108]	; (22d0 <Reset_Handler+0xd0>)
    2262:	78d3      	ldrb	r3, [r2, #3]
    2264:	2503      	movs	r5, #3
    2266:	43ab      	bics	r3, r5
    2268:	2402      	movs	r4, #2
    226a:	4323      	orrs	r3, r4
    226c:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    226e:	78d3      	ldrb	r3, [r2, #3]
    2270:	270c      	movs	r7, #12
    2272:	43bb      	bics	r3, r7
    2274:	2608      	movs	r6, #8
    2276:	4333      	orrs	r3, r6
    2278:	70d3      	strb	r3, [r2, #3]
        DMAC->QOSCTRL.bit.DQOS = 2;
    227a:	4b16      	ldr	r3, [pc, #88]	; (22d4 <Reset_Handler+0xd4>)
    227c:	7b98      	ldrb	r0, [r3, #14]
    227e:	2230      	movs	r2, #48	; 0x30
    2280:	4390      	bics	r0, r2
    2282:	2220      	movs	r2, #32
    2284:	4310      	orrs	r0, r2
    2286:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
    2288:	7b99      	ldrb	r1, [r3, #14]
    228a:	43b9      	bics	r1, r7
    228c:	4331      	orrs	r1, r6
    228e:	7399      	strb	r1, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
    2290:	7b9a      	ldrb	r2, [r3, #14]
    2292:	43aa      	bics	r2, r5
    2294:	4322      	orrs	r2, r4
    2296:	739a      	strb	r2, [r3, #14]
        NVMCTRL->CTRLB.bit.MANW = 1;
    2298:	4a0f      	ldr	r2, [pc, #60]	; (22d8 <Reset_Handler+0xd8>)
    229a:	6853      	ldr	r3, [r2, #4]
    229c:	2180      	movs	r1, #128	; 0x80
    229e:	430b      	orrs	r3, r1
    22a0:	6053      	str	r3, [r2, #4]
        __libc_init_array();
    22a2:	4b0e      	ldr	r3, [pc, #56]	; (22dc <Reset_Handler+0xdc>)
    22a4:	4798      	blx	r3
        main();
    22a6:	4b0e      	ldr	r3, [pc, #56]	; (22e0 <Reset_Handler+0xe0>)
    22a8:	4798      	blx	r3
    22aa:	e7fe      	b.n	22aa <Reset_Handler+0xaa>
    22ac:	00009e24 	.word	0x00009e24
    22b0:	20000000 	.word	0x20000000
    22b4:	20000120 	.word	0x20000120
    22b8:	20000004 	.word	0x20000004
    22bc:	20000120 	.word	0x20000120
    22c0:	2000054c 	.word	0x2000054c
    22c4:	e000ed00 	.word	0xe000ed00
    22c8:	00002000 	.word	0x00002000
    22cc:	41007000 	.word	0x41007000
    22d0:	41005000 	.word	0x41005000
    22d4:	41004800 	.word	0x41004800
    22d8:	41004000 	.word	0x41004000
    22dc:	00009299 	.word	0x00009299
    22e0:	00005005 	.word	0x00005005

000022e4 <analog_in_PORT_init>:
struct adc_sync_descriptor analog_in;

struct i2c_m_sync_desc wire;

void analog_in_PORT_init(void)
{
    22e4:	b5f0      	push	{r4, r5, r6, r7, lr}
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = ~data;
}

static inline void hri_port_clear_DIR_reg(const void *const hw, uint8_t submodule_index, hri_port_dir_reg_t mask)
{
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    22e6:	25c0      	movs	r5, #192	; 0xc0
    22e8:	05ed      	lsls	r5, r5, #23
    22ea:	2304      	movs	r3, #4
    22ec:	606b      	str	r3, [r5, #4]

static inline void hri_port_write_WRCONFIG_reg(const void *const hw, uint8_t submodule_index,
                                               hri_port_wrconfig_reg_t data)
{
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    22ee:	4b14      	ldr	r3, [pc, #80]	; (2340 <analog_in_PORT_init+0x5c>)
    22f0:	4a14      	ldr	r2, [pc, #80]	; (2344 <analog_in_PORT_init+0x60>)
    22f2:	629a      	str	r2, [r3, #40]	; 0x28
    22f4:	22c0      	movs	r2, #192	; 0xc0
    22f6:	0612      	lsls	r2, r2, #24
    22f8:	629a      	str	r2, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    22fa:	2642      	movs	r6, #66	; 0x42
    22fc:	5d99      	ldrb	r1, [r3, r6]
	tmp &= ~PORT_PINCFG_PMUXEN;
    22fe:	2401      	movs	r4, #1
    2300:	43a1      	bics	r1, r4
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    2302:	2001      	movs	r0, #1
    2304:	4301      	orrs	r1, r0
    2306:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    2308:	5599      	strb	r1, [r3, r6]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    230a:	3e11      	subs	r6, #17
    230c:	5d99      	ldrb	r1, [r3, r6]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    230e:	270f      	movs	r7, #15
    2310:	43b9      	bics	r1, r7
	tmp |= PORT_PMUX_PMUXE(data);
    2312:	4301      	orrs	r1, r0
    2314:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    2316:	5599      	strb	r1, [r3, r6]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    2318:	2180      	movs	r1, #128	; 0x80
    231a:	6069      	str	r1, [r5, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    231c:	490a      	ldr	r1, [pc, #40]	; (2348 <analog_in_PORT_init+0x64>)
    231e:	6299      	str	r1, [r3, #40]	; 0x28
    2320:	629a      	str	r2, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    2322:	2147      	movs	r1, #71	; 0x47
    2324:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PINCFG_PMUXEN;
    2326:	43a2      	bics	r2, r4
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    2328:	4302      	orrs	r2, r0
    232a:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    232c:	545a      	strb	r2, [r3, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    232e:	3914      	subs	r1, #20
    2330:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
    2332:	200f      	movs	r0, #15
    2334:	4002      	ands	r2, r0
	tmp |= PORT_PMUX_PMUXO(data);
    2336:	3001      	adds	r0, #1
    2338:	4302      	orrs	r2, r0
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    233a:	545a      	strb	r2, [r3, r1]

	// Disable digital pin circuitry
	gpio_set_pin_direction(VBATT, GPIO_DIRECTION_OFF);

	gpio_set_pin_function(VBATT, PINMUX_PA07B_ADC_AIN7);
}
    233c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    233e:	46c0      	nop			; (mov r8, r8)
    2340:	41004400 	.word	0x41004400
    2344:	40000004 	.word	0x40000004
    2348:	40000080 	.word	0x40000080

0000234c <analog_in_CLOCK_init>:
			peripheral = (uint32_t)_pm_get_apbb_index(module);
			PM->APBBMASK.reg |= 1 << peripheral;
		}
		break;
	case PM_BUS_APBC:
		PM->APBCMASK.reg |= 1 << peripheral;
    234c:	4a04      	ldr	r2, [pc, #16]	; (2360 <analog_in_CLOCK_init+0x14>)
    234e:	6a11      	ldr	r1, [r2, #32]
    2350:	2380      	movs	r3, #128	; 0x80
    2352:	025b      	lsls	r3, r3, #9
    2354:	430b      	orrs	r3, r1
    2356:	6213      	str	r3, [r2, #32]
}

static inline void hri_gclk_write_CLKCTRL_reg(const void *const hw, hri_gclk_clkctrl_reg_t data)
{
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->CLKCTRL.reg = data;
    2358:	4a02      	ldr	r2, [pc, #8]	; (2364 <analog_in_CLOCK_init+0x18>)
    235a:	4b03      	ldr	r3, [pc, #12]	; (2368 <analog_in_CLOCK_init+0x1c>)
    235c:	805a      	strh	r2, [r3, #2]

void analog_in_CLOCK_init(void)
{
	_pm_enable_bus_clock(PM_BUS_APBC, ADC);
	_gclk_enable_channel(ADC_GCLK_ID, CONF_GCLK_ADC_SRC);
}
    235e:	4770      	bx	lr
    2360:	40000400 	.word	0x40000400
    2364:	0000401e 	.word	0x0000401e
    2368:	40000c00 	.word	0x40000c00

0000236c <analog_in_init>:

void analog_in_init(void)
{
    236c:	b510      	push	{r4, lr}
	analog_in_CLOCK_init();
    236e:	4b05      	ldr	r3, [pc, #20]	; (2384 <analog_in_init+0x18>)
    2370:	4798      	blx	r3
	analog_in_PORT_init();
    2372:	4b05      	ldr	r3, [pc, #20]	; (2388 <analog_in_init+0x1c>)
    2374:	4798      	blx	r3
	adc_sync_init(&analog_in, ADC, (void *)NULL);
    2376:	2200      	movs	r2, #0
    2378:	4904      	ldr	r1, [pc, #16]	; (238c <analog_in_init+0x20>)
    237a:	4805      	ldr	r0, [pc, #20]	; (2390 <analog_in_init+0x24>)
    237c:	4b05      	ldr	r3, [pc, #20]	; (2394 <analog_in_init+0x28>)
    237e:	4798      	blx	r3
}
    2380:	bd10      	pop	{r4, pc}
    2382:	46c0      	nop			; (mov r8, r8)
    2384:	0000234d 	.word	0x0000234d
    2388:	000022e5 	.word	0x000022e5
    238c:	42004000 	.word	0x42004000
    2390:	20000524 	.word	0x20000524
    2394:	000026fd 	.word	0x000026fd

00002398 <hash_chk_init>:
 * \brief CRC initialization function
 *
 * Enables CRC peripheral, clocks and initializes CRC driver
 */
void hash_chk_init(void)
{
    2398:	b510      	push	{r4, lr}
			PM->AHBMASK.reg |= 1 << peripheral;
    239a:	4b07      	ldr	r3, [pc, #28]	; (23b8 <hash_chk_init+0x20>)
    239c:	695a      	ldr	r2, [r3, #20]
    239e:	2108      	movs	r1, #8
    23a0:	430a      	orrs	r2, r1
    23a2:	615a      	str	r2, [r3, #20]
			PM->APBBMASK.reg |= 1 << peripheral;
    23a4:	69da      	ldr	r2, [r3, #28]
    23a6:	3907      	subs	r1, #7
    23a8:	430a      	orrs	r2, r1
    23aa:	61da      	str	r2, [r3, #28]
	_pm_enable_bus_clock(PM_BUS_AHB, DSU);
	_pm_enable_bus_clock(PM_BUS_APBB, PAC1);
	crc_sync_init(&hash_chk, DSU);
    23ac:	4903      	ldr	r1, [pc, #12]	; (23bc <hash_chk_init+0x24>)
    23ae:	4804      	ldr	r0, [pc, #16]	; (23c0 <hash_chk_init+0x28>)
    23b0:	4b04      	ldr	r3, [pc, #16]	; (23c4 <hash_chk_init+0x2c>)
    23b2:	4798      	blx	r3
}
    23b4:	bd10      	pop	{r4, pc}
    23b6:	46c0      	nop			; (mov r8, r8)
    23b8:	40000400 	.word	0x40000400
    23bc:	41002000 	.word	0x41002000
    23c0:	2000050c 	.word	0x2000050c
    23c4:	0000274d 	.word	0x0000274d

000023c8 <wire_PORT_init>:

void wire_PORT_init(void)
{
    23c8:	b570      	push	{r4, r5, r6, lr}
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
    23ca:	4b12      	ldr	r3, [pc, #72]	; (2414 <wire_PORT_init+0x4c>)
    23cc:	2056      	movs	r0, #86	; 0x56
    23ce:	5c19      	ldrb	r1, [r3, r0]
    23d0:	2204      	movs	r2, #4
    23d2:	4391      	bics	r1, r2
    23d4:	5419      	strb	r1, [r3, r0]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    23d6:	5c19      	ldrb	r1, [r3, r0]
	tmp &= ~PORT_PINCFG_PMUXEN;
    23d8:	2501      	movs	r5, #1
    23da:	43a9      	bics	r1, r5
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    23dc:	2401      	movs	r4, #1
    23de:	4321      	orrs	r1, r4
    23e0:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    23e2:	5419      	strb	r1, [r3, r0]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    23e4:	381b      	subs	r0, #27
    23e6:	5c19      	ldrb	r1, [r3, r0]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    23e8:	260f      	movs	r6, #15
    23ea:	43b1      	bics	r1, r6
	tmp |= PORT_PMUX_PMUXE(data);
    23ec:	3e0d      	subs	r6, #13
    23ee:	4331      	orrs	r1, r6
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    23f0:	5419      	strb	r1, [r3, r0]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
    23f2:	2157      	movs	r1, #87	; 0x57
    23f4:	5c5e      	ldrb	r6, [r3, r1]
    23f6:	4396      	bics	r6, r2
    23f8:	545e      	strb	r6, [r3, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    23fa:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PINCFG_PMUXEN;
    23fc:	43aa      	bics	r2, r5
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    23fe:	4322      	orrs	r2, r4
    2400:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    2402:	545a      	strb	r2, [r3, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    2404:	5c1a      	ldrb	r2, [r3, r0]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
    2406:	3948      	subs	r1, #72	; 0x48
    2408:	400a      	ands	r2, r1
	tmp |= PORT_PMUX_PMUXO(data);
    240a:	3111      	adds	r1, #17
    240c:	430a      	orrs	r2, r1
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    240e:	541a      	strb	r2, [r3, r0]
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PA23, PINMUX_PA23C_SERCOM3_PAD1);
}
    2410:	bd70      	pop	{r4, r5, r6, pc}
    2412:	46c0      	nop			; (mov r8, r8)
    2414:	41004400 	.word	0x41004400

00002418 <wire_CLOCK_init>:
		PM->APBCMASK.reg |= 1 << peripheral;
    2418:	4a05      	ldr	r2, [pc, #20]	; (2430 <wire_CLOCK_init+0x18>)
    241a:	6a13      	ldr	r3, [r2, #32]
    241c:	2120      	movs	r1, #32
    241e:	430b      	orrs	r3, r1
    2420:	6213      	str	r3, [r2, #32]
    2422:	4b04      	ldr	r3, [pc, #16]	; (2434 <wire_CLOCK_init+0x1c>)
    2424:	4a04      	ldr	r2, [pc, #16]	; (2438 <wire_CLOCK_init+0x20>)
    2426:	805a      	strh	r2, [r3, #2]
    2428:	4a04      	ldr	r2, [pc, #16]	; (243c <wire_CLOCK_init+0x24>)
    242a:	805a      	strh	r2, [r3, #2]
void wire_CLOCK_init(void)
{
	_pm_enable_bus_clock(PM_BUS_APBC, SERCOM3);
	_gclk_enable_channel(SERCOM3_GCLK_ID_CORE, CONF_GCLK_SERCOM3_CORE_SRC);
	_gclk_enable_channel(SERCOM3_GCLK_ID_SLOW, CONF_GCLK_SERCOM3_SLOW_SRC);
}
    242c:	4770      	bx	lr
    242e:	46c0      	nop			; (mov r8, r8)
    2430:	40000400 	.word	0x40000400
    2434:	40000c00 	.word	0x40000c00
    2438:	00004017 	.word	0x00004017
    243c:	00004113 	.word	0x00004113

00002440 <wire_init>:

void wire_init(void)
{
    2440:	b510      	push	{r4, lr}
	wire_CLOCK_init();
    2442:	4b04      	ldr	r3, [pc, #16]	; (2454 <wire_init+0x14>)
    2444:	4798      	blx	r3
	i2c_m_sync_init(&wire, SERCOM3);
    2446:	4904      	ldr	r1, [pc, #16]	; (2458 <wire_init+0x18>)
    2448:	4804      	ldr	r0, [pc, #16]	; (245c <wire_init+0x1c>)
    244a:	4b05      	ldr	r3, [pc, #20]	; (2460 <wire_init+0x20>)
    244c:	4798      	blx	r3
	wire_PORT_init();
    244e:	4b05      	ldr	r3, [pc, #20]	; (2464 <wire_init+0x24>)
    2450:	4798      	blx	r3
}
    2452:	bd10      	pop	{r4, pc}
    2454:	00002419 	.word	0x00002419
    2458:	42001400 	.word	0x42001400
    245c:	20000528 	.word	0x20000528
    2460:	00002815 	.word	0x00002815
    2464:	000023c9 	.word	0x000023c9

00002468 <spi_dev_PORT_init>:

void spi_dev_PORT_init(void)
{
    2468:	b5f0      	push	{r4, r5, r6, r7, lr}
    246a:	46de      	mov	lr, fp
    246c:	4657      	mov	r7, sl
    246e:	464e      	mov	r6, r9
    2470:	4645      	mov	r5, r8
    2472:	b5e0      	push	{r5, r6, r7, lr}
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    2474:	20c0      	movs	r0, #192	; 0xc0
    2476:	05c0      	lsls	r0, r0, #23
    2478:	2380      	movs	r3, #128	; 0x80
    247a:	015b      	lsls	r3, r3, #5
    247c:	6043      	str	r3, [r0, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    247e:	4b2a      	ldr	r3, [pc, #168]	; (2528 <spi_dev_PORT_init+0xc0>)
    2480:	4a2a      	ldr	r2, [pc, #168]	; (252c <spi_dev_PORT_init+0xc4>)
    2482:	629a      	str	r2, [r3, #40]	; 0x28
    2484:	4a2a      	ldr	r2, [pc, #168]	; (2530 <spi_dev_PORT_init+0xc8>)
    2486:	629a      	str	r2, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
    2488:	214c      	movs	r1, #76	; 0x4c
    248a:	5c5a      	ldrb	r2, [r3, r1]
    248c:	2404      	movs	r4, #4
    248e:	43a2      	bics	r2, r4
    2490:	545a      	strb	r2, [r3, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    2492:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PINCFG_PMUXEN;
    2494:	2701      	movs	r7, #1
    2496:	43ba      	bics	r2, r7
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    2498:	2601      	movs	r6, #1
    249a:	4332      	orrs	r2, r6
    249c:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    249e:	545a      	strb	r2, [r3, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    24a0:	3916      	subs	r1, #22
    24a2:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    24a4:	340b      	adds	r4, #11
    24a6:	46a2      	mov	sl, r4
    24a8:	43a2      	bics	r2, r4
	tmp |= PORT_PMUX_PMUXE(data);
    24aa:	2403      	movs	r4, #3
    24ac:	46a1      	mov	r9, r4
    24ae:	464c      	mov	r4, r9
    24b0:	4322      	orrs	r2, r4
    24b2:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    24b4:	545a      	strb	r2, [r3, r1]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    24b6:	2288      	movs	r2, #136	; 0x88
    24b8:	4690      	mov	r8, r2
    24ba:	2180      	movs	r1, #128	; 0x80
    24bc:	00c9      	lsls	r1, r1, #3
    24be:	5081      	str	r1, [r0, r2]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    24c0:	25a8      	movs	r5, #168	; 0xa8
    24c2:	4a1c      	ldr	r2, [pc, #112]	; (2534 <spi_dev_PORT_init+0xcc>)
    24c4:	515a      	str	r2, [r3, r5]
    24c6:	22c0      	movs	r2, #192	; 0xc0
    24c8:	0612      	lsls	r2, r2, #24
    24ca:	4694      	mov	ip, r2
    24cc:	515a      	str	r2, [r3, r5]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    24ce:	2294      	movs	r2, #148	; 0x94
    24d0:	4693      	mov	fp, r2
    24d2:	5081      	str	r1, [r0, r2]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    24d4:	21ca      	movs	r1, #202	; 0xca
    24d6:	5c5c      	ldrb	r4, [r3, r1]
	tmp &= ~PORT_PINCFG_PMUXEN;
    24d8:	43bc      	bics	r4, r7
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    24da:	4334      	orrs	r4, r6
    24dc:	b2e4      	uxtb	r4, r4
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    24de:	545c      	strb	r4, [r3, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    24e0:	24b5      	movs	r4, #181	; 0xb5
    24e2:	5d19      	ldrb	r1, [r3, r4]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    24e4:	4652      	mov	r2, sl
    24e6:	4391      	bics	r1, r2
	tmp |= PORT_PMUX_PMUXE(data);
    24e8:	464a      	mov	r2, r9
    24ea:	4311      	orrs	r1, r2
    24ec:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    24ee:	5519      	strb	r1, [r3, r4]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    24f0:	2180      	movs	r1, #128	; 0x80
    24f2:	0109      	lsls	r1, r1, #4
    24f4:	4642      	mov	r2, r8
    24f6:	5081      	str	r1, [r0, r2]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    24f8:	4a0f      	ldr	r2, [pc, #60]	; (2538 <spi_dev_PORT_init+0xd0>)
    24fa:	515a      	str	r2, [r3, r5]
    24fc:	4662      	mov	r2, ip
    24fe:	515a      	str	r2, [r3, r5]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    2500:	465a      	mov	r2, fp
    2502:	5081      	str	r1, [r0, r2]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    2504:	21cb      	movs	r1, #203	; 0xcb
    2506:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PINCFG_PMUXEN;
    2508:	43ba      	bics	r2, r7
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    250a:	4332      	orrs	r2, r6
    250c:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    250e:	545a      	strb	r2, [r3, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    2510:	5d1a      	ldrb	r2, [r3, r4]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
    2512:	39bc      	subs	r1, #188	; 0xbc
    2514:	400a      	ands	r2, r1
	tmp |= PORT_PMUX_PMUXO(data);
    2516:	3121      	adds	r1, #33	; 0x21
    2518:	430a      	orrs	r2, r1
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    251a:	551a      	strb	r2, [r3, r4]
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_function(PB11, PINMUX_PB11D_SERCOM4_PAD3);
}
    251c:	bc3c      	pop	{r2, r3, r4, r5}
    251e:	4690      	mov	r8, r2
    2520:	4699      	mov	r9, r3
    2522:	46a2      	mov	sl, r4
    2524:	46ab      	mov	fp, r5
    2526:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2528:	41004400 	.word	0x41004400
    252c:	40021000 	.word	0x40021000
    2530:	c0020000 	.word	0xc0020000
    2534:	40000400 	.word	0x40000400
    2538:	40000800 	.word	0x40000800

0000253c <spi_dev_CLOCK_init>:
    253c:	4a04      	ldr	r2, [pc, #16]	; (2550 <spi_dev_CLOCK_init+0x14>)
    253e:	6a13      	ldr	r3, [r2, #32]
    2540:	2140      	movs	r1, #64	; 0x40
    2542:	430b      	orrs	r3, r1
    2544:	6213      	str	r3, [r2, #32]
    2546:	4a03      	ldr	r2, [pc, #12]	; (2554 <spi_dev_CLOCK_init+0x18>)
    2548:	4b03      	ldr	r3, [pc, #12]	; (2558 <spi_dev_CLOCK_init+0x1c>)
    254a:	805a      	strh	r2, [r3, #2]

void spi_dev_CLOCK_init(void)
{
	_pm_enable_bus_clock(PM_BUS_APBC, SERCOM4);
	_gclk_enable_channel(SERCOM4_GCLK_ID_CORE, CONF_GCLK_SERCOM4_CORE_SRC);
}
    254c:	4770      	bx	lr
    254e:	46c0      	nop			; (mov r8, r8)
    2550:	40000400 	.word	0x40000400
    2554:	00004018 	.word	0x00004018
    2558:	40000c00 	.word	0x40000c00

0000255c <spi_dev_init>:

void spi_dev_init(void)
{
    255c:	b510      	push	{r4, lr}
	spi_dev_CLOCK_init();
    255e:	4b04      	ldr	r3, [pc, #16]	; (2570 <spi_dev_init+0x14>)
    2560:	4798      	blx	r3
	spi_m_sync_init(&spi_dev, SERCOM4);
    2562:	4904      	ldr	r1, [pc, #16]	; (2574 <spi_dev_init+0x18>)
    2564:	4804      	ldr	r0, [pc, #16]	; (2578 <spi_dev_init+0x1c>)
    2566:	4b05      	ldr	r3, [pc, #20]	; (257c <spi_dev_init+0x20>)
    2568:	4798      	blx	r3
	spi_dev_PORT_init();
    256a:	4b05      	ldr	r3, [pc, #20]	; (2580 <spi_dev_init+0x24>)
    256c:	4798      	blx	r3
}
    256e:	bd10      	pop	{r4, pc}
    2570:	0000253d 	.word	0x0000253d
    2574:	42001800 	.word	0x42001800
    2578:	20000510 	.word	0x20000510
    257c:	000028e5 	.word	0x000028e5
    2580:	00002469 	.word	0x00002469

00002584 <delay_driver_init>:

void delay_driver_init(void)
{
    2584:	b510      	push	{r4, lr}
	delay_init(SysTick);
    2586:	4802      	ldr	r0, [pc, #8]	; (2590 <delay_driver_init+0xc>)
    2588:	4b02      	ldr	r3, [pc, #8]	; (2594 <delay_driver_init+0x10>)
    258a:	4798      	blx	r3
}
    258c:	bd10      	pop	{r4, pc}
    258e:	46c0      	nop			; (mov r8, r8)
    2590:	e000e010 	.word	0xe000e010
    2594:	00002781 	.word	0x00002781

00002598 <time_date_CLOCK_init>:
		PM->APBAMASK.reg |= 1 << peripheral;
    2598:	4a04      	ldr	r2, [pc, #16]	; (25ac <time_date_CLOCK_init+0x14>)
    259a:	6993      	ldr	r3, [r2, #24]
    259c:	2120      	movs	r1, #32
    259e:	430b      	orrs	r3, r1
    25a0:	6193      	str	r3, [r2, #24]
    25a2:	4a03      	ldr	r2, [pc, #12]	; (25b0 <time_date_CLOCK_init+0x18>)
    25a4:	4b03      	ldr	r3, [pc, #12]	; (25b4 <time_date_CLOCK_init+0x1c>)
    25a6:	805a      	strh	r2, [r3, #2]
 */
void time_date_CLOCK_init(void)
{
	_pm_enable_bus_clock(PM_BUS_APBA, RTC);
	_gclk_enable_channel(RTC_GCLK_ID, CONF_GCLK_RTC_SRC);
}
    25a8:	4770      	bx	lr
    25aa:	46c0      	nop			; (mov r8, r8)
    25ac:	40000400 	.word	0x40000400
    25b0:	00004004 	.word	0x00004004
    25b4:	40000c00 	.word	0x40000c00

000025b8 <USB_DEVICE_INSTANCE_PORT_init>:

void USB_DEVICE_INSTANCE_PORT_init(void)
{
    25b8:	b5f0      	push	{r4, r5, r6, r7, lr}
    25ba:	46c6      	mov	lr, r8
    25bc:	b500      	push	{lr}
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    25be:	24c0      	movs	r4, #192	; 0xc0
    25c0:	05e4      	lsls	r4, r4, #23
    25c2:	2280      	movs	r2, #128	; 0x80
    25c4:	0452      	lsls	r2, r2, #17
    25c6:	60a2      	str	r2, [r4, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    25c8:	4b1a      	ldr	r3, [pc, #104]	; (2634 <USB_DEVICE_INSTANCE_PORT_init+0x7c>)
    25ca:	2780      	movs	r7, #128	; 0x80
    25cc:	05ff      	lsls	r7, r7, #23
    25ce:	629f      	str	r7, [r3, #40]	; 0x28
    25d0:	4919      	ldr	r1, [pc, #100]	; (2638 <USB_DEVICE_INSTANCE_PORT_init+0x80>)
    25d2:	6299      	str	r1, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    25d4:	6162      	str	r2, [r4, #20]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
    25d6:	2058      	movs	r0, #88	; 0x58
    25d8:	5c19      	ldrb	r1, [r3, r0]
    25da:	2204      	movs	r2, #4
    25dc:	4690      	mov	r8, r2
    25de:	4391      	bics	r1, r2
    25e0:	5419      	strb	r1, [r3, r0]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    25e2:	5c19      	ldrb	r1, [r3, r0]
	tmp &= ~PORT_PINCFG_PMUXEN;
    25e4:	2601      	movs	r6, #1
    25e6:	43b1      	bics	r1, r6
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    25e8:	2501      	movs	r5, #1
    25ea:	4329      	orrs	r1, r5
    25ec:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    25ee:	5419      	strb	r1, [r3, r0]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    25f0:	381c      	subs	r0, #28
    25f2:	5c19      	ldrb	r1, [r3, r0]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    25f4:	320b      	adds	r2, #11
    25f6:	4391      	bics	r1, r2
	tmp |= PORT_PMUX_PMUXE(data);
    25f8:	3a09      	subs	r2, #9
    25fa:	4311      	orrs	r1, r2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    25fc:	5419      	strb	r1, [r3, r0]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    25fe:	2180      	movs	r1, #128	; 0x80
    2600:	0489      	lsls	r1, r1, #18
    2602:	60a1      	str	r1, [r4, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    2604:	629f      	str	r7, [r3, #40]	; 0x28
    2606:	4f0d      	ldr	r7, [pc, #52]	; (263c <USB_DEVICE_INSTANCE_PORT_init+0x84>)
    2608:	629f      	str	r7, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    260a:	6161      	str	r1, [r4, #20]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
    260c:	2159      	movs	r1, #89	; 0x59
    260e:	5c5c      	ldrb	r4, [r3, r1]
    2610:	4642      	mov	r2, r8
    2612:	4394      	bics	r4, r2
    2614:	545c      	strb	r4, [r3, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    2616:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PINCFG_PMUXEN;
    2618:	43b2      	bics	r2, r6
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    261a:	432a      	orrs	r2, r5
    261c:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    261e:	545a      	strb	r2, [r3, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    2620:	5c1a      	ldrb	r2, [r3, r0]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
    2622:	394a      	subs	r1, #74	; 0x4a
    2624:	400a      	ands	r2, r1
	tmp |= PORT_PMUX_PMUXO(data);
    2626:	3151      	adds	r1, #81	; 0x51
    2628:	430a      	orrs	r2, r1
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    262a:	541a      	strb	r2, [r3, r0]
	                      // <GPIO_PIN_FUNCTION_E"> E
	                      // <GPIO_PIN_FUNCTION_F"> F
	                      // <GPIO_PIN_FUNCTION_G"> G
	                      // <GPIO_PIN_FUNCTION_H"> H
	                      PINMUX_PA25G_USB_DP);
}
    262c:	bc04      	pop	{r2}
    262e:	4690      	mov	r8, r2
    2630:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2632:	46c0      	nop			; (mov r8, r8)
    2634:	41004400 	.word	0x41004400
    2638:	c0000100 	.word	0xc0000100
    263c:	c0000200 	.word	0xc0000200

00002640 <USB_DEVICE_INSTANCE_CLOCK_init>:
			PM->APBBMASK.reg |= 1 << peripheral;
    2640:	4b06      	ldr	r3, [pc, #24]	; (265c <USB_DEVICE_INSTANCE_CLOCK_init+0x1c>)
    2642:	69da      	ldr	r2, [r3, #28]
    2644:	2120      	movs	r1, #32
    2646:	430a      	orrs	r2, r1
    2648:	61da      	str	r2, [r3, #28]
			PM->AHBMASK.reg |= 1 << peripheral;
    264a:	695a      	ldr	r2, [r3, #20]
    264c:	3120      	adds	r1, #32
    264e:	430a      	orrs	r2, r1
    2650:	615a      	str	r2, [r3, #20]
    2652:	4a03      	ldr	r2, [pc, #12]	; (2660 <USB_DEVICE_INSTANCE_CLOCK_init+0x20>)
    2654:	4b03      	ldr	r3, [pc, #12]	; (2664 <USB_DEVICE_INSTANCE_CLOCK_init+0x24>)
    2656:	805a      	strh	r2, [r3, #2]
{

	_pm_enable_bus_clock(PM_BUS_APBB, USB);
	_pm_enable_bus_clock(PM_BUS_AHB, USB);
	_gclk_enable_channel(USB_GCLK_ID, CONF_GCLK_USB_SRC);
}
    2658:	4770      	bx	lr
    265a:	46c0      	nop			; (mov r8, r8)
    265c:	40000400 	.word	0x40000400
    2660:	00004206 	.word	0x00004206
    2664:	40000c00 	.word	0x40000c00

00002668 <USB_DEVICE_INSTANCE_init>:

void USB_DEVICE_INSTANCE_init(void)
{
    2668:	b510      	push	{r4, lr}
	USB_DEVICE_INSTANCE_CLOCK_init();
    266a:	4b03      	ldr	r3, [pc, #12]	; (2678 <USB_DEVICE_INSTANCE_init+0x10>)
    266c:	4798      	blx	r3
	usb_d_init();
    266e:	4b03      	ldr	r3, [pc, #12]	; (267c <USB_DEVICE_INSTANCE_init+0x14>)
    2670:	4798      	blx	r3
	USB_DEVICE_INSTANCE_PORT_init();
    2672:	4b03      	ldr	r3, [pc, #12]	; (2680 <USB_DEVICE_INSTANCE_init+0x18>)
    2674:	4798      	blx	r3
}
    2676:	bd10      	pop	{r4, pc}
    2678:	00002641 	.word	0x00002641
    267c:	00002c69 	.word	0x00002c69
    2680:	000025b9 	.word	0x000025b9

00002684 <system_init>:

void system_init(void)
{
    2684:	b510      	push	{r4, lr}
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
	_init_chip();
    2686:	4b12      	ldr	r3, [pc, #72]	; (26d0 <system_init+0x4c>)
    2688:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    268a:	22c0      	movs	r2, #192	; 0xc0
    268c:	05d2      	lsls	r2, r2, #23
    268e:	2180      	movs	r1, #128	; 0x80
    2690:	0289      	lsls	r1, r1, #10
    2692:	6091      	str	r1, [r2, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    2694:	4b0f      	ldr	r3, [pc, #60]	; (26d4 <system_init+0x50>)
    2696:	2080      	movs	r0, #128	; 0x80
    2698:	05c0      	lsls	r0, r0, #23
    269a:	6298      	str	r0, [r3, #40]	; 0x28
    269c:	480e      	ldr	r0, [pc, #56]	; (26d8 <system_init+0x54>)
    269e:	6298      	str	r0, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    26a0:	6151      	str	r1, [r2, #20]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    26a2:	2151      	movs	r1, #81	; 0x51
    26a4:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PINCFG_PMUXEN;
    26a6:	2001      	movs	r0, #1
    26a8:	4382      	bics	r2, r0
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    26aa:	545a      	strb	r2, [r3, r1]
	                   // <true"> High
	                   false);

	gpio_set_pin_function(LED_BUILTIN, GPIO_PIN_FUNCTION_OFF);

	analog_in_init();
    26ac:	4b0b      	ldr	r3, [pc, #44]	; (26dc <system_init+0x58>)
    26ae:	4798      	blx	r3
	hash_chk_init();
    26b0:	4b0b      	ldr	r3, [pc, #44]	; (26e0 <system_init+0x5c>)
    26b2:	4798      	blx	r3

	wire_init();
    26b4:	4b0b      	ldr	r3, [pc, #44]	; (26e4 <system_init+0x60>)
    26b6:	4798      	blx	r3

	spi_dev_init();
    26b8:	4b0b      	ldr	r3, [pc, #44]	; (26e8 <system_init+0x64>)
    26ba:	4798      	blx	r3

	delay_driver_init();
    26bc:	4b0b      	ldr	r3, [pc, #44]	; (26ec <system_init+0x68>)
    26be:	4798      	blx	r3

	time_date_CLOCK_init();
    26c0:	4b0b      	ldr	r3, [pc, #44]	; (26f0 <system_init+0x6c>)
    26c2:	4798      	blx	r3
	time_date_init();
    26c4:	4b0b      	ldr	r3, [pc, #44]	; (26f4 <system_init+0x70>)
    26c6:	4798      	blx	r3

	USB_DEVICE_INSTANCE_init();
    26c8:	4b0b      	ldr	r3, [pc, #44]	; (26f8 <system_init+0x74>)
    26ca:	4798      	blx	r3
}
    26cc:	bd10      	pop	{r4, pc}
    26ce:	46c0      	nop			; (mov r8, r8)
    26d0:	0000316d 	.word	0x0000316d
    26d4:	41004400 	.word	0x41004400
    26d8:	c0000002 	.word	0xc0000002
    26dc:	0000236d 	.word	0x0000236d
    26e0:	00002399 	.word	0x00002399
    26e4:	00002441 	.word	0x00002441
    26e8:	0000255d 	.word	0x0000255d
    26ec:	00002585 	.word	0x00002585
    26f0:	00002599 	.word	0x00002599
    26f4:	0000324d 	.word	0x0000324d
    26f8:	00002669 	.word	0x00002669

000026fc <adc_sync_init>:

/**
 * \brief Initialize ADC
 */
int32_t adc_sync_init(struct adc_sync_descriptor *const descr, void *const hw, void *const func)
{
    26fc:	b570      	push	{r4, r5, r6, lr}
    26fe:	0004      	movs	r4, r0
    2700:	000d      	movs	r5, r1
	ASSERT(descr && hw);
    2702:	2800      	cmp	r0, #0
    2704:	d00c      	beq.n	2720 <adc_sync_init+0x24>
    2706:	0008      	movs	r0, r1
    2708:	1e43      	subs	r3, r0, #1
    270a:	4198      	sbcs	r0, r3
    270c:	b2c0      	uxtb	r0, r0
    270e:	2243      	movs	r2, #67	; 0x43
    2710:	4904      	ldr	r1, [pc, #16]	; (2724 <adc_sync_init+0x28>)
    2712:	4b05      	ldr	r3, [pc, #20]	; (2728 <adc_sync_init+0x2c>)
    2714:	4798      	blx	r3

	return _adc_sync_init(&descr->device, hw);
    2716:	0029      	movs	r1, r5
    2718:	0020      	movs	r0, r4
    271a:	4b04      	ldr	r3, [pc, #16]	; (272c <adc_sync_init+0x30>)
    271c:	4798      	blx	r3
}
    271e:	bd70      	pop	{r4, r5, r6, pc}
    2720:	2000      	movs	r0, #0
    2722:	e7f4      	b.n	270e <adc_sync_init+0x12>
    2724:	00009b34 	.word	0x00009b34
    2728:	00002fbd 	.word	0x00002fbd
    272c:	0000312d 	.word	0x0000312d

00002730 <atomic_enter_critical>:
 */
__attribute__((always_inline)) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    2730:	f3ef 8310 	mrs	r3, PRIMASK
/**
 * \brief Disable interrupts, enter critical section
 */
void atomic_enter_critical(hal_atomic_t volatile *atomic)
{
	*atomic = __get_PRIMASK();
    2734:	6003      	str	r3, [r0, #0]
  __ASM volatile ("cpsid i" : : : "memory");
    2736:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__attribute__((always_inline)) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
    2738:	f3bf 8f5f 	dmb	sy
	__disable_irq();
	__DMB();
}
    273c:	4770      	bx	lr

0000273e <atomic_leave_critical>:
    273e:	f3bf 8f5f 	dmb	sy
 * \brief Exit atomic section
 */
void atomic_leave_critical(hal_atomic_t volatile *atomic)
{
	__DMB();
	__set_PRIMASK(*atomic);
    2742:	6803      	ldr	r3, [r0, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
    2744:	f383 8810 	msr	PRIMASK, r3
}
    2748:	4770      	bx	lr
	...

0000274c <crc_sync_init>:

/**
 * \brief Initialize CRC.
 */
int32_t crc_sync_init(struct crc_sync_descriptor *const descr, void *const hw)
{
    274c:	b570      	push	{r4, r5, r6, lr}
    274e:	0004      	movs	r4, r0
    2750:	000d      	movs	r5, r1
	ASSERT(descr && hw);
    2752:	2800      	cmp	r0, #0
    2754:	d00c      	beq.n	2770 <crc_sync_init+0x24>
    2756:	0008      	movs	r0, r1
    2758:	1e43      	subs	r3, r0, #1
    275a:	4198      	sbcs	r0, r3
    275c:	b2c0      	uxtb	r0, r0
    275e:	2235      	movs	r2, #53	; 0x35
    2760:	4904      	ldr	r1, [pc, #16]	; (2774 <crc_sync_init+0x28>)
    2762:	4b05      	ldr	r3, [pc, #20]	; (2778 <crc_sync_init+0x2c>)
    2764:	4798      	blx	r3

	return _crc_sync_init(&descr->dev, hw);
    2766:	0029      	movs	r1, r5
    2768:	0020      	movs	r0, r4
    276a:	4b04      	ldr	r3, [pc, #16]	; (277c <crc_sync_init+0x30>)
    276c:	4798      	blx	r3
}
    276e:	bd70      	pop	{r4, r5, r6, pc}
    2770:	2000      	movs	r0, #0
    2772:	e7f4      	b.n	275e <crc_sync_init+0x12>
    2774:	00009b50 	.word	0x00009b50
    2778:	00002fbd 	.word	0x00002fbd
    277c:	000031a5 	.word	0x000031a5

00002780 <delay_init>:

/**
 * \brief Initialize Delay driver
 */
void delay_init(void *const hw)
{
    2780:	b510      	push	{r4, lr}
	_delay_init(hardware = hw);
    2782:	4b02      	ldr	r3, [pc, #8]	; (278c <delay_init+0xc>)
    2784:	6018      	str	r0, [r3, #0]
    2786:	4b02      	ldr	r3, [pc, #8]	; (2790 <delay_init+0x10>)
    2788:	4798      	blx	r3
}
    278a:	bd10      	pop	{r4, pc}
    278c:	20000144 	.word	0x20000144
    2790:	00003ca1 	.word	0x00003ca1

00002794 <delay_ms>:

/**
 * \brief Perform delay in ms
 */
void delay_ms(const uint16_t ms)
{
    2794:	b510      	push	{r4, lr}
	_delay_cycles(hardware, _get_cycles_for_ms(ms));
    2796:	4b04      	ldr	r3, [pc, #16]	; (27a8 <delay_ms+0x14>)
    2798:	681c      	ldr	r4, [r3, #0]
    279a:	4b04      	ldr	r3, [pc, #16]	; (27ac <delay_ms+0x18>)
    279c:	4798      	blx	r3
    279e:	0001      	movs	r1, r0
    27a0:	0020      	movs	r0, r4
    27a2:	4b03      	ldr	r3, [pc, #12]	; (27b0 <delay_ms+0x1c>)
    27a4:	4798      	blx	r3
}
    27a6:	bd10      	pop	{r4, pc}
    27a8:	20000144 	.word	0x20000144
    27ac:	00003165 	.word	0x00003165
    27b0:	00003cb5 	.word	0x00003cb5

000027b4 <i2c_m_sync_write>:

/**
 * \brief Sync version of I2C I/O write
 */
static int32_t i2c_m_sync_write(struct io_descriptor *io, const uint8_t *buf, const uint16_t n)
{
    27b4:	b510      	push	{r4, lr}
    27b6:	b084      	sub	sp, #16
    27b8:	0014      	movs	r4, r2
	struct i2c_m_sync_desc *i2c = CONTAINER_OF(io, struct i2c_m_sync_desc, io);
	struct _i2c_m_msg       msg;
	int32_t                 ret;

	msg.addr   = i2c->slave_addr;
    27ba:	ab01      	add	r3, sp, #4
    27bc:	3814      	subs	r0, #20
    27be:	8b82      	ldrh	r2, [r0, #28]
    27c0:	801a      	strh	r2, [r3, #0]
	msg.len    = n;
    27c2:	9402      	str	r4, [sp, #8]
	msg.flags  = I2C_M_STOP;
    27c4:	4a05      	ldr	r2, [pc, #20]	; (27dc <i2c_m_sync_write+0x28>)
    27c6:	805a      	strh	r2, [r3, #2]
	msg.buffer = (uint8_t *)buf;
    27c8:	9103      	str	r1, [sp, #12]

	ret = _i2c_m_sync_transfer(&i2c->device, &msg);
    27ca:	0019      	movs	r1, r3
    27cc:	4b04      	ldr	r3, [pc, #16]	; (27e0 <i2c_m_sync_write+0x2c>)
    27ce:	4798      	blx	r3

	if (ret) {
    27d0:	2800      	cmp	r0, #0
    27d2:	d100      	bne.n	27d6 <i2c_m_sync_write+0x22>
		return ret;
	}

	return n;
    27d4:	0020      	movs	r0, r4
}
    27d6:	b004      	add	sp, #16
    27d8:	bd10      	pop	{r4, pc}
    27da:	46c0      	nop			; (mov r8, r8)
    27dc:	ffff8000 	.word	0xffff8000
    27e0:	0000346d 	.word	0x0000346d

000027e4 <i2c_m_sync_read>:
{
    27e4:	b510      	push	{r4, lr}
    27e6:	b084      	sub	sp, #16
    27e8:	0014      	movs	r4, r2
	msg.addr   = i2c->slave_addr;
    27ea:	ab01      	add	r3, sp, #4
    27ec:	3814      	subs	r0, #20
    27ee:	8b82      	ldrh	r2, [r0, #28]
    27f0:	801a      	strh	r2, [r3, #0]
	msg.len    = n;
    27f2:	9402      	str	r4, [sp, #8]
	msg.flags  = I2C_M_STOP | I2C_M_RD;
    27f4:	4a05      	ldr	r2, [pc, #20]	; (280c <i2c_m_sync_read+0x28>)
    27f6:	805a      	strh	r2, [r3, #2]
	msg.buffer = buf;
    27f8:	9103      	str	r1, [sp, #12]
	ret = _i2c_m_sync_transfer(&i2c->device, &msg);
    27fa:	0019      	movs	r1, r3
    27fc:	4b04      	ldr	r3, [pc, #16]	; (2810 <i2c_m_sync_read+0x2c>)
    27fe:	4798      	blx	r3
	if (ret) {
    2800:	2800      	cmp	r0, #0
    2802:	d100      	bne.n	2806 <i2c_m_sync_read+0x22>
	return n;
    2804:	0020      	movs	r0, r4
}
    2806:	b004      	add	sp, #16
    2808:	bd10      	pop	{r4, pc}
    280a:	46c0      	nop			; (mov r8, r8)
    280c:	ffff8001 	.word	0xffff8001
    2810:	0000346d 	.word	0x0000346d

00002814 <i2c_m_sync_init>:

/**
 * \brief Sync version of i2c initialize
 */
int32_t i2c_m_sync_init(struct i2c_m_sync_desc *i2c, void *hw)
{
    2814:	b570      	push	{r4, r5, r6, lr}
    2816:	0004      	movs	r4, r0
    2818:	000d      	movs	r5, r1
	int32_t init_status;
	ASSERT(i2c);
    281a:	1e43      	subs	r3, r0, #1
    281c:	4198      	sbcs	r0, r3
    281e:	b2c0      	uxtb	r0, r0
    2820:	2268      	movs	r2, #104	; 0x68
    2822:	4907      	ldr	r1, [pc, #28]	; (2840 <i2c_m_sync_init+0x2c>)
    2824:	4b07      	ldr	r3, [pc, #28]	; (2844 <i2c_m_sync_init+0x30>)
    2826:	4798      	blx	r3

	init_status = _i2c_m_sync_init(&i2c->device, hw);
    2828:	0029      	movs	r1, r5
    282a:	0020      	movs	r0, r4
    282c:	4b06      	ldr	r3, [pc, #24]	; (2848 <i2c_m_sync_init+0x34>)
    282e:	4798      	blx	r3
	if (init_status) {
    2830:	2800      	cmp	r0, #0
    2832:	d103      	bne.n	283c <i2c_m_sync_init+0x28>
		return init_status;
	}

	/* Init I/O */
	i2c->io.read  = i2c_m_sync_read;
    2834:	4b05      	ldr	r3, [pc, #20]	; (284c <i2c_m_sync_init+0x38>)
    2836:	61a3      	str	r3, [r4, #24]
	i2c->io.write = i2c_m_sync_write;
    2838:	4b05      	ldr	r3, [pc, #20]	; (2850 <i2c_m_sync_init+0x3c>)
    283a:	6163      	str	r3, [r4, #20]

	return ERR_NONE;
}
    283c:	bd70      	pop	{r4, r5, r6, pc}
    283e:	46c0      	nop			; (mov r8, r8)
    2840:	00009b6c 	.word	0x00009b6c
    2844:	00002fbd 	.word	0x00002fbd
    2848:	000033c9 	.word	0x000033c9
    284c:	000027e5 	.word	0x000027e5
    2850:	000027b5 	.word	0x000027b5

00002854 <i2c_m_sync_enable>:

/**
 * \brief Sync version of i2c enable
 */
int32_t i2c_m_sync_enable(struct i2c_m_sync_desc *i2c)
{
    2854:	b510      	push	{r4, lr}
	return _i2c_m_sync_enable(&i2c->device);
    2856:	4b01      	ldr	r3, [pc, #4]	; (285c <i2c_m_sync_enable+0x8>)
    2858:	4798      	blx	r3
}
    285a:	bd10      	pop	{r4, pc}
    285c:	000033f9 	.word	0x000033f9

00002860 <i2c_m_sync_set_slaveaddr>:
/**
 * \brief Sync version of i2c set slave address
 */
int32_t i2c_m_sync_set_slaveaddr(struct i2c_m_sync_desc *i2c, int16_t addr, int32_t addr_len)
{
	return i2c->slave_addr = (addr & 0x3ff) | (addr_len & I2C_M_TEN);
    2860:	0589      	lsls	r1, r1, #22
    2862:	0d89      	lsrs	r1, r1, #22
    2864:	2380      	movs	r3, #128	; 0x80
    2866:	00db      	lsls	r3, r3, #3
    2868:	401a      	ands	r2, r3
    286a:	430a      	orrs	r2, r1
    286c:	8382      	strh	r2, [r0, #28]
}
    286e:	0010      	movs	r0, r2
    2870:	4770      	bx	lr

00002872 <i2c_m_sync_get_io_descriptor>:
/**
 * \brief Retrieve I/O descriptor
 */
int32_t i2c_m_sync_get_io_descriptor(struct i2c_m_sync_desc *const i2c, struct io_descriptor **io)
{
	*io = &i2c->io;
    2872:	3014      	adds	r0, #20
    2874:	6008      	str	r0, [r1, #0]
	return ERR_NONE;
}
    2876:	2000      	movs	r0, #0
    2878:	4770      	bx	lr
	...

0000287c <io_write>:

/**
 * \brief I/O write interface
 */
int32_t io_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
    287c:	b570      	push	{r4, r5, r6, lr}
    287e:	0006      	movs	r6, r0
    2880:	000c      	movs	r4, r1
    2882:	0015      	movs	r5, r2
	ASSERT(io_descr && buf);
    2884:	2800      	cmp	r0, #0
    2886:	d00d      	beq.n	28a4 <io_write+0x28>
    2888:	0008      	movs	r0, r1
    288a:	1e43      	subs	r3, r0, #1
    288c:	4198      	sbcs	r0, r3
    288e:	b2c0      	uxtb	r0, r0
    2890:	223e      	movs	r2, #62	; 0x3e
    2892:	4905      	ldr	r1, [pc, #20]	; (28a8 <io_write+0x2c>)
    2894:	4b05      	ldr	r3, [pc, #20]	; (28ac <io_write+0x30>)
    2896:	4798      	blx	r3
	return io_descr->write(io_descr, buf, length);
    2898:	6833      	ldr	r3, [r6, #0]
    289a:	002a      	movs	r2, r5
    289c:	0021      	movs	r1, r4
    289e:	0030      	movs	r0, r6
    28a0:	4798      	blx	r3
}
    28a2:	bd70      	pop	{r4, r5, r6, pc}
    28a4:	2000      	movs	r0, #0
    28a6:	e7f3      	b.n	2890 <io_write+0x14>
    28a8:	00009b88 	.word	0x00009b88
    28ac:	00002fbd 	.word	0x00002fbd

000028b0 <io_read>:

/**
 * \brief I/O read interface
 */
int32_t io_read(struct io_descriptor *const io_descr, uint8_t *const buf, const uint16_t length)
{
    28b0:	b570      	push	{r4, r5, r6, lr}
    28b2:	0006      	movs	r6, r0
    28b4:	000c      	movs	r4, r1
    28b6:	0015      	movs	r5, r2
	ASSERT(io_descr && buf);
    28b8:	2800      	cmp	r0, #0
    28ba:	d00d      	beq.n	28d8 <io_read+0x28>
    28bc:	0008      	movs	r0, r1
    28be:	1e43      	subs	r3, r0, #1
    28c0:	4198      	sbcs	r0, r3
    28c2:	b2c0      	uxtb	r0, r0
    28c4:	2247      	movs	r2, #71	; 0x47
    28c6:	4905      	ldr	r1, [pc, #20]	; (28dc <io_read+0x2c>)
    28c8:	4b05      	ldr	r3, [pc, #20]	; (28e0 <io_read+0x30>)
    28ca:	4798      	blx	r3
	return io_descr->read(io_descr, buf, length);
    28cc:	6873      	ldr	r3, [r6, #4]
    28ce:	002a      	movs	r2, r5
    28d0:	0021      	movs	r1, r4
    28d2:	0030      	movs	r0, r6
    28d4:	4798      	blx	r3
}
    28d6:	bd70      	pop	{r4, r5, r6, pc}
    28d8:	2000      	movs	r0, #0
    28da:	e7f3      	b.n	28c4 <io_read+0x14>
    28dc:	00009b88 	.word	0x00009b88
    28e0:	00002fbd 	.word	0x00002fbd

000028e4 <spi_m_sync_init>:

static int32_t _spi_m_sync_io_write(struct io_descriptor *const io, const uint8_t *const buf, const uint16_t length);
static int32_t _spi_m_sync_io_read(struct io_descriptor *const io, uint8_t *const buf, const uint16_t length);

int32_t spi_m_sync_init(struct spi_m_sync_descriptor *spi, void *const hw)
{
    28e4:	b570      	push	{r4, r5, r6, lr}
    28e6:	0004      	movs	r4, r0
    28e8:	000d      	movs	r5, r1
	int32_t rc = 0;

	ASSERT(spi && hw);
    28ea:	2800      	cmp	r0, #0
    28ec:	d016      	beq.n	291c <spi_m_sync_init+0x38>
    28ee:	0008      	movs	r0, r1
    28f0:	1e43      	subs	r3, r0, #1
    28f2:	4198      	sbcs	r0, r3
    28f4:	b2c0      	uxtb	r0, r0
    28f6:	2242      	movs	r2, #66	; 0x42
    28f8:	4909      	ldr	r1, [pc, #36]	; (2920 <spi_m_sync_init+0x3c>)
    28fa:	4b0a      	ldr	r3, [pc, #40]	; (2924 <spi_m_sync_init+0x40>)
    28fc:	4798      	blx	r3

	spi->dev.prvt = (void *)hw;
    28fe:	6025      	str	r5, [r4, #0]

	rc = _spi_m_sync_init(&spi->dev, hw);
    2900:	0029      	movs	r1, r5
    2902:	0020      	movs	r0, r4
    2904:	4b08      	ldr	r3, [pc, #32]	; (2928 <spi_m_sync_init+0x44>)
    2906:	4798      	blx	r3
	if (rc < 0) {
    2908:	2800      	cmp	r0, #0
    290a:	db06      	blt.n	291a <spi_m_sync_init+0x36>
		return rc;
	}

	spi->flags    = SPI_DEACTIVATE_NEXT;
    290c:	4b07      	ldr	r3, [pc, #28]	; (292c <spi_m_sync_init+0x48>)
    290e:	8223      	strh	r3, [r4, #16]
	spi->io.read  = _spi_m_sync_io_read;
    2910:	4b07      	ldr	r3, [pc, #28]	; (2930 <spi_m_sync_init+0x4c>)
    2912:	60e3      	str	r3, [r4, #12]
	spi->io.write = _spi_m_sync_io_write;
    2914:	4b07      	ldr	r3, [pc, #28]	; (2934 <spi_m_sync_init+0x50>)
    2916:	60a3      	str	r3, [r4, #8]

	return ERR_NONE;
    2918:	2000      	movs	r0, #0
}
    291a:	bd70      	pop	{r4, r5, r6, pc}
    291c:	2000      	movs	r0, #0
    291e:	e7ea      	b.n	28f6 <spi_m_sync_init+0x12>
    2920:	00009b9c 	.word	0x00009b9c
    2924:	00002fbd 	.word	0x00002fbd
    2928:	00003945 	.word	0x00003945
    292c:	ffff8000 	.word	0xffff8000
    2930:	000029bd 	.word	0x000029bd
    2934:	00002981 	.word	0x00002981

00002938 <spi_m_sync_transfer>:

	return spi_m_sync_transfer(spi, &xfer);
}

int32_t spi_m_sync_transfer(struct spi_m_sync_descriptor *spi, const struct spi_xfer *p_xfer)
{
    2938:	b530      	push	{r4, r5, lr}
    293a:	b087      	sub	sp, #28
    293c:	0004      	movs	r4, r0
    293e:	000d      	movs	r5, r1
	struct spi_msg msg;

	ASSERT(spi && p_xfer);
    2940:	2800      	cmp	r0, #0
    2942:	d014      	beq.n	296e <spi_m_sync_transfer+0x36>
    2944:	0008      	movs	r0, r1
    2946:	1e43      	subs	r3, r0, #1
    2948:	4198      	sbcs	r0, r3
    294a:	b2c0      	uxtb	r0, r0
    294c:	22bd      	movs	r2, #189	; 0xbd
    294e:	4909      	ldr	r1, [pc, #36]	; (2974 <spi_m_sync_transfer+0x3c>)
    2950:	4b09      	ldr	r3, [pc, #36]	; (2978 <spi_m_sync_transfer+0x40>)
    2952:	4798      	blx	r3

	msg.txbuf = p_xfer->txbuf;
    2954:	682b      	ldr	r3, [r5, #0]
    2956:	9303      	str	r3, [sp, #12]
	msg.rxbuf = p_xfer->rxbuf;
    2958:	686b      	ldr	r3, [r5, #4]
    295a:	9304      	str	r3, [sp, #16]
	msg.size  = p_xfer->size;
    295c:	68ab      	ldr	r3, [r5, #8]
    295e:	9301      	str	r3, [sp, #4]
    2960:	9305      	str	r3, [sp, #20]

	return _spi_m_sync_trans(&spi->dev, &msg);
    2962:	a903      	add	r1, sp, #12
    2964:	0020      	movs	r0, r4
    2966:	4b05      	ldr	r3, [pc, #20]	; (297c <spi_m_sync_transfer+0x44>)
    2968:	4798      	blx	r3
}
    296a:	b007      	add	sp, #28
    296c:	bd30      	pop	{r4, r5, pc}
    296e:	2000      	movs	r0, #0
    2970:	e7ec      	b.n	294c <spi_m_sync_transfer+0x14>
    2972:	46c0      	nop			; (mov r8, r8)
    2974:	00009b9c 	.word	0x00009b9c
    2978:	00002fbd 	.word	0x00002fbd
    297c:	00003aad 	.word	0x00003aad

00002980 <_spi_m_sync_io_write>:
{
    2980:	b570      	push	{r4, r5, r6, lr}
    2982:	b084      	sub	sp, #16
    2984:	0004      	movs	r4, r0
    2986:	000e      	movs	r6, r1
    2988:	0015      	movs	r5, r2
	ASSERT(io);
    298a:	1e43      	subs	r3, r0, #1
    298c:	4198      	sbcs	r0, r3
    298e:	b2c0      	uxtb	r0, r0
    2990:	22ad      	movs	r2, #173	; 0xad
    2992:	4907      	ldr	r1, [pc, #28]	; (29b0 <_spi_m_sync_io_write+0x30>)
    2994:	4b07      	ldr	r3, [pc, #28]	; (29b4 <_spi_m_sync_io_write+0x34>)
    2996:	4798      	blx	r3
	xfer.rxbuf = 0;
    2998:	2300      	movs	r3, #0
    299a:	9302      	str	r3, [sp, #8]
	xfer.txbuf = (uint8_t *)buf;
    299c:	9601      	str	r6, [sp, #4]
	xfer.size  = length;
    299e:	9503      	str	r5, [sp, #12]
	struct spi_m_sync_descriptor *spi = CONTAINER_OF(io, struct spi_m_sync_descriptor, io);
    29a0:	0020      	movs	r0, r4
    29a2:	3808      	subs	r0, #8
	return spi_m_sync_transfer(spi, &xfer);
    29a4:	a901      	add	r1, sp, #4
    29a6:	4b04      	ldr	r3, [pc, #16]	; (29b8 <_spi_m_sync_io_write+0x38>)
    29a8:	4798      	blx	r3
}
    29aa:	b004      	add	sp, #16
    29ac:	bd70      	pop	{r4, r5, r6, pc}
    29ae:	46c0      	nop			; (mov r8, r8)
    29b0:	00009b9c 	.word	0x00009b9c
    29b4:	00002fbd 	.word	0x00002fbd
    29b8:	00002939 	.word	0x00002939

000029bc <_spi_m_sync_io_read>:
{
    29bc:	b570      	push	{r4, r5, r6, lr}
    29be:	b084      	sub	sp, #16
    29c0:	0004      	movs	r4, r0
    29c2:	000e      	movs	r6, r1
    29c4:	0015      	movs	r5, r2
	ASSERT(io);
    29c6:	1e43      	subs	r3, r0, #1
    29c8:	4198      	sbcs	r0, r3
    29ca:	b2c0      	uxtb	r0, r0
    29cc:	2291      	movs	r2, #145	; 0x91
    29ce:	4907      	ldr	r1, [pc, #28]	; (29ec <_spi_m_sync_io_read+0x30>)
    29d0:	4b07      	ldr	r3, [pc, #28]	; (29f0 <_spi_m_sync_io_read+0x34>)
    29d2:	4798      	blx	r3
	xfer.rxbuf = buf;
    29d4:	9602      	str	r6, [sp, #8]
	xfer.txbuf = 0;
    29d6:	2300      	movs	r3, #0
    29d8:	9301      	str	r3, [sp, #4]
	xfer.size  = length;
    29da:	9503      	str	r5, [sp, #12]
	struct spi_m_sync_descriptor *spi = CONTAINER_OF(io, struct spi_m_sync_descriptor, io);
    29dc:	0020      	movs	r0, r4
    29de:	3808      	subs	r0, #8
	return spi_m_sync_transfer(spi, &xfer);
    29e0:	a901      	add	r1, sp, #4
    29e2:	4b04      	ldr	r3, [pc, #16]	; (29f4 <_spi_m_sync_io_read+0x38>)
    29e4:	4798      	blx	r3
}
    29e6:	b004      	add	sp, #16
    29e8:	bd70      	pop	{r4, r5, r6, pc}
    29ea:	46c0      	nop			; (mov r8, r8)
    29ec:	00009b9c 	.word	0x00009b9c
    29f0:	00002fbd 	.word	0x00002fbd
    29f4:	00002939 	.word	0x00002939

000029f8 <_usb_d_find_ep>:
 * \return Index of endpoint descriptor.
 * \retval >=0 The index.
 * \retval <0 Not found (endpoint is not initialized).
 */
static int8_t _usb_d_find_ep(const uint8_t ep)
{
    29f8:	b5f0      	push	{r4, r5, r6, r7, lr}
    29fa:	0004      	movs	r4, r0
	int8_t i;
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
    29fc:	4b0e      	ldr	r3, [pc, #56]	; (2a38 <_usb_d_find_ep+0x40>)
    29fe:	785a      	ldrb	r2, [r3, #1]
    2a00:	4290      	cmp	r0, r2
    2a02:	d017      	beq.n	2a34 <_usb_d_find_ep+0x3c>
    2a04:	2300      	movs	r3, #0
    2a06:	2000      	movs	r0, #0
			return i;
		}
		if (usb_d_inst.ep[i].xfer.hdr.type == USB_EP_XTYPE_CTRL
    2a08:	4f0b      	ldr	r7, [pc, #44]	; (2a38 <_usb_d_find_ep+0x40>)
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
    2a0a:	260f      	movs	r6, #15
    2a0c:	4026      	ands	r6, r4
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
    2a0e:	003d      	movs	r5, r7
    2a10:	e008      	b.n	2a24 <_usb_d_find_ep+0x2c>
    2a12:	3001      	adds	r0, #1
    2a14:	b240      	sxtb	r0, r0
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    2a16:	2804      	cmp	r0, #4
    2a18:	d00a      	beq.n	2a30 <_usb_d_find_ep+0x38>
    2a1a:	3320      	adds	r3, #32
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
    2a1c:	18ea      	adds	r2, r5, r3
    2a1e:	7852      	ldrb	r2, [r2, #1]
    2a20:	42a2      	cmp	r2, r4
    2a22:	d006      	beq.n	2a32 <_usb_d_find_ep+0x3a>
		if (usb_d_inst.ep[i].xfer.hdr.type == USB_EP_XTYPE_CTRL
    2a24:	5dd9      	ldrb	r1, [r3, r7]
    2a26:	2900      	cmp	r1, #0
    2a28:	d1f3      	bne.n	2a12 <_usb_d_find_ep+0x1a>
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
    2a2a:	4296      	cmp	r6, r2
    2a2c:	d1f1      	bne.n	2a12 <_usb_d_find_ep+0x1a>
    2a2e:	e000      	b.n	2a32 <_usb_d_find_ep+0x3a>
			return i;
		}
	}
	return -1;
    2a30:	3805      	subs	r0, #5
}
    2a32:	bdf0      	pop	{r4, r5, r6, r7, pc}
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    2a34:	2000      	movs	r0, #0
    2a36:	e7fc      	b.n	2a32 <_usb_d_find_ep+0x3a>
    2a38:	20000148 	.word	0x20000148

00002a3c <usb_d_dummy_cb_false>:
{
	(void)unused0;
	(void)unused1;
	(void)unused2;
	return false;
}
    2a3c:	2000      	movs	r0, #0
    2a3e:	4770      	bx	lr

00002a40 <usb_d_cb_trans_more>:
 * \brief Callback invoked when request more data
 * \param[in] ep Endpoint number with transfer direction on bit 8.
 * \param[in] transfered Number of bytes transfered.
 */
static bool usb_d_cb_trans_more(const uint8_t ep, const uint32_t transfered)
{
    2a40:	b570      	push	{r4, r5, r6, lr}
    2a42:	0004      	movs	r4, r0
    2a44:	000d      	movs	r5, r1
	int8_t           ep_index = _usb_d_find_ep(ep);
    2a46:	4b0a      	ldr	r3, [pc, #40]	; (2a70 <usb_d_cb_trans_more+0x30>)
    2a48:	4798      	blx	r3
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	if (ept->xfer.hdr.state == USB_EP_S_X_DATA) {
    2a4a:	0142      	lsls	r2, r0, #5
    2a4c:	4b09      	ldr	r3, [pc, #36]	; (2a74 <usb_d_cb_trans_more+0x34>)
    2a4e:	189b      	adds	r3, r3, r2
    2a50:	789a      	ldrb	r2, [r3, #2]
		return ept->callbacks.more(ep, transfered);
	}
	return false;
    2a52:	2300      	movs	r3, #0
	if (ept->xfer.hdr.state == USB_EP_S_X_DATA) {
    2a54:	2a03      	cmp	r2, #3
    2a56:	d001      	beq.n	2a5c <usb_d_cb_trans_more+0x1c>
}
    2a58:	0018      	movs	r0, r3
    2a5a:	bd70      	pop	{r4, r5, r6, pc}
		return ept->callbacks.more(ep, transfered);
    2a5c:	0140      	lsls	r0, r0, #5
    2a5e:	4b05      	ldr	r3, [pc, #20]	; (2a74 <usb_d_cb_trans_more+0x34>)
    2a60:	1818      	adds	r0, r3, r0
    2a62:	6983      	ldr	r3, [r0, #24]
    2a64:	0029      	movs	r1, r5
    2a66:	0020      	movs	r0, r4
    2a68:	4798      	blx	r3
    2a6a:	0003      	movs	r3, r0
    2a6c:	e7f4      	b.n	2a58 <usb_d_cb_trans_more+0x18>
    2a6e:	46c0      	nop			; (mov r8, r8)
    2a70:	000029f9 	.word	0x000029f9
    2a74:	20000148 	.word	0x20000148

00002a78 <_usb_d_cb_trans_done>:

/**
 * Callback when USB transactions are finished.
 */
static void _usb_d_cb_trans_done(const uint8_t ep, const int32_t code, const uint32_t transferred)
{
    2a78:	b5f0      	push	{r4, r5, r6, r7, lr}
    2a7a:	b085      	sub	sp, #20
    2a7c:	0005      	movs	r5, r0
    2a7e:	000f      	movs	r7, r1
    2a80:	0016      	movs	r6, r2
	int8_t           ep_index = _usb_d_find_ep(ep);
    2a82:	4b51      	ldr	r3, [pc, #324]	; (2bc8 <_usb_d_cb_trans_done+0x150>)
    2a84:	4798      	blx	r3
    2a86:	0004      	movs	r4, r0
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];

	if (code == USB_TRANS_DONE) {
    2a88:	2f00      	cmp	r7, #0
    2a8a:	d162      	bne.n	2b52 <_usb_d_cb_trans_done+0xda>
		ept->xfer.hdr.status = USB_XFER_DONE;
    2a8c:	4b4f      	ldr	r3, [pc, #316]	; (2bcc <_usb_d_cb_trans_done+0x154>)
    2a8e:	0142      	lsls	r2, r0, #5
    2a90:	1899      	adds	r1, r3, r2
    2a92:	2000      	movs	r0, #0
    2a94:	70c8      	strb	r0, [r1, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    2a96:	5cd3      	ldrb	r3, [r2, r3]
    2a98:	2b00      	cmp	r3, #0
    2a9a:	d00e      	beq.n	2aba <_usb_d_cb_trans_done+0x42>
			usb_d_ctrl_trans_done(ept);
			return;
		}
		ept->xfer.hdr.state = USB_EP_S_IDLE;
    2a9c:	0162      	lsls	r2, r4, #5
    2a9e:	4b4b      	ldr	r3, [pc, #300]	; (2bcc <_usb_d_cb_trans_done+0x154>)
    2aa0:	189b      	adds	r3, r3, r2
    2aa2:	2201      	movs	r2, #1
    2aa4:	709a      	strb	r2, [r3, #2]
	} else {
		ept->xfer.hdr.state  = USB_EP_S_ERROR;
		ept->xfer.hdr.status = USB_XFER_ERROR;
	}

	ept->callbacks.xfer(ep, (enum usb_xfer_code)ept->xfer.hdr.status, (void *)transferred);
    2aa6:	0164      	lsls	r4, r4, #5
    2aa8:	4b48      	ldr	r3, [pc, #288]	; (2bcc <_usb_d_cb_trans_done+0x154>)
    2aaa:	191c      	adds	r4, r3, r4
    2aac:	78e1      	ldrb	r1, [r4, #3]
    2aae:	69e3      	ldr	r3, [r4, #28]
    2ab0:	0032      	movs	r2, r6
    2ab2:	0028      	movs	r0, r5
    2ab4:	4798      	blx	r3
}
    2ab6:	b005      	add	sp, #20
    2ab8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (state == USB_EP_S_X_DATA) {
    2aba:	788b      	ldrb	r3, [r1, #2]
    2abc:	2b03      	cmp	r3, #3
    2abe:	d00c      	beq.n	2ada <_usb_d_cb_trans_done+0x62>
		ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DONE, ept->xfer.req);
    2ac0:	4b42      	ldr	r3, [pc, #264]	; (2bcc <_usb_d_cb_trans_done+0x154>)
    2ac2:	0162      	lsls	r2, r4, #5
    2ac4:	320c      	adds	r2, #12
    2ac6:	189a      	adds	r2, r3, r2
    2ac8:	0164      	lsls	r4, r4, #5
    2aca:	191c      	adds	r4, r3, r4
    2acc:	7860      	ldrb	r0, [r4, #1]
    2ace:	2100      	movs	r1, #0
    2ad0:	69e3      	ldr	r3, [r4, #28]
    2ad2:	4798      	blx	r3
		ept->xfer.hdr.state = USB_EP_S_X_SETUP;
    2ad4:	2302      	movs	r3, #2
    2ad6:	70a3      	strb	r3, [r4, #2]
    2ad8:	e7ed      	b.n	2ab6 <_usb_d_cb_trans_done+0x3e>
	bool    req_dir = USB_GET_bmRequestType(ept->xfer.req) & USB_REQ_TYPE_IN;
    2ada:	4a3c      	ldr	r2, [pc, #240]	; (2bcc <_usb_d_cb_trans_done+0x154>)
    2adc:	000b      	movs	r3, r1
    2ade:	250c      	movs	r5, #12
    2ae0:	574d      	ldrsb	r5, [r1, r5]
		bool err = ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DATA, ept->xfer.req);
    2ae2:	0161      	lsls	r1, r4, #5
    2ae4:	310c      	adds	r1, #12
    2ae6:	1852      	adds	r2, r2, r1
    2ae8:	7858      	ldrb	r0, [r3, #1]
    2aea:	69db      	ldr	r3, [r3, #28]
    2aec:	2101      	movs	r1, #1
    2aee:	4798      	blx	r3
		if (err) {
    2af0:	2800      	cmp	r0, #0
    2af2:	d017      	beq.n	2b24 <_usb_d_cb_trans_done+0xac>
			ept->xfer.hdr.state  = USB_EP_S_HALTED;
    2af4:	0162      	lsls	r2, r4, #5
    2af6:	4b35      	ldr	r3, [pc, #212]	; (2bcc <_usb_d_cb_trans_done+0x154>)
    2af8:	189b      	adds	r3, r3, r2
    2afa:	2205      	movs	r2, #5
    2afc:	709a      	strb	r2, [r3, #2]
			ept->xfer.hdr.status = USB_XFER_HALT;
    2afe:	3a03      	subs	r2, #3
    2b00:	70da      	strb	r2, [r3, #3]
			_usb_d_dev_ep_stall(req_dir ? ept->xfer.hdr.ep : (ept->xfer.hdr.ep | USB_EP_DIR), USB_EP_STALL_SET);
    2b02:	2d00      	cmp	r5, #0
    2b04:	db09      	blt.n	2b1a <_usb_d_cb_trans_done+0xa2>
    2b06:	0164      	lsls	r4, r4, #5
    2b08:	4b30      	ldr	r3, [pc, #192]	; (2bcc <_usb_d_cb_trans_done+0x154>)
    2b0a:	191c      	adds	r4, r3, r4
    2b0c:	7860      	ldrb	r0, [r4, #1]
    2b0e:	2380      	movs	r3, #128	; 0x80
    2b10:	4318      	orrs	r0, r3
    2b12:	2101      	movs	r1, #1
    2b14:	4b2e      	ldr	r3, [pc, #184]	; (2bd0 <_usb_d_cb_trans_done+0x158>)
    2b16:	4798      	blx	r3
    2b18:	e7cd      	b.n	2ab6 <_usb_d_cb_trans_done+0x3e>
    2b1a:	0164      	lsls	r4, r4, #5
    2b1c:	4b2b      	ldr	r3, [pc, #172]	; (2bcc <_usb_d_cb_trans_done+0x154>)
    2b1e:	191c      	adds	r4, r3, r4
    2b20:	7860      	ldrb	r0, [r4, #1]
    2b22:	e7f6      	b.n	2b12 <_usb_d_cb_trans_done+0x9a>
			ept->xfer.hdr.state = USB_EP_S_X_STATUS;
    2b24:	0164      	lsls	r4, r4, #5
    2b26:	4b29      	ldr	r3, [pc, #164]	; (2bcc <_usb_d_cb_trans_done+0x154>)
    2b28:	191c      	adds	r4, r3, r4
    2b2a:	2304      	movs	r3, #4
    2b2c:	70a3      	strb	r3, [r4, #2]
			_usb_d_trans(ept->xfer.hdr.ep, !req_dir, NULL, 0, 1);
    2b2e:	7863      	ldrb	r3, [r4, #1]
	struct usb_d_transfer trans
    2b30:	2200      	movs	r2, #0
    2b32:	9201      	str	r2, [sp, #4]
    2b34:	9202      	str	r2, [sp, #8]
    2b36:	2d00      	cmp	r5, #0
    2b38:	db08      	blt.n	2b4c <_usb_d_cb_trans_done+0xd4>
    2b3a:	3280      	adds	r2, #128	; 0x80
    2b3c:	4313      	orrs	r3, r2
    2b3e:	a801      	add	r0, sp, #4
    2b40:	7203      	strb	r3, [r0, #8]
    2b42:	2301      	movs	r3, #1
    2b44:	7243      	strb	r3, [r0, #9]
	return _usb_d_dev_ep_trans(&trans);
    2b46:	4b23      	ldr	r3, [pc, #140]	; (2bd4 <_usb_d_cb_trans_done+0x15c>)
    2b48:	4798      	blx	r3
    2b4a:	e7b4      	b.n	2ab6 <_usb_d_cb_trans_done+0x3e>
	struct usb_d_transfer trans
    2b4c:	220f      	movs	r2, #15
    2b4e:	4013      	ands	r3, r2
    2b50:	e7f5      	b.n	2b3e <_usb_d_cb_trans_done+0xc6>
	} else if (code == USB_TRANS_STALL) {
    2b52:	2f01      	cmp	r7, #1
    2b54:	d00a      	beq.n	2b6c <_usb_d_cb_trans_done+0xf4>
	} else if (code == USB_TRANS_ABORT) {
    2b56:	2f02      	cmp	r7, #2
    2b58:	d01d      	beq.n	2b96 <_usb_d_cb_trans_done+0x11e>
	} else if (code == USB_TRANS_RESET) {
    2b5a:	2f03      	cmp	r7, #3
    2b5c:	d02c      	beq.n	2bb8 <_usb_d_cb_trans_done+0x140>
		ept->xfer.hdr.state  = USB_EP_S_ERROR;
    2b5e:	0142      	lsls	r2, r0, #5
    2b60:	4b1a      	ldr	r3, [pc, #104]	; (2bcc <_usb_d_cb_trans_done+0x154>)
    2b62:	189b      	adds	r3, r3, r2
    2b64:	2206      	movs	r2, #6
    2b66:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_ERROR;
    2b68:	70da      	strb	r2, [r3, #3]
    2b6a:	e79c      	b.n	2aa6 <_usb_d_cb_trans_done+0x2e>
		ept->xfer.hdr.status = USB_XFER_HALT;
    2b6c:	4b17      	ldr	r3, [pc, #92]	; (2bcc <_usb_d_cb_trans_done+0x154>)
    2b6e:	0142      	lsls	r2, r0, #5
    2b70:	1899      	adds	r1, r3, r2
    2b72:	2002      	movs	r0, #2
    2b74:	70c8      	strb	r0, [r1, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    2b76:	5cd3      	ldrb	r3, [r2, r3]
    2b78:	2b00      	cmp	r3, #0
    2b7a:	d005      	beq.n	2b88 <_usb_d_cb_trans_done+0x110>
			ept->xfer.hdr.state = USB_EP_S_HALTED;
    2b7c:	0162      	lsls	r2, r4, #5
    2b7e:	4b13      	ldr	r3, [pc, #76]	; (2bcc <_usb_d_cb_trans_done+0x154>)
    2b80:	189b      	adds	r3, r3, r2
    2b82:	2205      	movs	r2, #5
    2b84:	709a      	strb	r2, [r3, #2]
    2b86:	e78e      	b.n	2aa6 <_usb_d_cb_trans_done+0x2e>
			ept->xfer.hdr.state = USB_EP_S_X_SETUP;
    2b88:	2202      	movs	r2, #2
    2b8a:	708a      	strb	r2, [r1, #2]
			_usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    2b8c:	2100      	movs	r1, #0
    2b8e:	0028      	movs	r0, r5
    2b90:	4b0f      	ldr	r3, [pc, #60]	; (2bd0 <_usb_d_cb_trans_done+0x158>)
    2b92:	4798      	blx	r3
    2b94:	e787      	b.n	2aa6 <_usb_d_cb_trans_done+0x2e>
		ept->xfer.hdr.status = USB_XFER_ABORT;
    2b96:	4b0d      	ldr	r3, [pc, #52]	; (2bcc <_usb_d_cb_trans_done+0x154>)
    2b98:	0142      	lsls	r2, r0, #5
    2b9a:	1899      	adds	r1, r3, r2
    2b9c:	2004      	movs	r0, #4
    2b9e:	70c8      	strb	r0, [r1, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    2ba0:	5cd3      	ldrb	r3, [r2, r3]
    2ba2:	2b00      	cmp	r3, #0
    2ba4:	d005      	beq.n	2bb2 <_usb_d_cb_trans_done+0x13a>
		ept->xfer.hdr.state = USB_EP_S_IDLE;
    2ba6:	0162      	lsls	r2, r4, #5
    2ba8:	4b08      	ldr	r3, [pc, #32]	; (2bcc <_usb_d_cb_trans_done+0x154>)
    2baa:	189b      	adds	r3, r3, r2
    2bac:	2201      	movs	r2, #1
    2bae:	709a      	strb	r2, [r3, #2]
    2bb0:	e779      	b.n	2aa6 <_usb_d_cb_trans_done+0x2e>
			ept->xfer.hdr.state = USB_EP_S_X_SETUP;
    2bb2:	2302      	movs	r3, #2
    2bb4:	708b      	strb	r3, [r1, #2]
			return;
    2bb6:	e77e      	b.n	2ab6 <_usb_d_cb_trans_done+0x3e>
		ept->xfer.hdr.state  = USB_EP_S_DISABLED;
    2bb8:	0142      	lsls	r2, r0, #5
    2bba:	4b04      	ldr	r3, [pc, #16]	; (2bcc <_usb_d_cb_trans_done+0x154>)
    2bbc:	189b      	adds	r3, r3, r2
    2bbe:	2200      	movs	r2, #0
    2bc0:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_RESET;
    2bc2:	3205      	adds	r2, #5
    2bc4:	70da      	strb	r2, [r3, #3]
    2bc6:	e76e      	b.n	2aa6 <_usb_d_cb_trans_done+0x2e>
    2bc8:	000029f9 	.word	0x000029f9
    2bcc:	20000148 	.word	0x20000148
    2bd0:	0000498d 	.word	0x0000498d
    2bd4:	00004b61 	.word	0x00004b61

00002bd8 <usb_d_cb_trans_setup>:
{
    2bd8:	b5f0      	push	{r4, r5, r6, r7, lr}
    2bda:	46c6      	mov	lr, r8
    2bdc:	b500      	push	{lr}
    2bde:	0004      	movs	r4, r0
	int8_t           ep_index = _usb_d_find_ep(ep);
    2be0:	4b1d      	ldr	r3, [pc, #116]	; (2c58 <usb_d_cb_trans_setup+0x80>)
    2be2:	4798      	blx	r3
    2be4:	0006      	movs	r6, r0
	uint8_t *        req      = ept->xfer.req;
    2be6:	0145      	lsls	r5, r0, #5
    2be8:	350c      	adds	r5, #12
    2bea:	4b1c      	ldr	r3, [pc, #112]	; (2c5c <usb_d_cb_trans_setup+0x84>)
    2bec:	195d      	adds	r5, r3, r5
	uint8_t n = _usb_d_dev_ep_read_req(ep, req);
    2bee:	0029      	movs	r1, r5
    2bf0:	0020      	movs	r0, r4
    2bf2:	4b1b      	ldr	r3, [pc, #108]	; (2c60 <usb_d_cb_trans_setup+0x88>)
    2bf4:	4798      	blx	r3
	if (n != 8) {
    2bf6:	b2c0      	uxtb	r0, r0
    2bf8:	2808      	cmp	r0, #8
    2bfa:	d00a      	beq.n	2c12 <usb_d_cb_trans_setup+0x3a>
		_usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
    2bfc:	2101      	movs	r1, #1
    2bfe:	0020      	movs	r0, r4
    2c00:	4d18      	ldr	r5, [pc, #96]	; (2c64 <usb_d_cb_trans_setup+0x8c>)
    2c02:	47a8      	blx	r5
		_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_SET);
    2c04:	2080      	movs	r0, #128	; 0x80
    2c06:	4320      	orrs	r0, r4
    2c08:	2101      	movs	r1, #1
    2c0a:	47a8      	blx	r5
}
    2c0c:	bc04      	pop	{r2}
    2c0e:	4690      	mov	r8, r2
    2c10:	bdf0      	pop	{r4, r5, r6, r7, pc}
	_usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    2c12:	2100      	movs	r1, #0
    2c14:	0020      	movs	r0, r4
    2c16:	4b13      	ldr	r3, [pc, #76]	; (2c64 <usb_d_cb_trans_setup+0x8c>)
    2c18:	4698      	mov	r8, r3
    2c1a:	4798      	blx	r3
	_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_CLR);
    2c1c:	2780      	movs	r7, #128	; 0x80
    2c1e:	4327      	orrs	r7, r4
    2c20:	2100      	movs	r1, #0
    2c22:	0038      	movs	r0, r7
    2c24:	47c0      	blx	r8
	ept->xfer.hdr.state = USB_EP_S_IDLE;
    2c26:	0172      	lsls	r2, r6, #5
    2c28:	4b0c      	ldr	r3, [pc, #48]	; (2c5c <usb_d_cb_trans_setup+0x84>)
    2c2a:	189b      	adds	r3, r3, r2
    2c2c:	2201      	movs	r2, #1
    2c2e:	709a      	strb	r2, [r3, #2]
	if (!ept->callbacks.req(ep, req)) {
    2c30:	695b      	ldr	r3, [r3, #20]
    2c32:	0029      	movs	r1, r5
    2c34:	0020      	movs	r0, r4
    2c36:	4798      	blx	r3
    2c38:	2800      	cmp	r0, #0
    2c3a:	d1e7      	bne.n	2c0c <usb_d_cb_trans_setup+0x34>
		ept->xfer.hdr.state = USB_EP_S_HALTED;
    2c3c:	0176      	lsls	r6, r6, #5
    2c3e:	4b07      	ldr	r3, [pc, #28]	; (2c5c <usb_d_cb_trans_setup+0x84>)
    2c40:	199e      	adds	r6, r3, r6
    2c42:	2305      	movs	r3, #5
    2c44:	70b3      	strb	r3, [r6, #2]
		_usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
    2c46:	2101      	movs	r1, #1
    2c48:	0020      	movs	r0, r4
    2c4a:	4c06      	ldr	r4, [pc, #24]	; (2c64 <usb_d_cb_trans_setup+0x8c>)
    2c4c:	47a0      	blx	r4
		_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_SET);
    2c4e:	2101      	movs	r1, #1
    2c50:	0038      	movs	r0, r7
    2c52:	47a0      	blx	r4
    2c54:	e7da      	b.n	2c0c <usb_d_cb_trans_setup+0x34>
    2c56:	46c0      	nop			; (mov r8, r8)
    2c58:	000029f9 	.word	0x000029f9
    2c5c:	20000148 	.word	0x20000148
    2c60:	00004af1 	.word	0x00004af1
    2c64:	0000498d 	.word	0x0000498d

00002c68 <usb_d_init>:

int32_t usb_d_init(void)
{
    2c68:	b510      	push	{r4, lr}
	int32_t rc = _usb_d_dev_init();
    2c6a:	4b10      	ldr	r3, [pc, #64]	; (2cac <usb_d_init+0x44>)
    2c6c:	4798      	blx	r3
	uint8_t i;
	if (rc < 0) {
    2c6e:	2800      	cmp	r0, #0
    2c70:	db1b      	blt.n	2caa <usb_d_init+0x42>
		return rc;
	}
	memset(usb_d_inst.ep, 0x00, sizeof(struct usb_d_ep) * CONF_USB_D_NUM_EP_SP);
    2c72:	4c0f      	ldr	r4, [pc, #60]	; (2cb0 <usb_d_init+0x48>)
    2c74:	2280      	movs	r2, #128	; 0x80
    2c76:	2100      	movs	r1, #0
    2c78:	0020      	movs	r0, r4
    2c7a:	4b0e      	ldr	r3, [pc, #56]	; (2cb4 <usb_d_init+0x4c>)
    2c7c:	4798      	blx	r3
    2c7e:	0023      	movs	r3, r4
    2c80:	3480      	adds	r4, #128	; 0x80
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
		usb_d_inst.ep[i].xfer.hdr.ep    = 0xFF;
    2c82:	21ff      	movs	r1, #255	; 0xff
		usb_d_inst.ep[i].callbacks.req  = (usb_d_ep_cb_setup_t)usb_d_dummy_cb_false;
    2c84:	4a0c      	ldr	r2, [pc, #48]	; (2cb8 <usb_d_init+0x50>)
		usb_d_inst.ep[i].xfer.hdr.ep    = 0xFF;
    2c86:	7059      	strb	r1, [r3, #1]
		usb_d_inst.ep[i].callbacks.req  = (usb_d_ep_cb_setup_t)usb_d_dummy_cb_false;
    2c88:	615a      	str	r2, [r3, #20]
		usb_d_inst.ep[i].callbacks.more = (usb_d_ep_cb_more_t)usb_d_dummy_cb_false;
    2c8a:	619a      	str	r2, [r3, #24]
		usb_d_inst.ep[i].callbacks.xfer = (usb_d_ep_cb_xfer_t)usb_d_dummy_cb_false;
    2c8c:	61da      	str	r2, [r3, #28]
    2c8e:	3320      	adds	r3, #32
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    2c90:	42a3      	cmp	r3, r4
    2c92:	d1f8      	bne.n	2c86 <usb_d_init+0x1e>
	}
	/* Handles device driver endpoint callbacks to build transfer. */
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_SETUP, (FUNC_PTR)usb_d_cb_trans_setup);
    2c94:	4909      	ldr	r1, [pc, #36]	; (2cbc <usb_d_init+0x54>)
    2c96:	2000      	movs	r0, #0
    2c98:	4c09      	ldr	r4, [pc, #36]	; (2cc0 <usb_d_init+0x58>)
    2c9a:	47a0      	blx	r4
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_MORE, (FUNC_PTR)usb_d_cb_trans_more);
    2c9c:	4909      	ldr	r1, [pc, #36]	; (2cc4 <usb_d_init+0x5c>)
    2c9e:	2001      	movs	r0, #1
    2ca0:	47a0      	blx	r4
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_DONE, (FUNC_PTR)_usb_d_cb_trans_done);
    2ca2:	4909      	ldr	r1, [pc, #36]	; (2cc8 <usb_d_init+0x60>)
    2ca4:	2002      	movs	r0, #2
    2ca6:	47a0      	blx	r4
	return ERR_NONE;
    2ca8:	2000      	movs	r0, #0
}
    2caa:	bd10      	pop	{r4, pc}
    2cac:	0000437d 	.word	0x0000437d
    2cb0:	20000148 	.word	0x20000148
    2cb4:	000092f3 	.word	0x000092f3
    2cb8:	00002a3d 	.word	0x00002a3d
    2cbc:	00002bd9 	.word	0x00002bd9
    2cc0:	00004d99 	.word	0x00004d99
    2cc4:	00002a41 	.word	0x00002a41
    2cc8:	00002a79 	.word	0x00002a79

00002ccc <usb_d_register_callback>:
{
	_usb_d_dev_deinit();
}

void usb_d_register_callback(const enum usb_d_cb_type type, const FUNC_PTR func)
{
    2ccc:	b510      	push	{r4, lr}
	/* Directly uses device driver callback. */
	_usb_d_dev_register_callback(type, func);
    2cce:	4b01      	ldr	r3, [pc, #4]	; (2cd4 <usb_d_register_callback+0x8>)
    2cd0:	4798      	blx	r3
}
    2cd2:	bd10      	pop	{r4, pc}
    2cd4:	00004d75 	.word	0x00004d75

00002cd8 <usb_d_enable>:

int32_t usb_d_enable(void)
{
    2cd8:	b510      	push	{r4, lr}
	return _usb_d_dev_enable();
    2cda:	4b01      	ldr	r3, [pc, #4]	; (2ce0 <usb_d_enable+0x8>)
    2cdc:	4798      	blx	r3
}
    2cde:	bd10      	pop	{r4, pc}
    2ce0:	00004449 	.word	0x00004449

00002ce4 <usb_d_attach>:
{
	_usb_d_dev_disable();
}

void usb_d_attach(void)
{
    2ce4:	b510      	push	{r4, lr}
	_usb_d_dev_attach();
    2ce6:	4b01      	ldr	r3, [pc, #4]	; (2cec <usb_d_attach+0x8>)
    2ce8:	4798      	blx	r3
}
    2cea:	bd10      	pop	{r4, pc}
    2cec:	00004499 	.word	0x00004499

00002cf0 <usb_d_set_address>:
{
	return _usb_d_dev_get_uframe_n();
}

void usb_d_set_address(const uint8_t addr)
{
    2cf0:	b510      	push	{r4, lr}
	_usb_d_dev_set_address(addr);
    2cf2:	4b01      	ldr	r3, [pc, #4]	; (2cf8 <usb_d_set_address+0x8>)
    2cf4:	4798      	blx	r3
}
    2cf6:	bd10      	pop	{r4, pc}
    2cf8:	000044a9 	.word	0x000044a9

00002cfc <usb_d_ep_init>:
{
	return usb_d_ep_init(0, USB_EP_XTYPE_CTRL, max_pkt_size);
}

int32_t usb_d_ep_init(const uint8_t ep, const uint8_t attr, const uint16_t max_pkt_size)
{
    2cfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2cfe:	0005      	movs	r5, r0
    2d00:	000e      	movs	r6, r1
    2d02:	0017      	movs	r7, r2
	int32_t          rc;
	int8_t           ep_index = _usb_d_find_ep(ep);
    2d04:	4b0f      	ldr	r3, [pc, #60]	; (2d44 <usb_d_ep_init+0x48>)
    2d06:	4798      	blx	r3
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	if (ep_index >= 0) {
    2d08:	2800      	cmp	r0, #0
    2d0a:	da14      	bge.n	2d36 <usb_d_ep_init+0x3a>
		return -USB_ERR_REDO;
	} else {
		ep_index = _usb_d_find_ep(0xFF);
    2d0c:	20ff      	movs	r0, #255	; 0xff
    2d0e:	4b0d      	ldr	r3, [pc, #52]	; (2d44 <usb_d_ep_init+0x48>)
    2d10:	4798      	blx	r3
    2d12:	1e04      	subs	r4, r0, #0
		if (ep_index < 0) {
    2d14:	db12      	blt.n	2d3c <usb_d_ep_init+0x40>
			return -USB_ERR_ALLOC_FAIL;
		}
		ept = &usb_d_inst.ep[ep_index];
	}
	rc = _usb_d_dev_ep_init(ep, attr, max_pkt_size);
    2d16:	003a      	movs	r2, r7
    2d18:	0031      	movs	r1, r6
    2d1a:	0028      	movs	r0, r5
    2d1c:	4b0a      	ldr	r3, [pc, #40]	; (2d48 <usb_d_ep_init+0x4c>)
    2d1e:	4798      	blx	r3
	if (rc < 0) {
    2d20:	2800      	cmp	r0, #0
    2d22:	db07      	blt.n	2d34 <usb_d_ep_init+0x38>
		return rc;
	}
	ept->xfer.hdr.ep   = ep;
    2d24:	4a09      	ldr	r2, [pc, #36]	; (2d4c <usb_d_ep_init+0x50>)
    2d26:	0164      	lsls	r4, r4, #5
    2d28:	1913      	adds	r3, r2, r4
    2d2a:	705d      	strb	r5, [r3, #1]
	ept->xfer.hdr.type = attr & USB_EP_XTYPE_MASK;
    2d2c:	2303      	movs	r3, #3
    2d2e:	401e      	ands	r6, r3
    2d30:	54a6      	strb	r6, [r4, r2]
	return ERR_NONE;
    2d32:	2000      	movs	r0, #0
}
    2d34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -USB_ERR_REDO;
    2d36:	2014      	movs	r0, #20
    2d38:	4240      	negs	r0, r0
    2d3a:	e7fb      	b.n	2d34 <usb_d_ep_init+0x38>
			return -USB_ERR_ALLOC_FAIL;
    2d3c:	2015      	movs	r0, #21
    2d3e:	4240      	negs	r0, r0
    2d40:	e7f8      	b.n	2d34 <usb_d_ep_init+0x38>
    2d42:	46c0      	nop			; (mov r8, r8)
    2d44:	000029f9 	.word	0x000029f9
    2d48:	000044b9 	.word	0x000044b9
    2d4c:	20000148 	.word	0x20000148

00002d50 <usb_d_ep0_init>:
{
    2d50:	b510      	push	{r4, lr}
	return usb_d_ep_init(0, USB_EP_XTYPE_CTRL, max_pkt_size);
    2d52:	b282      	uxth	r2, r0
    2d54:	2100      	movs	r1, #0
    2d56:	2000      	movs	r0, #0
    2d58:	4b01      	ldr	r3, [pc, #4]	; (2d60 <usb_d_ep0_init+0x10>)
    2d5a:	4798      	blx	r3
}
    2d5c:	bd10      	pop	{r4, pc}
    2d5e:	46c0      	nop			; (mov r8, r8)
    2d60:	00002cfd 	.word	0x00002cfd

00002d64 <usb_d_ep_deinit>:

void usb_d_ep_deinit(const uint8_t ep)
{
    2d64:	b570      	push	{r4, r5, r6, lr}
    2d66:	0005      	movs	r5, r0
	int8_t           ep_index = _usb_d_find_ep(ep);
    2d68:	4b06      	ldr	r3, [pc, #24]	; (2d84 <usb_d_ep_deinit+0x20>)
    2d6a:	4798      	blx	r3
    2d6c:	1e04      	subs	r4, r0, #0
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	if (ep_index < 0) {
    2d6e:	db07      	blt.n	2d80 <usb_d_ep_deinit+0x1c>
		return;
	}
	_usb_d_dev_ep_deinit(ep);
    2d70:	0028      	movs	r0, r5
    2d72:	4b05      	ldr	r3, [pc, #20]	; (2d88 <usb_d_ep_deinit+0x24>)
    2d74:	4798      	blx	r3
	ept->xfer.hdr.ep = 0xFF;
    2d76:	0164      	lsls	r4, r4, #5
    2d78:	4b04      	ldr	r3, [pc, #16]	; (2d8c <usb_d_ep_deinit+0x28>)
    2d7a:	191c      	adds	r4, r3, r4
    2d7c:	23ff      	movs	r3, #255	; 0xff
    2d7e:	7063      	strb	r3, [r4, #1]
}
    2d80:	bd70      	pop	{r4, r5, r6, pc}
    2d82:	46c0      	nop			; (mov r8, r8)
    2d84:	000029f9 	.word	0x000029f9
    2d88:	000045e5 	.word	0x000045e5
    2d8c:	20000148 	.word	0x20000148

00002d90 <usb_d_ep_enable>:

int32_t usb_d_ep_enable(const uint8_t ep)
{
    2d90:	b570      	push	{r4, r5, r6, lr}
    2d92:	0004      	movs	r4, r0
	int8_t           ep_index = _usb_d_find_ep(ep);
    2d94:	4b0e      	ldr	r3, [pc, #56]	; (2dd0 <usb_d_ep_enable+0x40>)
    2d96:	4798      	blx	r3
    2d98:	1e05      	subs	r5, r0, #0
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	int32_t          rc;
	if (ep_index < 0) {
    2d9a:	db15      	blt.n	2dc8 <usb_d_ep_enable+0x38>
		return -USB_ERR_PARAM;
	}
	ept->xfer.hdr.state = (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) ? USB_EP_S_X_SETUP : USB_EP_S_IDLE;
    2d9c:	0143      	lsls	r3, r0, #5
    2d9e:	4a0d      	ldr	r2, [pc, #52]	; (2dd4 <usb_d_ep_enable+0x44>)
    2da0:	5c9b      	ldrb	r3, [r3, r2]
    2da2:	425a      	negs	r2, r3
    2da4:	4153      	adcs	r3, r2
    2da6:	3301      	adds	r3, #1
    2da8:	0141      	lsls	r1, r0, #5
    2daa:	4a0a      	ldr	r2, [pc, #40]	; (2dd4 <usb_d_ep_enable+0x44>)
    2dac:	1852      	adds	r2, r2, r1
    2dae:	7093      	strb	r3, [r2, #2]
	rc                  = _usb_d_dev_ep_enable(ep);
    2db0:	0020      	movs	r0, r4
    2db2:	4b09      	ldr	r3, [pc, #36]	; (2dd8 <usb_d_ep_enable+0x48>)
    2db4:	4798      	blx	r3
	if (rc < 0) {
    2db6:	2800      	cmp	r0, #0
    2db8:	db00      	blt.n	2dbc <usb_d_ep_enable+0x2c>
		ept->xfer.hdr.state = USB_EP_S_DISABLED;
	}
	return rc;
}
    2dba:	bd70      	pop	{r4, r5, r6, pc}
		ept->xfer.hdr.state = USB_EP_S_DISABLED;
    2dbc:	016d      	lsls	r5, r5, #5
    2dbe:	4b05      	ldr	r3, [pc, #20]	; (2dd4 <usb_d_ep_enable+0x44>)
    2dc0:	195d      	adds	r5, r3, r5
    2dc2:	2300      	movs	r3, #0
    2dc4:	70ab      	strb	r3, [r5, #2]
    2dc6:	e7f8      	b.n	2dba <usb_d_ep_enable+0x2a>
		return -USB_ERR_PARAM;
    2dc8:	2012      	movs	r0, #18
    2dca:	4240      	negs	r0, r0
    2dcc:	e7f5      	b.n	2dba <usb_d_ep_enable+0x2a>
    2dce:	46c0      	nop			; (mov r8, r8)
    2dd0:	000029f9 	.word	0x000029f9
    2dd4:	20000148 	.word	0x20000148
    2dd8:	000046b1 	.word	0x000046b1

00002ddc <usb_d_ep_transfer>:
	}
	return usb_d_inst.ep[ep_index].xfer.req;
}

int32_t usb_d_ep_transfer(const struct usb_d_transfer *xfer)
{
    2ddc:	b5f0      	push	{r4, r5, r6, r7, lr}
    2dde:	46d6      	mov	lr, sl
    2de0:	464f      	mov	r7, r9
    2de2:	4646      	mov	r6, r8
    2de4:	b5c0      	push	{r6, r7, lr}
    2de6:	b086      	sub	sp, #24
    2de8:	0004      	movs	r4, r0
	int8_t                ep_index = _usb_d_find_ep(xfer->ep);
    2dea:	7a07      	ldrb	r7, [r0, #8]
    2dec:	0038      	movs	r0, r7
    2dee:	4b40      	ldr	r3, [pc, #256]	; (2ef0 <usb_d_ep_transfer+0x114>)
    2df0:	4798      	blx	r3
    2df2:	0005      	movs	r5, r0
	struct usb_d_ep *     ept      = &usb_d_inst.ep[ep_index];
	bool                  dir = USB_EP_GET_DIR(xfer->ep), zlp = xfer->zlp;
    2df4:	7a66      	ldrb	r6, [r4, #9]
	uint32_t              len = xfer->size;
    2df6:	6863      	ldr	r3, [r4, #4]
    2df8:	4698      	mov	r8, r3
	int32_t               rc;
	volatile uint8_t      state;
	volatile hal_atomic_t flags;

	if (ep_index < 0) {
    2dfa:	2800      	cmp	r0, #0
    2dfc:	da00      	bge.n	2e00 <usb_d_ep_transfer+0x24>
    2dfe:	e071      	b.n	2ee4 <usb_d_ep_transfer+0x108>
		return -USB_ERR_PARAM;
	}

	atomic_enter_critical(&flags);
    2e00:	a804      	add	r0, sp, #16
    2e02:	4b3c      	ldr	r3, [pc, #240]	; (2ef4 <usb_d_ep_transfer+0x118>)
    2e04:	4798      	blx	r3
	state = ept->xfer.hdr.state;
    2e06:	016a      	lsls	r2, r5, #5
    2e08:	4b3b      	ldr	r3, [pc, #236]	; (2ef8 <usb_d_ep_transfer+0x11c>)
    2e0a:	189b      	adds	r3, r3, r2
    2e0c:	789a      	ldrb	r2, [r3, #2]
    2e0e:	2317      	movs	r3, #23
    2e10:	446b      	add	r3, sp
    2e12:	701a      	strb	r2, [r3, #0]
	if (state == USB_EP_S_IDLE) {
    2e14:	781b      	ldrb	r3, [r3, #0]
    2e16:	2b01      	cmp	r3, #1
    2e18:	d010      	beq.n	2e3c <usb_d_ep_transfer+0x60>
		ept->xfer.hdr.state = USB_EP_S_X_DATA;
		atomic_leave_critical(&flags);
	} else {
		atomic_leave_critical(&flags);
    2e1a:	a804      	add	r0, sp, #16
    2e1c:	4b37      	ldr	r3, [pc, #220]	; (2efc <usb_d_ep_transfer+0x120>)
    2e1e:	4798      	blx	r3
		switch (state) {
    2e20:	2317      	movs	r3, #23
    2e22:	446b      	add	r3, sp
    2e24:	781b      	ldrb	r3, [r3, #0]
    2e26:	b2db      	uxtb	r3, r3
    2e28:	2b05      	cmp	r3, #5
    2e2a:	d05e      	beq.n	2eea <usb_d_ep_transfer+0x10e>
    2e2c:	2b06      	cmp	r3, #6
    2e2e:	d023      	beq.n	2e78 <usb_d_ep_transfer+0x9c>
		case USB_EP_S_ERROR:
			return -USB_ERROR;
		case USB_EP_S_DISABLED:
			return -USB_ERR_FUNC;
		default: /* USB_EP_S_X_xxxx  */
			return USB_BUSY;
    2e30:	2001      	movs	r0, #1
		switch (state) {
    2e32:	2b00      	cmp	r3, #0
    2e34:	d13c      	bne.n	2eb0 <usb_d_ep_transfer+0xd4>
			return -USB_ERR_FUNC;
    2e36:	2013      	movs	r0, #19
    2e38:	4240      	negs	r0, r0
    2e3a:	e039      	b.n	2eb0 <usb_d_ep_transfer+0xd4>
		ept->xfer.hdr.state = USB_EP_S_X_DATA;
    2e3c:	4b2e      	ldr	r3, [pc, #184]	; (2ef8 <usb_d_ep_transfer+0x11c>)
    2e3e:	4699      	mov	r9, r3
    2e40:	016b      	lsls	r3, r5, #5
    2e42:	469a      	mov	sl, r3
    2e44:	464b      	mov	r3, r9
    2e46:	4453      	add	r3, sl
    2e48:	2203      	movs	r2, #3
    2e4a:	709a      	strb	r2, [r3, #2]
		atomic_leave_critical(&flags);
    2e4c:	a804      	add	r0, sp, #16
    2e4e:	4b2b      	ldr	r3, [pc, #172]	; (2efc <usb_d_ep_transfer+0x120>)
    2e50:	4798      	blx	r3
		}
	}

	if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    2e52:	464b      	mov	r3, r9
    2e54:	4652      	mov	r2, sl
    2e56:	5cd3      	ldrb	r3, [r2, r3]
    2e58:	2b00      	cmp	r3, #0
    2e5a:	d010      	beq.n	2e7e <usb_d_ep_transfer+0xa2>
				zlp = false;
			}
		}
	}

	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
    2e5c:	7a23      	ldrb	r3, [r4, #8]
	bool                  dir = USB_EP_GET_DIR(xfer->ep), zlp = xfer->zlp;
    2e5e:	1e72      	subs	r2, r6, #1
    2e60:	4196      	sbcs	r6, r2
	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
    2e62:	b2f6      	uxtb	r6, r6
	struct usb_d_transfer trans
    2e64:	6822      	ldr	r2, [r4, #0]
    2e66:	9201      	str	r2, [sp, #4]
    2e68:	4642      	mov	r2, r8
    2e6a:	9202      	str	r2, [sp, #8]
    2e6c:	b27f      	sxtb	r7, r7
    2e6e:	2f00      	cmp	r7, #0
    2e70:	db17      	blt.n	2ea2 <usb_d_ep_transfer+0xc6>
    2e72:	220f      	movs	r2, #15
    2e74:	4013      	ands	r3, r2
    2e76:	e016      	b.n	2ea6 <usb_d_ep_transfer+0xca>
			return -USB_ERROR;
    2e78:	2010      	movs	r0, #16
    2e7a:	4240      	negs	r0, r0
    2e7c:	e018      	b.n	2eb0 <usb_d_ep_transfer+0xd4>
		uint16_t req_len = USB_GET_wLength(ept->xfer.req);
    2e7e:	016b      	lsls	r3, r5, #5
    2e80:	4a1d      	ldr	r2, [pc, #116]	; (2ef8 <usb_d_ep_transfer+0x11c>)
    2e82:	18d2      	adds	r2, r2, r3
    2e84:	7cd1      	ldrb	r1, [r2, #19]
    2e86:	0209      	lsls	r1, r1, #8
    2e88:	7c93      	ldrb	r3, [r2, #18]
    2e8a:	185b      	adds	r3, r3, r1
    2e8c:	b29b      	uxth	r3, r3
		if (req_len == 0) {
    2e8e:	2b00      	cmp	r3, #0
    2e90:	d114      	bne.n	2ebc <usb_d_ep_transfer+0xe0>
			ept->xfer.hdr.state = USB_EP_S_X_STATUS;
    2e92:	2304      	movs	r3, #4
    2e94:	7093      	strb	r3, [r2, #2]
			len                 = 0;
    2e96:	2200      	movs	r2, #0
			zlp                 = true;
    2e98:	2601      	movs	r6, #1
	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
    2e9a:	7a23      	ldrb	r3, [r4, #8]
	struct usb_d_transfer trans
    2e9c:	6821      	ldr	r1, [r4, #0]
    2e9e:	9101      	str	r1, [sp, #4]
    2ea0:	9202      	str	r2, [sp, #8]
    2ea2:	2280      	movs	r2, #128	; 0x80
    2ea4:	4313      	orrs	r3, r2
    2ea6:	a801      	add	r0, sp, #4
    2ea8:	7203      	strb	r3, [r0, #8]
    2eaa:	7246      	strb	r6, [r0, #9]
	return _usb_d_dev_ep_trans(&trans);
    2eac:	4b14      	ldr	r3, [pc, #80]	; (2f00 <usb_d_ep_transfer+0x124>)
    2eae:	4798      	blx	r3
	return rc;
}
    2eb0:	b006      	add	sp, #24
    2eb2:	bc1c      	pop	{r2, r3, r4}
    2eb4:	4690      	mov	r8, r2
    2eb6:	4699      	mov	r9, r3
    2eb8:	46a2      	mov	sl, r4
    2eba:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2ebc:	4642      	mov	r2, r8
    2ebe:	429a      	cmp	r2, r3
    2ec0:	d900      	bls.n	2ec4 <usb_d_ep_transfer+0xe8>
    2ec2:	001a      	movs	r2, r3
			dir = (USB_GET_bmRequestType(ept->xfer.req) & USB_REQ_TYPE_IN);
    2ec4:	016d      	lsls	r5, r5, #5
    2ec6:	490c      	ldr	r1, [pc, #48]	; (2ef8 <usb_d_ep_transfer+0x11c>)
    2ec8:	194d      	adds	r5, r1, r5
			if (dir) {
    2eca:	7b29      	ldrb	r1, [r5, #12]
    2ecc:	297f      	cmp	r1, #127	; 0x7f
    2ece:	d805      	bhi.n	2edc <usb_d_ep_transfer+0x100>
	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
    2ed0:	7a23      	ldrb	r3, [r4, #8]
	struct usb_d_transfer trans
    2ed2:	6821      	ldr	r1, [r4, #0]
    2ed4:	9101      	str	r1, [sp, #4]
    2ed6:	9202      	str	r2, [sp, #8]
	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
    2ed8:	2600      	movs	r6, #0
    2eda:	e7ca      	b.n	2e72 <usb_d_ep_transfer+0x96>
				zlp = (req_len > len);
    2edc:	429a      	cmp	r2, r3
    2ede:	41b6      	sbcs	r6, r6
    2ee0:	4276      	negs	r6, r6
    2ee2:	e7da      	b.n	2e9a <usb_d_ep_transfer+0xbe>
		return -USB_ERR_PARAM;
    2ee4:	2012      	movs	r0, #18
    2ee6:	4240      	negs	r0, r0
    2ee8:	e7e2      	b.n	2eb0 <usb_d_ep_transfer+0xd4>
			return USB_HALTED;
    2eea:	2002      	movs	r0, #2
    2eec:	e7e0      	b.n	2eb0 <usb_d_ep_transfer+0xd4>
    2eee:	46c0      	nop			; (mov r8, r8)
    2ef0:	000029f9 	.word	0x000029f9
    2ef4:	00002731 	.word	0x00002731
    2ef8:	20000148 	.word	0x20000148
    2efc:	0000273f 	.word	0x0000273f
    2f00:	00004b61 	.word	0x00004b61

00002f04 <usb_d_ep_halt>:
	}
	return ERR_NONE;
}

int32_t usb_d_ep_halt(const uint8_t ep, const enum usb_ep_halt_ctrl ctrl)
{
    2f04:	b570      	push	{r4, r5, r6, lr}
    2f06:	0004      	movs	r4, r0
	if (ctrl == USB_EP_HALT_CLR) {
    2f08:	2900      	cmp	r1, #0
    2f0a:	d005      	beq.n	2f18 <usb_d_ep_halt+0x14>
		return _usb_d_ep_halt_clr(ep);
	} else if (ctrl == USB_EP_HALT_SET) {
    2f0c:	2901      	cmp	r1, #1
    2f0e:	d021      	beq.n	2f54 <usb_d_ep_halt+0x50>
		return _usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
	} else {
		return _usb_d_dev_ep_stall(ep, USB_EP_STALL_GET);
    2f10:	2102      	movs	r1, #2
    2f12:	4b13      	ldr	r3, [pc, #76]	; (2f60 <usb_d_ep_halt+0x5c>)
    2f14:	4798      	blx	r3
	}
}
    2f16:	bd70      	pop	{r4, r5, r6, pc}
	int8_t           ep_index = _usb_d_find_ep(ep);
    2f18:	4b12      	ldr	r3, [pc, #72]	; (2f64 <usb_d_ep_halt+0x60>)
    2f1a:	4798      	blx	r3
    2f1c:	1e05      	subs	r5, r0, #0
	if (ep_index < 0) {
    2f1e:	db1c      	blt.n	2f5a <usb_d_ep_halt+0x56>
	if (_usb_d_dev_ep_stall(ep, USB_EP_STALL_GET)) {
    2f20:	2102      	movs	r1, #2
    2f22:	0020      	movs	r0, r4
    2f24:	4b0e      	ldr	r3, [pc, #56]	; (2f60 <usb_d_ep_halt+0x5c>)
    2f26:	4798      	blx	r3
    2f28:	2800      	cmp	r0, #0
    2f2a:	d0f4      	beq.n	2f16 <usb_d_ep_halt+0x12>
		rc = _usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    2f2c:	2100      	movs	r1, #0
    2f2e:	0020      	movs	r0, r4
    2f30:	4b0b      	ldr	r3, [pc, #44]	; (2f60 <usb_d_ep_halt+0x5c>)
    2f32:	4798      	blx	r3
		if (rc < 0) {
    2f34:	2800      	cmp	r0, #0
    2f36:	dbee      	blt.n	2f16 <usb_d_ep_halt+0x12>
		ept->xfer.hdr.state  = USB_EP_S_IDLE;
    2f38:	016d      	lsls	r5, r5, #5
    2f3a:	4b0b      	ldr	r3, [pc, #44]	; (2f68 <usb_d_ep_halt+0x64>)
    2f3c:	195d      	adds	r5, r3, r5
    2f3e:	2301      	movs	r3, #1
    2f40:	70ab      	strb	r3, [r5, #2]
		ept->xfer.hdr.status = USB_XFER_UNHALT;
    2f42:	3302      	adds	r3, #2
    2f44:	70eb      	strb	r3, [r5, #3]
		ept->callbacks.xfer(ep, USB_XFER_UNHALT, NULL);
    2f46:	69eb      	ldr	r3, [r5, #28]
    2f48:	2200      	movs	r2, #0
    2f4a:	2103      	movs	r1, #3
    2f4c:	0020      	movs	r0, r4
    2f4e:	4798      	blx	r3
	return ERR_NONE;
    2f50:	2000      	movs	r0, #0
    2f52:	e7e0      	b.n	2f16 <usb_d_ep_halt+0x12>
		return _usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
    2f54:	4b02      	ldr	r3, [pc, #8]	; (2f60 <usb_d_ep_halt+0x5c>)
    2f56:	4798      	blx	r3
    2f58:	e7dd      	b.n	2f16 <usb_d_ep_halt+0x12>
		return -USB_ERR_PARAM;
    2f5a:	2012      	movs	r0, #18
    2f5c:	4240      	negs	r0, r0
    2f5e:	e7da      	b.n	2f16 <usb_d_ep_halt+0x12>
    2f60:	0000498d 	.word	0x0000498d
    2f64:	000029f9 	.word	0x000029f9
    2f68:	20000148 	.word	0x20000148

00002f6c <usb_d_ep_register_callback>:

void usb_d_ep_register_callback(const uint8_t ep, const enum usb_d_ep_cb_type type, const FUNC_PTR func)
{
    2f6c:	b570      	push	{r4, r5, r6, lr}
    2f6e:	000d      	movs	r5, r1
    2f70:	0014      	movs	r4, r2
	int8_t           ep_index = _usb_d_find_ep(ep);
    2f72:	4b0f      	ldr	r3, [pc, #60]	; (2fb0 <usb_d_ep_register_callback+0x44>)
    2f74:	4798      	blx	r3
    2f76:	0003      	movs	r3, r0
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	FUNC_PTR         f        = func ? (FUNC_PTR)func : (FUNC_PTR)usb_d_dummy_cb_false;
    2f78:	1e22      	subs	r2, r4, #0
    2f7a:	d008      	beq.n	2f8e <usb_d_ep_register_callback+0x22>
	if (ep_index < 0) {
    2f7c:	2b00      	cmp	r3, #0
    2f7e:	db05      	blt.n	2f8c <usb_d_ep_register_callback+0x20>
		return;
	}
	switch (type) {
    2f80:	2d01      	cmp	r5, #1
    2f82:	d00b      	beq.n	2f9c <usb_d_ep_register_callback+0x30>
    2f84:	2d00      	cmp	r5, #0
    2f86:	d004      	beq.n	2f92 <usb_d_ep_register_callback+0x26>
    2f88:	2d02      	cmp	r5, #2
    2f8a:	d00c      	beq.n	2fa6 <usb_d_ep_register_callback+0x3a>
		ept->callbacks.xfer = (usb_d_ep_cb_xfer_t)f;
		break;
	default:
		break;
	}
}
    2f8c:	bd70      	pop	{r4, r5, r6, pc}
	FUNC_PTR         f        = func ? (FUNC_PTR)func : (FUNC_PTR)usb_d_dummy_cb_false;
    2f8e:	4a09      	ldr	r2, [pc, #36]	; (2fb4 <usb_d_ep_register_callback+0x48>)
    2f90:	e7f4      	b.n	2f7c <usb_d_ep_register_callback+0x10>
		ept->callbacks.req = (usb_d_ep_cb_setup_t)f;
    2f92:	0140      	lsls	r0, r0, #5
    2f94:	4b08      	ldr	r3, [pc, #32]	; (2fb8 <usb_d_ep_register_callback+0x4c>)
    2f96:	1818      	adds	r0, r3, r0
    2f98:	6142      	str	r2, [r0, #20]
		break;
    2f9a:	e7f7      	b.n	2f8c <usb_d_ep_register_callback+0x20>
		ept->callbacks.more = (usb_d_ep_cb_more_t)f;
    2f9c:	0140      	lsls	r0, r0, #5
    2f9e:	4b06      	ldr	r3, [pc, #24]	; (2fb8 <usb_d_ep_register_callback+0x4c>)
    2fa0:	1818      	adds	r0, r3, r0
    2fa2:	6182      	str	r2, [r0, #24]
		break;
    2fa4:	e7f2      	b.n	2f8c <usb_d_ep_register_callback+0x20>
		ept->callbacks.xfer = (usb_d_ep_cb_xfer_t)f;
    2fa6:	0140      	lsls	r0, r0, #5
    2fa8:	4b03      	ldr	r3, [pc, #12]	; (2fb8 <usb_d_ep_register_callback+0x4c>)
    2faa:	1818      	adds	r0, r3, r0
    2fac:	61c2      	str	r2, [r0, #28]
		break;
    2fae:	e7ed      	b.n	2f8c <usb_d_ep_register_callback+0x20>
    2fb0:	000029f9 	.word	0x000029f9
    2fb4:	00002a3d 	.word	0x00002a3d
    2fb8:	20000148 	.word	0x20000148

00002fbc <assert>:
/**
 * \brief Assert function
 */
void assert(const bool condition, const char *const file, const int line)
{
	if (!(condition)) {
    2fbc:	2800      	cmp	r0, #0
    2fbe:	d100      	bne.n	2fc2 <assert+0x6>
		__asm("BKPT #0");
    2fc0:	be00      	bkpt	0x0000
	}
	(void)file;
	(void)line;
}
    2fc2:	4770      	bx	lr

00002fc4 <is_list_element>:
 * \brief Check whether element belongs to list
 */
bool is_list_element(const struct list_descriptor *const list, const void *const element)
{
	struct list_element *it;
	for (it = list->head; it; it = it->next) {
    2fc4:	6803      	ldr	r3, [r0, #0]
    2fc6:	2b00      	cmp	r3, #0
    2fc8:	d00a      	beq.n	2fe0 <is_list_element+0x1c>
		if (it == element) {
    2fca:	428b      	cmp	r3, r1
    2fcc:	d00a      	beq.n	2fe4 <is_list_element+0x20>
	for (it = list->head; it; it = it->next) {
    2fce:	681b      	ldr	r3, [r3, #0]
    2fd0:	2b00      	cmp	r3, #0
    2fd2:	d003      	beq.n	2fdc <is_list_element+0x18>
		if (it == element) {
    2fd4:	4299      	cmp	r1, r3
    2fd6:	d1fa      	bne.n	2fce <is_list_element+0xa>
			return true;
    2fd8:	2001      	movs	r0, #1
    2fda:	e000      	b.n	2fde <is_list_element+0x1a>
		}
	}

	return false;
    2fdc:	2000      	movs	r0, #0
}
    2fde:	4770      	bx	lr
	return false;
    2fe0:	2000      	movs	r0, #0
    2fe2:	e7fc      	b.n	2fde <is_list_element+0x1a>
			return true;
    2fe4:	2001      	movs	r0, #1
    2fe6:	e7fa      	b.n	2fde <is_list_element+0x1a>

00002fe8 <list_insert_at_end>:

/**
 * \brief Insert an element at list end
 */
void list_insert_at_end(struct list_descriptor *const list, void *const element)
{
    2fe8:	b570      	push	{r4, r5, r6, lr}
    2fea:	0005      	movs	r5, r0
    2fec:	000e      	movs	r6, r1
	struct list_element *it = list->head;
    2fee:	6804      	ldr	r4, [r0, #0]

	ASSERT(!is_list_element(list, element));
    2ff0:	4b0a      	ldr	r3, [pc, #40]	; (301c <list_insert_at_end+0x34>)
    2ff2:	4798      	blx	r3
    2ff4:	2301      	movs	r3, #1
    2ff6:	4058      	eors	r0, r3
    2ff8:	b2c0      	uxtb	r0, r0
    2ffa:	2259      	movs	r2, #89	; 0x59
    2ffc:	4908      	ldr	r1, [pc, #32]	; (3020 <list_insert_at_end+0x38>)
    2ffe:	4b09      	ldr	r3, [pc, #36]	; (3024 <list_insert_at_end+0x3c>)
    3000:	4798      	blx	r3

	if (!list->head) {
    3002:	682b      	ldr	r3, [r5, #0]
    3004:	2b00      	cmp	r3, #0
    3006:	d103      	bne.n	3010 <list_insert_at_end+0x28>
		list->head                             = (struct list_element *)element;
    3008:	602e      	str	r6, [r5, #0]
		((struct list_element *)element)->next = NULL;
    300a:	6033      	str	r3, [r6, #0]
		return;
    300c:	e005      	b.n	301a <list_insert_at_end+0x32>
	}

	while (it->next) {
		it = it->next;
    300e:	001c      	movs	r4, r3
	while (it->next) {
    3010:	6823      	ldr	r3, [r4, #0]
    3012:	2b00      	cmp	r3, #0
    3014:	d1fb      	bne.n	300e <list_insert_at_end+0x26>
	}
	it->next                               = (struct list_element *)element;
    3016:	6026      	str	r6, [r4, #0]
	((struct list_element *)element)->next = NULL;
    3018:	6033      	str	r3, [r6, #0]
}
    301a:	bd70      	pop	{r4, r5, r6, pc}
    301c:	00002fc5 	.word	0x00002fc5
    3020:	00009bb8 	.word	0x00009bb8
    3024:	00002fbd 	.word	0x00002fbd

00003028 <_sbrk>:

/**
 * \brief Replacement of C library of _sbrk
 */
extern caddr_t _sbrk(int incr)
{
    3028:	0003      	movs	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *       prev_heap;

	if (heap == NULL) {
    302a:	4a06      	ldr	r2, [pc, #24]	; (3044 <_sbrk+0x1c>)
    302c:	6812      	ldr	r2, [r2, #0]
    302e:	2a00      	cmp	r2, #0
    3030:	d004      	beq.n	303c <_sbrk+0x14>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
    3032:	4a04      	ldr	r2, [pc, #16]	; (3044 <_sbrk+0x1c>)
    3034:	6810      	ldr	r0, [r2, #0]

	heap += incr;
    3036:	18c3      	adds	r3, r0, r3
    3038:	6013      	str	r3, [r2, #0]

	return (caddr_t)prev_heap;
}
    303a:	4770      	bx	lr
		heap = (unsigned char *)&_end;
    303c:	4902      	ldr	r1, [pc, #8]	; (3048 <_sbrk+0x20>)
    303e:	4a01      	ldr	r2, [pc, #4]	; (3044 <_sbrk+0x1c>)
    3040:	6011      	str	r1, [r2, #0]
    3042:	e7f6      	b.n	3032 <_sbrk+0xa>
    3044:	200001c8 	.word	0x200001c8
    3048:	20002550 	.word	0x20002550

0000304c <_adc_get_regs>:
		}
	}

	ASSERT(false);
	return 0;
}
    304c:	2000      	movs	r0, #0
    304e:	4770      	bx	lr

00003050 <_adc_init>:
 *
 * \param[in] hw The pointer to hardware instance
 * \param[in] i  The number of hardware instance
 */
static int32_t _adc_init(void *const hw, const uint8_t i)
{
    3050:	b570      	push	{r4, r5, r6, lr}
    3052:	0004      	movs	r4, r0
    3054:	000d      	movs	r5, r1
	ASSERT(hw == ADC);
    3056:	4b31      	ldr	r3, [pc, #196]	; (311c <_adc_init+0xcc>)
    3058:	18c0      	adds	r0, r0, r3
    305a:	4243      	negs	r3, r0
    305c:	4158      	adcs	r0, r3
    305e:	b2c0      	uxtb	r0, r0
    3060:	229e      	movs	r2, #158	; 0x9e
    3062:	492f      	ldr	r1, [pc, #188]	; (3120 <_adc_init+0xd0>)
    3064:	4b2f      	ldr	r3, [pc, #188]	; (3124 <_adc_init+0xd4>)
    3066:	4798      	blx	r3
typedef uint8_t  hri_adc_swtrig_reg_t;
typedef uint8_t  hri_adc_winctrl_reg_t;

static inline void hri_adc_wait_for_sync(const void *const hw)
{
	while (((const Adc *)hw)->STATUS.bit.SYNCBUSY)
    3068:	7e63      	ldrb	r3, [r4, #25]
    306a:	09db      	lsrs	r3, r3, #7
    306c:	d1fc      	bne.n	3068 <_adc_init+0x18>
}

static inline bool hri_adc_get_CTRLA_ENABLE_bit(const void *const hw)
{
	uint8_t tmp;
	tmp = ((Adc *)hw)->CTRLA.reg;
    306e:	7823      	ldrb	r3, [r4, #0]

	hri_adc_wait_for_sync(hw);
	if (hri_adc_get_CTRLA_ENABLE_bit(hw)) {
    3070:	079b      	lsls	r3, r3, #30
    3072:	d450      	bmi.n	3116 <_adc_init+0xc6>
	((Adc *)hw)->CTRLA.reg |= ADC_CTRLA_SWRST;
    3074:	7823      	ldrb	r3, [r4, #0]
    3076:	2201      	movs	r2, #1
    3078:	4313      	orrs	r3, r2
    307a:	7023      	strb	r3, [r4, #0]
	while (((const Adc *)hw)->STATUS.bit.SYNCBUSY)
    307c:	7e63      	ldrb	r3, [r4, #25]
    307e:	09db      	lsrs	r3, r3, #7
    3080:	d1fc      	bne.n	307c <_adc_init+0x2c>
		return ERR_DENIED;
	}
	hri_adc_set_CTRLA_SWRST_bit(hw);
	hri_adc_wait_for_sync(hw);

	hri_adc_write_REFCTRL_reg(hw, _adcs[i].ref_ctrl);
    3082:	00ea      	lsls	r2, r5, #3
    3084:	1b52      	subs	r2, r2, r5
    3086:	0092      	lsls	r2, r2, #2
    3088:	4b27      	ldr	r3, [pc, #156]	; (3128 <_adc_init+0xd8>)
    308a:	189b      	adds	r3, r3, r2
    308c:	789a      	ldrb	r2, [r3, #2]
}

static inline void hri_adc_write_REFCTRL_reg(const void *const hw, hri_adc_refctrl_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->REFCTRL.reg = data;
    308e:	7062      	strb	r2, [r4, #1]
	hri_adc_write_AVGCTRL_reg(hw, _adcs[i].avg_ctrl);
    3090:	78da      	ldrb	r2, [r3, #3]
}

static inline void hri_adc_write_AVGCTRL_reg(const void *const hw, hri_adc_avgctrl_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->AVGCTRL.reg = data;
    3092:	70a2      	strb	r2, [r4, #2]
	hri_adc_write_SAMPCTRL_reg(hw, _adcs[i].samp_ctrl);
    3094:	791a      	ldrb	r2, [r3, #4]
}

static inline void hri_adc_write_SAMPCTRL_reg(const void *const hw, hri_adc_sampctrl_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->SAMPCTRL.reg = data;
    3096:	70e2      	strb	r2, [r4, #3]
	hri_adc_write_EVCTRL_reg(hw, _adcs[i].ev_ctrl);
    3098:	7c1a      	ldrb	r2, [r3, #16]
}

static inline void hri_adc_write_EVCTRL_reg(const void *const hw, hri_adc_evctrl_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->EVCTRL.reg = data;
    309a:	7522      	strb	r2, [r4, #20]
	hri_adc_write_GAINCORR_reg(hw, _adcs[i].gain_corr);
    309c:	8ada      	ldrh	r2, [r3, #22]
}

static inline void hri_adc_write_GAINCORR_reg(const void *const hw, hri_adc_gaincorr_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->GAINCORR.reg = data;
    309e:	84a2      	strh	r2, [r4, #36]	; 0x24
	hri_adc_write_OFFSETCORR_reg(hw, _adcs[i].offset_corr);
    30a0:	8b1a      	ldrh	r2, [r3, #24]
}

static inline void hri_adc_write_OFFSETCORR_reg(const void *const hw, hri_adc_offsetcorr_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->OFFSETCORR.reg = data;
    30a2:	84e2      	strh	r2, [r4, #38]	; 0x26
	hri_adc_write_DBGCTRL_reg(hw, _adcs[i].dbg_ctrl);
    30a4:	7e99      	ldrb	r1, [r3, #26]
}

static inline void hri_adc_write_DBGCTRL_reg(const void *const hw, hri_adc_dbgctrl_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->DBGCTRL.reg = data;
    30a6:	222a      	movs	r2, #42	; 0x2a
    30a8:	54a1      	strb	r1, [r4, r2]
	hri_adc_write_CTRLB_reg(hw, _adcs[i].ctrl_b);
    30aa:	88da      	ldrh	r2, [r3, #6]
	while (((const Adc *)hw)->STATUS.bit.SYNCBUSY)
    30ac:	7e63      	ldrb	r3, [r4, #25]
    30ae:	09db      	lsrs	r3, r3, #7
    30b0:	d1fc      	bne.n	30ac <_adc_init+0x5c>
	((Adc *)hw)->CTRLB.reg = data;
    30b2:	80a2      	strh	r2, [r4, #4]
	hri_adc_write_INPUTCTRL_reg(hw, _adcs[i].input_ctrl);
    30b4:	00eb      	lsls	r3, r5, #3
    30b6:	1b5b      	subs	r3, r3, r5
    30b8:	009b      	lsls	r3, r3, #2
    30ba:	4a1b      	ldr	r2, [pc, #108]	; (3128 <_adc_init+0xd8>)
    30bc:	18d3      	adds	r3, r2, r3
    30be:	68da      	ldr	r2, [r3, #12]
	while (((const Adc *)hw)->STATUS.bit.SYNCBUSY)
    30c0:	7e63      	ldrb	r3, [r4, #25]
    30c2:	09db      	lsrs	r3, r3, #7
    30c4:	d1fc      	bne.n	30c0 <_adc_init+0x70>
	((Adc *)hw)->INPUTCTRL.reg = data;
    30c6:	6122      	str	r2, [r4, #16]
	hri_adc_write_WINCTRL_reg(hw, _adcs[i].win_ctrl);
    30c8:	00eb      	lsls	r3, r5, #3
    30ca:	1b5b      	subs	r3, r3, r5
    30cc:	009b      	lsls	r3, r3, #2
    30ce:	4a16      	ldr	r2, [pc, #88]	; (3128 <_adc_init+0xd8>)
    30d0:	18d3      	adds	r3, r2, r3
    30d2:	7a1a      	ldrb	r2, [r3, #8]
	while (((const Adc *)hw)->STATUS.bit.SYNCBUSY)
    30d4:	7e63      	ldrb	r3, [r4, #25]
    30d6:	09db      	lsrs	r3, r3, #7
    30d8:	d1fc      	bne.n	30d4 <_adc_init+0x84>
	((Adc *)hw)->WINCTRL.reg = data;
    30da:	7222      	strb	r2, [r4, #8]
	hri_adc_write_WINLT_reg(hw, _adcs[i].win_lt);
    30dc:	00eb      	lsls	r3, r5, #3
    30de:	1b5b      	subs	r3, r3, r5
    30e0:	009b      	lsls	r3, r3, #2
    30e2:	4a11      	ldr	r2, [pc, #68]	; (3128 <_adc_init+0xd8>)
    30e4:	18d3      	adds	r3, r2, r3
    30e6:	8a5a      	ldrh	r2, [r3, #18]
	while (((const Adc *)hw)->STATUS.bit.SYNCBUSY)
    30e8:	7e63      	ldrb	r3, [r4, #25]
    30ea:	09db      	lsrs	r3, r3, #7
    30ec:	d1fc      	bne.n	30e8 <_adc_init+0x98>
	((Adc *)hw)->WINLT.reg = data;
    30ee:	83a2      	strh	r2, [r4, #28]
	hri_adc_write_WINUT_reg(hw, _adcs[i].win_ut);
    30f0:	00eb      	lsls	r3, r5, #3
    30f2:	1b5b      	subs	r3, r3, r5
    30f4:	009b      	lsls	r3, r3, #2
    30f6:	4a0c      	ldr	r2, [pc, #48]	; (3128 <_adc_init+0xd8>)
    30f8:	18d3      	adds	r3, r2, r3
    30fa:	8a9a      	ldrh	r2, [r3, #20]
	while (((const Adc *)hw)->STATUS.bit.SYNCBUSY)
    30fc:	7e63      	ldrb	r3, [r4, #25]
    30fe:	09db      	lsrs	r3, r3, #7
    3100:	d1fc      	bne.n	30fc <_adc_init+0xac>
	((Adc *)hw)->WINUT.reg = data;
    3102:	8422      	strh	r2, [r4, #32]
	hri_adc_write_CTRLA_reg(hw, _adcs[i].ctrl_a);
    3104:	00eb      	lsls	r3, r5, #3
    3106:	1b5d      	subs	r5, r3, r5
    3108:	00ad      	lsls	r5, r5, #2
    310a:	4b07      	ldr	r3, [pc, #28]	; (3128 <_adc_init+0xd8>)
    310c:	195d      	adds	r5, r3, r5
    310e:	786b      	ldrb	r3, [r5, #1]
	((Adc *)hw)->CTRLA.reg = data;
    3110:	7023      	strb	r3, [r4, #0]

	return ERR_NONE;
    3112:	2000      	movs	r0, #0
}
    3114:	bd70      	pop	{r4, r5, r6, pc}
		return ERR_DENIED;
    3116:	2011      	movs	r0, #17
    3118:	4240      	negs	r0, r0
    311a:	e7fb      	b.n	3114 <_adc_init+0xc4>
    311c:	bdffc000 	.word	0xbdffc000
    3120:	00009bf4 	.word	0x00009bf4
    3124:	00002fbd 	.word	0x00002fbd
    3128:	00009bd8 	.word	0x00009bd8

0000312c <_adc_sync_init>:

/**
 * \brief Initialize ADC
 */
int32_t _adc_sync_init(struct _adc_sync_device *const device, void *const hw)
{
    312c:	b570      	push	{r4, r5, r6, lr}
    312e:	0005      	movs	r5, r0
    3130:	000c      	movs	r4, r1
	ASSERT(device);
    3132:	1e43      	subs	r3, r0, #1
    3134:	4198      	sbcs	r0, r3
    3136:	b2c0      	uxtb	r0, r0
    3138:	22c8      	movs	r2, #200	; 0xc8
    313a:	4906      	ldr	r1, [pc, #24]	; (3154 <_adc_sync_init+0x28>)
    313c:	4b06      	ldr	r3, [pc, #24]	; (3158 <_adc_sync_init+0x2c>)
    313e:	4798      	blx	r3

	device->hw = hw;
    3140:	602c      	str	r4, [r5, #0]

	return _adc_init(hw, _adc_get_regs((uint32_t)hw));
    3142:	0020      	movs	r0, r4
    3144:	4b05      	ldr	r3, [pc, #20]	; (315c <_adc_sync_init+0x30>)
    3146:	4798      	blx	r3
    3148:	0001      	movs	r1, r0
    314a:	0020      	movs	r0, r4
    314c:	4b04      	ldr	r3, [pc, #16]	; (3160 <_adc_sync_init+0x34>)
    314e:	4798      	blx	r3
}
    3150:	bd70      	pop	{r4, r5, r6, pc}
    3152:	46c0      	nop			; (mov r8, r8)
    3154:	00009bf4 	.word	0x00009bf4
    3158:	00002fbd 	.word	0x00002fbd
    315c:	0000304d 	.word	0x0000304d
    3160:	00003051 	.word	0x00003051

00003164 <_get_cycles_for_ms>:
{
	switch (power) {
	case 8:
		return (ms * (freq / 100000)) * 100;
	case 7:
		return (ms * (freq / 10000)) * 10;
    3164:	23fa      	movs	r3, #250	; 0xfa
    3166:	015b      	lsls	r3, r3, #5
    3168:	4358      	muls	r0, r3
 * \brief Retrieve the amount of cycles to delay for the given amount of ms
 */
uint32_t _get_cycles_for_ms(const uint16_t ms)
{
	return _get_cycles_for_ms_internal(ms, CONF_CPU_FREQUENCY, CPU_FREQ_POWER);
}
    316a:	4770      	bx	lr

0000316c <_init_chip>:

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
    316c:	b510      	push	{r4, lr}
}

static inline void hri_nvmctrl_set_CTRLB_RWS_bf(const void *const hw, hri_nvmctrl_ctrlb_reg_t mask)
{
	NVMCTRL_CRITICAL_SECTION_ENTER();
	((Nvmctrl *)hw)->CTRLB.reg |= NVMCTRL_CTRLB_RWS(mask);
    316e:	4b08      	ldr	r3, [pc, #32]	; (3190 <_init_chip+0x24>)
    3170:	685a      	ldr	r2, [r3, #4]
    3172:	605a      	str	r2, [r3, #4]
	hri_nvmctrl_set_CTRLB_RWS_bf(NVMCTRL, CONF_NVM_WAIT_STATE);

	_pm_init();
    3174:	4b07      	ldr	r3, [pc, #28]	; (3194 <_init_chip+0x28>)
    3176:	4798      	blx	r3
	_sysctrl_init_sources();
    3178:	4b07      	ldr	r3, [pc, #28]	; (3198 <_init_chip+0x2c>)
    317a:	4798      	blx	r3
#if _GCLK_INIT_1ST
	_gclk_init_generators_by_fref(_GCLK_INIT_1ST);
    317c:	2008      	movs	r0, #8
    317e:	4c07      	ldr	r4, [pc, #28]	; (319c <_init_chip+0x30>)
    3180:	47a0      	blx	r4
#endif
	_sysctrl_init_referenced_generators();
    3182:	4b07      	ldr	r3, [pc, #28]	; (31a0 <_init_chip+0x34>)
    3184:	4798      	blx	r3
	_gclk_init_generators_by_fref(_GCLK_INIT_LAST);
    3186:	2009      	movs	r0, #9
    3188:	4240      	negs	r0, r0
    318a:	47a0      	blx	r4
#if CONF_DMAC_ENABLE
	_pm_enable_bus_clock(PM_BUS_AHB, DMAC);
	_pm_enable_bus_clock(PM_BUS_APBB, DMAC);
	_dma_init();
#endif
}
    318c:	bd10      	pop	{r4, pc}
    318e:	46c0      	nop			; (mov r8, r8)
    3190:	41004000 	.word	0x41004000
    3194:	0000322d 	.word	0x0000322d
    3198:	00003bbd 	.word	0x00003bbd
    319c:	000031ad 	.word	0x000031ad
    31a0:	00003c1d 	.word	0x00003c1d

000031a4 <_crc_sync_init>:
/**
 * \brief Initialize CRC.
 */
int32_t _crc_sync_init(struct _crc_sync_device *const device, void *const hw)
{
	device->hw = hw;
    31a4:	6001      	str	r1, [r0, #0]

	return ERR_NONE;
}
    31a6:	2000      	movs	r0, #0
    31a8:	4770      	bx	lr
	...

000031ac <_gclk_init_generators_by_fref>:
}

void _gclk_init_generators_by_fref(uint32_t bm)
{
#if CONF_GCLK_GEN_0_GENEN == 1
	if (bm & (1ul << 0)) {
    31ac:	07c3      	lsls	r3, r0, #31
    31ae:	d50b      	bpl.n	31c8 <_gclk_init_generators_by_fref+0x1c>
}

static inline void hri_gclk_write_GENDIV_reg(const void *const hw, hri_gclk_gendiv_reg_t data)
{
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->GENDIV.reg = data;
    31b0:	2280      	movs	r2, #128	; 0x80
    31b2:	0052      	lsls	r2, r2, #1
    31b4:	4b18      	ldr	r3, [pc, #96]	; (3218 <_gclk_init_generators_by_fref+0x6c>)
    31b6:	609a      	str	r2, [r3, #8]
	while (((const Gclk *)hw)->STATUS.bit.SYNCBUSY)
    31b8:	001a      	movs	r2, r3
    31ba:	7853      	ldrb	r3, [r2, #1]
    31bc:	09db      	lsrs	r3, r3, #7
    31be:	d1fc      	bne.n	31ba <_gclk_init_generators_by_fref+0xe>
	((Gclk *)hw)->GENCTRL.reg = data;
    31c0:	2283      	movs	r2, #131	; 0x83
    31c2:	0252      	lsls	r2, r2, #9
    31c4:	4b14      	ldr	r3, [pc, #80]	; (3218 <_gclk_init_generators_by_fref+0x6c>)
    31c6:	605a      	str	r2, [r3, #4]
		                               | CONF_GCLK_GEN_0_SRC
		                               | GCLK_GENCTRL_ID(0));
	}
#endif
#if CONF_GCLK_GEN_1_GENEN == 1
	if (bm & (1ul << 1)) {
    31c8:	0783      	lsls	r3, r0, #30
    31ca:	d509      	bpl.n	31e0 <_gclk_init_generators_by_fref+0x34>
	((Gclk *)hw)->GENDIV.reg = data;
    31cc:	4a13      	ldr	r2, [pc, #76]	; (321c <_gclk_init_generators_by_fref+0x70>)
    31ce:	4b12      	ldr	r3, [pc, #72]	; (3218 <_gclk_init_generators_by_fref+0x6c>)
    31d0:	609a      	str	r2, [r3, #8]
	while (((const Gclk *)hw)->STATUS.bit.SYNCBUSY)
    31d2:	001a      	movs	r2, r3
    31d4:	7853      	ldrb	r3, [r2, #1]
    31d6:	09db      	lsrs	r3, r3, #7
    31d8:	d1fc      	bne.n	31d4 <_gclk_init_generators_by_fref+0x28>
	((Gclk *)hw)->GENCTRL.reg = data;
    31da:	4a11      	ldr	r2, [pc, #68]	; (3220 <_gclk_init_generators_by_fref+0x74>)
    31dc:	4b0e      	ldr	r3, [pc, #56]	; (3218 <_gclk_init_generators_by_fref+0x6c>)
    31de:	605a      	str	r2, [r3, #4]
		                               | CONF_GCLK_GEN_1_SRC
		                               | GCLK_GENCTRL_ID(1));
	}
#endif
#if CONF_GCLK_GEN_2_GENEN == 1
	if (bm & (1ul << 2)) {
    31e0:	0743      	lsls	r3, r0, #29
    31e2:	d50a      	bpl.n	31fa <_gclk_init_generators_by_fref+0x4e>
	((Gclk *)hw)->GENDIV.reg = data;
    31e4:	2281      	movs	r2, #129	; 0x81
    31e6:	0052      	lsls	r2, r2, #1
    31e8:	4b0b      	ldr	r3, [pc, #44]	; (3218 <_gclk_init_generators_by_fref+0x6c>)
    31ea:	609a      	str	r2, [r3, #8]
	while (((const Gclk *)hw)->STATUS.bit.SYNCBUSY)
    31ec:	001a      	movs	r2, r3
    31ee:	7853      	ldrb	r3, [r2, #1]
    31f0:	09db      	lsrs	r3, r3, #7
    31f2:	d1fc      	bne.n	31ee <_gclk_init_generators_by_fref+0x42>
	((Gclk *)hw)->GENCTRL.reg = data;
    31f4:	4a0b      	ldr	r2, [pc, #44]	; (3224 <_gclk_init_generators_by_fref+0x78>)
    31f6:	4b08      	ldr	r3, [pc, #32]	; (3218 <_gclk_init_generators_by_fref+0x6c>)
    31f8:	605a      	str	r2, [r3, #4]
		                               | CONF_GCLK_GEN_2_SRC
		                               | GCLK_GENCTRL_ID(2));
	}
#endif
#if CONF_GCLK_GEN_3_GENEN == 1
	if (bm & (1ul << 3)) {
    31fa:	0703      	lsls	r3, r0, #28
    31fc:	d50a      	bpl.n	3214 <_gclk_init_generators_by_fref+0x68>
	((Gclk *)hw)->GENDIV.reg = data;
    31fe:	2204      	movs	r2, #4
    3200:	32ff      	adds	r2, #255	; 0xff
    3202:	4b05      	ldr	r3, [pc, #20]	; (3218 <_gclk_init_generators_by_fref+0x6c>)
    3204:	609a      	str	r2, [r3, #8]
	while (((const Gclk *)hw)->STATUS.bit.SYNCBUSY)
    3206:	001a      	movs	r2, r3
    3208:	7853      	ldrb	r3, [r2, #1]
    320a:	09db      	lsrs	r3, r3, #7
    320c:	d1fc      	bne.n	3208 <_gclk_init_generators_by_fref+0x5c>
	((Gclk *)hw)->GENCTRL.reg = data;
    320e:	4a06      	ldr	r2, [pc, #24]	; (3228 <_gclk_init_generators_by_fref+0x7c>)
    3210:	4b01      	ldr	r3, [pc, #4]	; (3218 <_gclk_init_generators_by_fref+0x6c>)
    3212:	605a      	str	r2, [r3, #4]
		                               | (CONF_GCLK_GEN_8_GENEN << GCLK_GENCTRL_GENEN_Pos)
		                               | CONF_GCLK_GEN_8_SRC
		                               | GCLK_GENCTRL_ID(8));
	}
#endif
}
    3214:	4770      	bx	lr
    3216:	46c0      	nop			; (mov r8, r8)
    3218:	40000c00 	.word	0x40000c00
    321c:	00000801 	.word	0x00000801
    3220:	00010601 	.word	0x00010601
    3224:	00010702 	.word	0x00010702
    3228:	00010503 	.word	0x00010503

0000322c <_pm_init>:
}

static inline void hri_pm_set_CPUSEL_CPUDIV_bf(const void *const hw, hri_pm_cpusel_reg_t mask)
{
	PM_CRITICAL_SECTION_ENTER();
	((Pm *)hw)->CPUSEL.reg |= PM_CPUSEL_CPUDIV(mask);
    322c:	4b06      	ldr	r3, [pc, #24]	; (3248 <_pm_init+0x1c>)
    322e:	7a1a      	ldrb	r2, [r3, #8]
    3230:	b2d2      	uxtb	r2, r2
    3232:	721a      	strb	r2, [r3, #8]
}

static inline void hri_pm_set_APBASEL_APBADIV_bf(const void *const hw, hri_pm_apbasel_reg_t mask)
{
	PM_CRITICAL_SECTION_ENTER();
	((Pm *)hw)->APBASEL.reg |= PM_APBASEL_APBADIV(mask);
    3234:	7a5a      	ldrb	r2, [r3, #9]
    3236:	b2d2      	uxtb	r2, r2
    3238:	725a      	strb	r2, [r3, #9]
}

static inline void hri_pm_set_APBBSEL_APBBDIV_bf(const void *const hw, hri_pm_apbbsel_reg_t mask)
{
	PM_CRITICAL_SECTION_ENTER();
	((Pm *)hw)->APBBSEL.reg |= PM_APBBSEL_APBBDIV(mask);
    323a:	7a9a      	ldrb	r2, [r3, #10]
    323c:	b2d2      	uxtb	r2, r2
    323e:	729a      	strb	r2, [r3, #10]
}

static inline void hri_pm_set_APBCSEL_APBCDIV_bf(const void *const hw, hri_pm_apbcsel_reg_t mask)
{
	PM_CRITICAL_SECTION_ENTER();
	((Pm *)hw)->APBCSEL.reg |= PM_APBCSEL_APBCDIV(mask);
    3240:	7ada      	ldrb	r2, [r3, #11]
    3242:	b2d2      	uxtb	r2, r2
    3244:	72da      	strb	r2, [r3, #11]
{
	hri_pm_set_CPUSEL_CPUDIV_bf(PM, CONF_CPU_DIV);
	hri_pm_set_APBASEL_APBADIV_bf(PM, CONF_APBA_DIV);
	hri_pm_set_APBBSEL_APBBDIV_bf(PM, CONF_APBB_DIV);
	hri_pm_set_APBCSEL_APBCDIV_bf(PM, CONF_APBC_DIV);
}
    3246:	4770      	bx	lr
    3248:	40000400 	.word	0x40000400

0000324c <time_date_init>:
	return ((const Rtc *)hw)->MODE1.STATUS.bit.SYNCBUSY;
}

static inline void hri_rtcmode2_wait_for_sync(const void *const hw)
{
	while (((const Rtc *)hw)->MODE2.STATUS.bit.SYNCBUSY)
    324c:	4a20      	ldr	r2, [pc, #128]	; (32d0 <time_date_init+0x84>)
    324e:	7a93      	ldrb	r3, [r2, #10]
    3250:	09db      	lsrs	r3, r3, #7
    3252:	d1fc      	bne.n	324e <time_date_init+0x2>
    3254:	4a1e      	ldr	r2, [pc, #120]	; (32d0 <time_date_init+0x84>)
    3256:	7a93      	ldrb	r3, [r2, #10]
    3258:	09db      	lsrs	r3, r3, #7
    325a:	d1fc      	bne.n	3256 <time_date_init+0xa>

static inline bool hri_rtcmode2_get_CTRL_ENABLE_bit(const void *const hw)
{
	uint16_t tmp;
	hri_rtcmode2_wait_for_sync(hw);
	tmp = ((Rtc *)hw)->MODE2.CTRL.reg;
    325c:	4b1c      	ldr	r3, [pc, #112]	; (32d0 <time_date_init+0x84>)
    325e:	881b      	ldrh	r3, [r3, #0]
 */
int8_t time_date_init()
{

	hri_rtcmode2_wait_for_sync(RTC);
	if (hri_rtcmode2_get_CTRL_ENABLE_bit(RTC)) {
    3260:	079b      	lsls	r3, r3, #30
    3262:	d50b      	bpl.n	327c <time_date_init+0x30>
	while (((const Rtc *)hw)->MODE2.STATUS.bit.SYNCBUSY)
    3264:	4a1a      	ldr	r2, [pc, #104]	; (32d0 <time_date_init+0x84>)
    3266:	7a93      	ldrb	r3, [r2, #10]
    3268:	09db      	lsrs	r3, r3, #7
    326a:	d1fc      	bne.n	3266 <time_date_init+0x1a>

static inline void hri_rtcmode2_clear_CTRL_ENABLE_bit(const void *const hw)
{
	RTC_CRITICAL_SECTION_ENTER();
	hri_rtcmode2_wait_for_sync(hw);
	((Rtc *)hw)->MODE2.CTRL.reg &= ~RTC_MODE2_CTRL_ENABLE;
    326c:	4a18      	ldr	r2, [pc, #96]	; (32d0 <time_date_init+0x84>)
    326e:	8813      	ldrh	r3, [r2, #0]
    3270:	2102      	movs	r1, #2
    3272:	438b      	bics	r3, r1
    3274:	8013      	strh	r3, [r2, #0]
	while (((const Rtc *)hw)->MODE2.STATUS.bit.SYNCBUSY)
    3276:	7a93      	ldrb	r3, [r2, #10]
    3278:	09db      	lsrs	r3, r3, #7
    327a:	d1fc      	bne.n	3276 <time_date_init+0x2a>
    327c:	4a14      	ldr	r2, [pc, #80]	; (32d0 <time_date_init+0x84>)
    327e:	7a93      	ldrb	r3, [r2, #10]
    3280:	09db      	lsrs	r3, r3, #7
    3282:	d1fc      	bne.n	327e <time_date_init+0x32>
	((Rtc *)hw)->MODE2.CTRL.reg |= RTC_MODE2_CTRL_SWRST;
    3284:	4a12      	ldr	r2, [pc, #72]	; (32d0 <time_date_init+0x84>)
    3286:	8813      	ldrh	r3, [r2, #0]
    3288:	2101      	movs	r1, #1
    328a:	430b      	orrs	r3, r1
    328c:	8013      	strh	r3, [r2, #0]
	while (((const Rtc *)hw)->MODE2.STATUS.bit.SYNCBUSY)
    328e:	7a93      	ldrb	r3, [r2, #10]
    3290:	09db      	lsrs	r3, r3, #7
    3292:	d1fc      	bne.n	328e <time_date_init+0x42>
    3294:	4a0e      	ldr	r2, [pc, #56]	; (32d0 <time_date_init+0x84>)
    3296:	7a93      	ldrb	r3, [r2, #10]
    3298:	09db      	lsrs	r3, r3, #7
    329a:	d1fc      	bne.n	3296 <time_date_init+0x4a>

static inline void hri_rtcmode2_write_CTRL_reg(const void *const hw, hri_rtcmode2_ctrl_reg_t data)
{
	RTC_CRITICAL_SECTION_ENTER();
	hri_rtcmode2_wait_for_sync(hw);
	((Rtc *)hw)->MODE2.CTRL.reg = data;
    329c:	4b0c      	ldr	r3, [pc, #48]	; (32d0 <time_date_init+0x84>)
    329e:	4a0d      	ldr	r2, [pc, #52]	; (32d4 <time_date_init+0x88>)
    32a0:	801a      	strh	r2, [r3, #0]
}

static inline void hri_rtcmode2_write_READREQ_reg(const void *const hw, hri_rtcmode2_readreq_reg_t data)
{
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE2.READREQ.reg = data;
    32a2:	2280      	movs	r2, #128	; 0x80
    32a4:	01d2      	lsls	r2, r2, #7
    32a6:	805a      	strh	r2, [r3, #2]
	while (((const Rtc *)hw)->MODE2.STATUS.bit.SYNCBUSY)
    32a8:	001a      	movs	r2, r3
    32aa:	7a93      	ldrb	r3, [r2, #10]
    32ac:	09db      	lsrs	r3, r3, #7
    32ae:	d1fc      	bne.n	32aa <time_date_init+0x5e>

static inline void hri_rtcmode2_write_FREQCORR_reg(const void *const hw, hri_rtcmode2_freqcorr_reg_t data)
{
	RTC_CRITICAL_SECTION_ENTER();
	hri_rtcmode2_wait_for_sync(hw);
	((Rtc *)hw)->MODE2.FREQCORR.reg = data;
    32b0:	2200      	movs	r2, #0
    32b2:	4b07      	ldr	r3, [pc, #28]	; (32d0 <time_date_init+0x84>)
    32b4:	731a      	strb	r2, [r3, #12]
	while (((const Rtc *)hw)->MODE2.STATUS.bit.SYNCBUSY)
    32b6:	001a      	movs	r2, r3
    32b8:	7a93      	ldrb	r3, [r2, #10]
    32ba:	09db      	lsrs	r3, r3, #7
    32bc:	d1fc      	bne.n	32b8 <time_date_init+0x6c>
	tmp = ((Rtc *)hw)->MODE2.CTRL.reg;
    32be:	4a04      	ldr	r2, [pc, #16]	; (32d0 <time_date_init+0x84>)
    32c0:	8813      	ldrh	r3, [r2, #0]
	tmp &= ~RTC_MODE2_CTRL_ENABLE;
    32c2:	2102      	movs	r1, #2
    32c4:	438b      	bics	r3, r1
	tmp |= value << RTC_MODE2_CTRL_ENABLE_Pos;
    32c6:	430b      	orrs	r3, r1
	((Rtc *)hw)->MODE2.CTRL.reg = tmp;
    32c8:	8013      	strh	r3, [r2, #0]
	//		 | 0 << RTC_MODE2_INTENSET_OVF_Pos); /* Overflow Interrupt enable: disabled */

	hri_rtcmode2_write_CTRL_ENABLE_bit(RTC, 1 << RTC_MODE2_CTRL_ENABLE_Pos); /* Enable: enabled */

	return 0;
}
    32ca:	2000      	movs	r0, #0
    32cc:	4770      	bx	lr
    32ce:	46c0      	nop			; (mov r8, r8)
    32d0:	40001400 	.word	0x40001400
    32d4:	00000a08 	.word	0x00000a08

000032d8 <_get_i2cm_index>:
 * \param[in] hw The pointer to hardware instance

 * \return The ordinal number of the given sercom hardware instance
 */
static int8_t _get_i2cm_index(const void *const hw)
{
    32d8:	b510      	push	{r4, lr}
	return ((uint32_t)hw - (uint32_t)SERCOM0) >> 10;
    32da:	4b08      	ldr	r3, [pc, #32]	; (32fc <_get_i2cm_index+0x24>)
    32dc:	469c      	mov	ip, r3
    32de:	4460      	add	r0, ip
    32e0:	0a80      	lsrs	r0, r0, #10
	uint8_t sercom_offset = _sercom_get_hardware_index(hw);
	uint8_t i;

	for (i = 0; i < ARRAY_SIZE(_i2cms); i++) {
		if (_i2cms[i].number == sercom_offset) {
    32e2:	b2c0      	uxtb	r0, r0
    32e4:	2803      	cmp	r0, #3
    32e6:	d007      	beq.n	32f8 <_get_i2cm_index+0x20>
			return i;
		}
	}

	ASSERT(false);
    32e8:	4a05      	ldr	r2, [pc, #20]	; (3300 <_get_i2cm_index+0x28>)
    32ea:	4906      	ldr	r1, [pc, #24]	; (3304 <_get_i2cm_index+0x2c>)
    32ec:	2000      	movs	r0, #0
    32ee:	4b06      	ldr	r3, [pc, #24]	; (3308 <_get_i2cm_index+0x30>)
    32f0:	4798      	blx	r3
	return -1;
    32f2:	2001      	movs	r0, #1
    32f4:	4240      	negs	r0, r0
}
    32f6:	bd10      	pop	{r4, pc}
			return i;
    32f8:	2000      	movs	r0, #0
    32fa:	e7fc      	b.n	32f6 <_get_i2cm_index+0x1e>
    32fc:	bdfff800 	.word	0xbdfff800
    3300:	000003a1 	.word	0x000003a1
    3304:	00009c38 	.word	0x00009c38
    3308:	00002fbd 	.word	0x00002fbd

0000330c <_i2c_m_sync_init_impl>:
		}
	}
}

static int32_t _i2c_m_sync_init_impl(struct _i2c_m_service *const service, void *const hw)
{
    330c:	b570      	push	{r4, r5, r6, lr}
    330e:	0005      	movs	r5, r0
    3310:	000c      	movs	r4, r1
	uint8_t i = _get_i2cm_index(hw);
    3312:	0008      	movs	r0, r1
    3314:	4b29      	ldr	r3, [pc, #164]	; (33bc <_i2c_m_sync_init_impl+0xb0>)
    3316:	4798      	blx	r3
    3318:	b2c0      	uxtb	r0, r0
typedef uint8_t  hri_sercomusart_intflag_reg_t;
typedef uint8_t  hri_sercomusart_rxpl_reg_t;

static inline void hri_sercomi2cm_wait_for_sync(const void *const hw, hri_sercomi2cm_syncbusy_reg_t reg)
{
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    331a:	2201      	movs	r2, #1
    331c:	69e3      	ldr	r3, [r4, #28]
    331e:	421a      	tst	r2, r3
    3320:	d1fc      	bne.n	331c <_i2c_m_sync_init_impl+0x10>
    3322:	2203      	movs	r2, #3
    3324:	69e3      	ldr	r3, [r4, #28]
    3326:	421a      	tst	r2, r3
    3328:	d1fc      	bne.n	3324 <_i2c_m_sync_init_impl+0x18>

static inline bool hri_sercomi2cm_get_CTRLA_ENABLE_bit(const void *const hw)
{
	uint32_t tmp;
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST | SERCOM_I2CM_SYNCBUSY_ENABLE);
	tmp = ((Sercom *)hw)->I2CM.CTRLA.reg;
    332a:	6823      	ldr	r3, [r4, #0]

	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST);
	/* Check if module is enabled. */
	if (hri_sercomi2cm_get_CTRLA_ENABLE_bit(hw)) {
    332c:	079b      	lsls	r3, r3, #30
    332e:	d441      	bmi.n	33b4 <_i2c_m_sync_init_impl+0xa8>
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    3330:	2201      	movs	r2, #1
    3332:	69e3      	ldr	r3, [r4, #28]
    3334:	421a      	tst	r2, r3
    3336:	d1fc      	bne.n	3332 <_i2c_m_sync_init_impl+0x26>
	((Sercom *)hw)->I2CM.CTRLA.reg |= SERCOM_I2CM_CTRLA_SWRST;
    3338:	6823      	ldr	r3, [r4, #0]
    333a:	2201      	movs	r2, #1
    333c:	4313      	orrs	r3, r2
    333e:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    3340:	69e3      	ldr	r3, [r4, #28]
    3342:	421a      	tst	r2, r3
    3344:	d1fc      	bne.n	3340 <_i2c_m_sync_init_impl+0x34>
		return ERR_DENIED;
	}
	hri_sercomi2cm_set_CTRLA_SWRST_bit(hw);
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST);

	hri_sercomi2cm_write_CTRLA_reg(hw, _i2cms[i].ctrl_a);
    3346:	0043      	lsls	r3, r0, #1
    3348:	181b      	adds	r3, r3, r0
    334a:	00db      	lsls	r3, r3, #3
    334c:	4a1c      	ldr	r2, [pc, #112]	; (33c0 <_i2c_m_sync_init_impl+0xb4>)
    334e:	18d3      	adds	r3, r2, r3
    3350:	6859      	ldr	r1, [r3, #4]
    3352:	2203      	movs	r2, #3
    3354:	69e3      	ldr	r3, [r4, #28]
    3356:	421a      	tst	r2, r3
    3358:	d1fc      	bne.n	3354 <_i2c_m_sync_init_impl+0x48>

static inline void hri_sercomi2cm_write_CTRLA_reg(const void *const hw, hri_sercomi2cm_ctrla_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST | SERCOM_I2CM_SYNCBUSY_ENABLE);
	((Sercom *)hw)->I2CM.CTRLA.reg = data;
    335a:	6021      	str	r1, [r4, #0]
	hri_sercomi2cm_write_CTRLB_reg(hw, _i2cms[i].ctrl_b);
    335c:	0043      	lsls	r3, r0, #1
    335e:	181b      	adds	r3, r3, r0
    3360:	00db      	lsls	r3, r3, #3
    3362:	4a17      	ldr	r2, [pc, #92]	; (33c0 <_i2c_m_sync_init_impl+0xb4>)
    3364:	18d3      	adds	r3, r2, r3
    3366:	689e      	ldr	r6, [r3, #8]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    3368:	2204      	movs	r2, #4
    336a:	69e3      	ldr	r3, [r4, #28]
    336c:	421a      	tst	r2, r3
    336e:	d1fc      	bne.n	336a <_i2c_m_sync_init_impl+0x5e>

static inline void hri_sercomi2cm_write_CTRLB_reg(const void *const hw, hri_sercomi2cm_ctrlb_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	((Sercom *)hw)->I2CM.CTRLB.reg = data;
    3370:	6066      	str	r6, [r4, #4]
	hri_sercomi2cm_write_BAUD_reg(hw, _i2cms[i].baud);
    3372:	0043      	lsls	r3, r0, #1
    3374:	181b      	adds	r3, r3, r0
    3376:	00db      	lsls	r3, r3, #3
    3378:	4a11      	ldr	r2, [pc, #68]	; (33c0 <_i2c_m_sync_init_impl+0xb4>)
    337a:	18d3      	adds	r3, r2, r3
    337c:	68db      	ldr	r3, [r3, #12]
}

static inline void hri_sercomi2cm_write_BAUD_reg(const void *const hw, hri_sercomi2cm_baud_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.BAUD.reg = data;
    337e:	60e3      	str	r3, [r4, #12]

	service->mode = (_i2cms[i].ctrl_a & SERCOM_I2CM_CTRLA_SPEED_Msk) >> SERCOM_I2CM_CTRLA_SPEED_Pos;
    3380:	0189      	lsls	r1, r1, #6
    3382:	0f89      	lsrs	r1, r1, #30
    3384:	81a9      	strh	r1, [r5, #12]
	hri_sercomi2cm_write_ADDR_HS_bit(hw, service->mode < I2C_HS ? 0 : 1);
    3386:	2301      	movs	r3, #1
    3388:	428b      	cmp	r3, r1
    338a:	4189      	sbcs	r1, r1
    338c:	4249      	negs	r1, r1
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    338e:	2204      	movs	r2, #4
    3390:	69e3      	ldr	r3, [r4, #28]
    3392:	421a      	tst	r2, r3
    3394:	d1fc      	bne.n	3390 <_i2c_m_sync_init_impl+0x84>
static inline void hri_sercomi2cm_write_ADDR_HS_bit(const void *const hw, bool value)
{
	uint32_t tmp;
	SERCOM_CRITICAL_SECTION_ENTER();
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	tmp = ((Sercom *)hw)->I2CM.ADDR.reg;
    3396:	6a63      	ldr	r3, [r4, #36]	; 0x24
	tmp &= ~SERCOM_I2CM_ADDR_HS;
    3398:	4a0a      	ldr	r2, [pc, #40]	; (33c4 <_i2c_m_sync_init_impl+0xb8>)
    339a:	401a      	ands	r2, r3
	tmp |= value << SERCOM_I2CM_ADDR_HS_Pos;
    339c:	038b      	lsls	r3, r1, #14
    339e:	4313      	orrs	r3, r2
	((Sercom *)hw)->I2CM.ADDR.reg = tmp;
    33a0:	6263      	str	r3, [r4, #36]	; 0x24

	service->trise = _i2cms[i].trise;
    33a2:	0043      	lsls	r3, r0, #1
    33a4:	1818      	adds	r0, r3, r0
    33a6:	00c0      	lsls	r0, r0, #3
    33a8:	4b05      	ldr	r3, [pc, #20]	; (33c0 <_i2c_m_sync_init_impl+0xb4>)
    33aa:	1818      	adds	r0, r3, r0
    33ac:	8a43      	ldrh	r3, [r0, #18]
    33ae:	81eb      	strh	r3, [r5, #14]

	return ERR_NONE;
    33b0:	2000      	movs	r0, #0
}
    33b2:	bd70      	pop	{r4, r5, r6, pc}
		return ERR_DENIED;
    33b4:	2011      	movs	r0, #17
    33b6:	4240      	negs	r0, r0
    33b8:	e7fb      	b.n	33b2 <_i2c_m_sync_init_impl+0xa6>
    33ba:	46c0      	nop			; (mov r8, r8)
    33bc:	000032d9 	.word	0x000032d9
    33c0:	00009c0c 	.word	0x00009c0c
    33c4:	ffffbfff 	.word	0xffffbfff

000033c8 <_i2c_m_sync_init>:
{
    33c8:	b570      	push	{r4, r5, r6, lr}
    33ca:	0004      	movs	r4, r0
    33cc:	000d      	movs	r5, r1
	ASSERT(i2c_dev);
    33ce:	1e43      	subs	r3, r0, #1
    33d0:	4198      	sbcs	r0, r3
    33d2:	b2c0      	uxtb	r0, r0
    33d4:	22a2      	movs	r2, #162	; 0xa2
    33d6:	00d2      	lsls	r2, r2, #3
    33d8:	4904      	ldr	r1, [pc, #16]	; (33ec <_i2c_m_sync_init+0x24>)
    33da:	4b05      	ldr	r3, [pc, #20]	; (33f0 <_i2c_m_sync_init+0x28>)
    33dc:	4798      	blx	r3
	i2c_dev->hw = hw;
    33de:	6125      	str	r5, [r4, #16]
	return _i2c_m_sync_init_impl(&i2c_dev->service, hw);
    33e0:	0029      	movs	r1, r5
    33e2:	0020      	movs	r0, r4
    33e4:	4b03      	ldr	r3, [pc, #12]	; (33f4 <_i2c_m_sync_init+0x2c>)
    33e6:	4798      	blx	r3
}
    33e8:	bd70      	pop	{r4, r5, r6, pc}
    33ea:	46c0      	nop			; (mov r8, r8)
    33ec:	00009c38 	.word	0x00009c38
    33f0:	00002fbd 	.word	0x00002fbd
    33f4:	0000330d 	.word	0x0000330d

000033f8 <_i2c_m_sync_enable>:
{
    33f8:	b570      	push	{r4, r5, r6, lr}
    33fa:	0004      	movs	r4, r0
	ASSERT(i2c_dev);
    33fc:	4d16      	ldr	r5, [pc, #88]	; (3458 <_i2c_m_sync_enable+0x60>)
    33fe:	1e43      	subs	r3, r0, #1
    3400:	4198      	sbcs	r0, r3
    3402:	b2c0      	uxtb	r0, r0
    3404:	4a15      	ldr	r2, [pc, #84]	; (345c <_i2c_m_sync_enable+0x64>)
    3406:	0029      	movs	r1, r5
    3408:	4e15      	ldr	r6, [pc, #84]	; (3460 <_i2c_m_sync_enable+0x68>)
    340a:	47b0      	blx	r6
	_i2c_m_enable_implementation(i2c_dev->hw);
    340c:	6924      	ldr	r4, [r4, #16]
	ASSERT(hw);
    340e:	0020      	movs	r0, r4
    3410:	1e43      	subs	r3, r0, #1
    3412:	4198      	sbcs	r0, r3
    3414:	b2c0      	uxtb	r0, r0
    3416:	4a13      	ldr	r2, [pc, #76]	; (3464 <_i2c_m_sync_enable+0x6c>)
    3418:	0029      	movs	r1, r5
    341a:	47b0      	blx	r6
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    341c:	2203      	movs	r2, #3
    341e:	69e3      	ldr	r3, [r4, #28]
    3420:	421a      	tst	r2, r3
    3422:	d1fc      	bne.n	341e <_i2c_m_sync_enable+0x26>
	((Sercom *)hw)->I2CM.CTRLA.reg |= SERCOM_I2CM_CTRLA_ENABLE;
    3424:	6823      	ldr	r3, [r4, #0]
    3426:	2202      	movs	r2, #2
    3428:	4313      	orrs	r3, r2
    342a:	6023      	str	r3, [r4, #0]
	int timeout = 65535;
    342c:	490e      	ldr	r1, [pc, #56]	; (3468 <_i2c_m_sync_enable+0x70>)
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    342e:	3202      	adds	r2, #2
}

static inline hri_sercomi2cm_status_reg_t hri_sercomi2cm_read_STATUS_BUSSTATE_bf(const void *const hw)
{
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	return (((Sercom *)hw)->I2CM.STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE_Msk) >> SERCOM_I2CM_STATUS_BUSSTATE_Pos;
    3430:	2003      	movs	r0, #3

static inline void hri_sercomi2cm_clear_STATUS_reg(const void *const hw, hri_sercomi2cm_status_reg_t mask)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	((Sercom *)hw)->I2CM.STATUS.reg = mask;
    3432:	2510      	movs	r5, #16
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    3434:	69e3      	ldr	r3, [r4, #28]
    3436:	421a      	tst	r2, r3
    3438:	d1fc      	bne.n	3434 <_i2c_m_sync_enable+0x3c>
	return (((Sercom *)hw)->I2CM.STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE_Msk) >> SERCOM_I2CM_STATUS_BUSSTATE_Pos;
    343a:	8b63      	ldrh	r3, [r4, #26]
    343c:	091b      	lsrs	r3, r3, #4
	while (hri_sercomi2cm_read_STATUS_BUSSTATE_bf(hw) != I2C_IDLE) {
    343e:	4003      	ands	r3, r0
    3440:	2b01      	cmp	r3, #1
    3442:	d007      	beq.n	3454 <_i2c_m_sync_enable+0x5c>
		timeout--;
    3444:	3901      	subs	r1, #1
		if (timeout <= 0) {
    3446:	2900      	cmp	r1, #0
    3448:	dcf4      	bgt.n	3434 <_i2c_m_sync_enable+0x3c>
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    344a:	69e3      	ldr	r3, [r4, #28]
    344c:	421a      	tst	r2, r3
    344e:	d1fc      	bne.n	344a <_i2c_m_sync_enable+0x52>
	((Sercom *)hw)->I2CM.STATUS.reg = mask;
    3450:	8365      	strh	r5, [r4, #26]
    3452:	e7ef      	b.n	3434 <_i2c_m_sync_enable+0x3c>
}
    3454:	2000      	movs	r0, #0
    3456:	bd70      	pop	{r4, r5, r6, pc}
    3458:	00009c38 	.word	0x00009c38
    345c:	0000052d 	.word	0x0000052d
    3460:	00002fbd 	.word	0x00002fbd
    3464:	000005fd 	.word	0x000005fd
    3468:	0000ffff 	.word	0x0000ffff

0000346c <_i2c_m_sync_transfer>:
{
    346c:	b5f0      	push	{r4, r5, r6, r7, lr}
    346e:	46de      	mov	lr, fp
    3470:	464f      	mov	r7, r9
    3472:	4646      	mov	r6, r8
    3474:	b5c0      	push	{r6, r7, lr}
    3476:	b082      	sub	sp, #8
    3478:	0005      	movs	r5, r0
    347a:	4688      	mov	r8, r1
	void *   hw = i2c_dev->hw;
    347c:	6904      	ldr	r4, [r0, #16]
	ASSERT(i2c_dev);
    347e:	0006      	movs	r6, r0
    3480:	1e73      	subs	r3, r6, #1
    3482:	419e      	sbcs	r6, r3
    3484:	b2f3      	uxtb	r3, r6
    3486:	4fb8      	ldr	r7, [pc, #736]	; (3768 <_i2c_m_sync_transfer+0x2fc>)
    3488:	4ab8      	ldr	r2, [pc, #736]	; (376c <_i2c_m_sync_transfer+0x300>)
    348a:	0039      	movs	r1, r7
    348c:	9301      	str	r3, [sp, #4]
    348e:	0018      	movs	r0, r3
    3490:	4eb7      	ldr	r6, [pc, #732]	; (3770 <_i2c_m_sync_transfer+0x304>)
    3492:	47b0      	blx	r6
	ASSERT(i2c_dev->hw);
    3494:	6928      	ldr	r0, [r5, #16]
    3496:	1e43      	subs	r3, r0, #1
    3498:	4198      	sbcs	r0, r3
    349a:	b2c0      	uxtb	r0, r0
    349c:	4ab5      	ldr	r2, [pc, #724]	; (3774 <_i2c_m_sync_transfer+0x308>)
    349e:	0039      	movs	r1, r7
    34a0:	47b0      	blx	r6
	ASSERT(msg);
    34a2:	4640      	mov	r0, r8
    34a4:	1e43      	subs	r3, r0, #1
    34a6:	4198      	sbcs	r0, r3
    34a8:	b2c0      	uxtb	r0, r0
    34aa:	4ab3      	ldr	r2, [pc, #716]	; (3778 <_i2c_m_sync_transfer+0x30c>)
    34ac:	0039      	movs	r1, r7
    34ae:	47b0      	blx	r6
	if (i2c_dev->service.msg.flags & I2C_M_BUSY) {
    34b0:	886b      	ldrh	r3, [r5, #2]
    34b2:	05da      	lsls	r2, r3, #23
    34b4:	d500      	bpl.n	34b8 <_i2c_m_sync_transfer+0x4c>
    34b6:	e1fc      	b.n	38b2 <_i2c_m_sync_transfer+0x446>
	msg->flags |= I2C_M_BUSY;
    34b8:	4642      	mov	r2, r8
    34ba:	8853      	ldrh	r3, [r2, #2]
    34bc:	2280      	movs	r2, #128	; 0x80
    34be:	0052      	lsls	r2, r2, #1
    34c0:	4313      	orrs	r3, r2
    34c2:	4642      	mov	r2, r8
    34c4:	8053      	strh	r3, [r2, #2]
	i2c_dev->service.msg = *msg;
    34c6:	002a      	movs	r2, r5
    34c8:	4641      	mov	r1, r8
    34ca:	c9c1      	ldmia	r1!, {r0, r6, r7}
    34cc:	c2c1      	stmia	r2!, {r0, r6, r7}
	void *             hw    = i2c_dev->hw;
    34ce:	692f      	ldr	r7, [r5, #16]
	tmp = ((Sercom *)hw)->I2CM.CTRLA.reg;
    34d0:	683a      	ldr	r2, [r7, #0]
    34d2:	4691      	mov	r9, r2
	ASSERT(i2c_dev);
    34d4:	4aa9      	ldr	r2, [pc, #676]	; (377c <_i2c_m_sync_transfer+0x310>)
    34d6:	49a4      	ldr	r1, [pc, #656]	; (3768 <_i2c_m_sync_transfer+0x2fc>)
    34d8:	9801      	ldr	r0, [sp, #4]
    34da:	4ba5      	ldr	r3, [pc, #660]	; (3770 <_i2c_m_sync_transfer+0x304>)
    34dc:	4798      	blx	r3
	if (msg->len == 1 && sclsm) {
    34de:	686b      	ldr	r3, [r5, #4]
    34e0:	2b01      	cmp	r3, #1
    34e2:	d059      	beq.n	3598 <_i2c_m_sync_transfer+0x12c>
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    34e4:	2204      	movs	r2, #4
    34e6:	69fb      	ldr	r3, [r7, #28]
    34e8:	421a      	tst	r2, r3
    34ea:	d1fc      	bne.n	34e6 <_i2c_m_sync_transfer+0x7a>
	((Sercom *)hw)->I2CM.CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
    34ec:	687b      	ldr	r3, [r7, #4]
    34ee:	4aa4      	ldr	r2, [pc, #656]	; (3780 <_i2c_m_sync_transfer+0x314>)
    34f0:	4013      	ands	r3, r2
    34f2:	607b      	str	r3, [r7, #4]
	if (msg->addr & I2C_M_TEN) {
    34f4:	882b      	ldrh	r3, [r5, #0]
    34f6:	055a      	lsls	r2, r3, #21
    34f8:	d55b      	bpl.n	35b2 <_i2c_m_sync_transfer+0x146>
		if (msg->flags & I2C_M_RD) {
    34fa:	886a      	ldrh	r2, [r5, #2]
    34fc:	07d2      	lsls	r2, r2, #31
    34fe:	d504      	bpl.n	350a <_i2c_m_sync_transfer+0x9e>
			msg->flags |= I2C_M_TEN;
    3500:	886a      	ldrh	r2, [r5, #2]
    3502:	2180      	movs	r1, #128	; 0x80
    3504:	00c9      	lsls	r1, r1, #3
    3506:	430a      	orrs	r2, r1
    3508:	806a      	strh	r2, [r5, #2]
		                              ((msg->addr & TEN_ADDR_MASK) << 1) | SERCOM_I2CM_ADDR_TENBITEN
    350a:	005b      	lsls	r3, r3, #1
		                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    350c:	499d      	ldr	r1, [pc, #628]	; (3784 <_i2c_m_sync_transfer+0x318>)
    350e:	4019      	ands	r1, r3
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    3510:	2204      	movs	r2, #4
    3512:	69fb      	ldr	r3, [r7, #28]
    3514:	421a      	tst	r2, r3
    3516:	d1fc      	bne.n	3512 <_i2c_m_sync_transfer+0xa6>
	return ((Sercom *)hw)->I2CM.ADDR.reg;
    3518:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    351a:	2280      	movs	r2, #128	; 0x80
    351c:	01d2      	lsls	r2, r2, #7
    351e:	401a      	ands	r2, r3
		hri_sercomi2cm_write_ADDR_reg(hw,
    3520:	2380      	movs	r3, #128	; 0x80
    3522:	021b      	lsls	r3, r3, #8
    3524:	4313      	orrs	r3, r2
    3526:	4319      	orrs	r1, r3
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    3528:	2204      	movs	r2, #4
    352a:	69fb      	ldr	r3, [r7, #28]
    352c:	421a      	tst	r2, r3
    352e:	d1fc      	bne.n	352a <_i2c_m_sync_transfer+0xbe>
	((Sercom *)hw)->I2CM.ADDR.reg = data;
    3530:	6279      	str	r1, [r7, #36]	; 0x24
	void *   hw      = i2c_dev->hw;
    3532:	6929      	ldr	r1, [r5, #16]
	return ((Sercom *)hw)->I2CM.INTFLAG.reg;
    3534:	7e0b      	ldrb	r3, [r1, #24]
    3536:	b2db      	uxtb	r3, r3
    3538:	4a93      	ldr	r2, [pc, #588]	; (3788 <_i2c_m_sync_transfer+0x31c>)
	} while (!(*flags & MB_FLAG) && !(*flags & SB_FLAG));
    353a:	2003      	movs	r0, #3
    353c:	4218      	tst	r0, r3
    353e:	d104      	bne.n	354a <_i2c_m_sync_transfer+0xde>
    3540:	7e0b      	ldrb	r3, [r1, #24]
    3542:	b2db      	uxtb	r3, r3
    3544:	3a01      	subs	r2, #1
		if (timeout-- == 0) {
    3546:	2a00      	cmp	r2, #0
    3548:	d1f8      	bne.n	353c <_i2c_m_sync_transfer+0xd0>
	tmp = ((Sercom *)hw)->I2CM.CTRLA.reg;
    354a:	683e      	ldr	r6, [r7, #0]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    354c:	2104      	movs	r1, #4
    354e:	69fa      	ldr	r2, [r7, #28]
    3550:	4211      	tst	r1, r2
    3552:	d1fc      	bne.n	354e <_i2c_m_sync_transfer+0xe2>
	return ((Sercom *)hw)->I2CM.STATUS.reg;
    3554:	8b7a      	ldrh	r2, [r7, #26]
    3556:	b292      	uxth	r2, r2
	if (flags & MB_FLAG) {
    3558:	07d9      	lsls	r1, r3, #31
    355a:	d400      	bmi.n	355e <_i2c_m_sync_transfer+0xf2>
    355c:	e09f      	b.n	369e <_i2c_m_sync_transfer+0x232>
		if (status & SERCOM_I2CM_STATUS_ARBLOST) {
    355e:	0793      	lsls	r3, r2, #30
    3560:	d53d      	bpl.n	35de <_i2c_m_sync_transfer+0x172>
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_MB;
    3562:	2301      	movs	r3, #1
    3564:	763b      	strb	r3, [r7, #24]
			msg->flags |= I2C_M_FAIL;
    3566:	886b      	ldrh	r3, [r5, #2]
    3568:	2180      	movs	r1, #128	; 0x80
    356a:	0149      	lsls	r1, r1, #5
    356c:	430b      	orrs	r3, r1
    356e:	806b      	strh	r3, [r5, #2]
			msg->flags &= ~I2C_M_BUSY;
    3570:	886b      	ldrh	r3, [r5, #2]
    3572:	4986      	ldr	r1, [pc, #536]	; (378c <_i2c_m_sync_transfer+0x320>)
    3574:	400b      	ands	r3, r1
    3576:	806b      	strh	r3, [r5, #2]
			if (status & SERCOM_I2CM_STATUS_BUSERR) {
    3578:	2001      	movs	r0, #1
    357a:	0003      	movs	r3, r0
    357c:	4013      	ands	r3, r2
			return I2C_ERR_BAD_ADDRESS;
    357e:	4258      	negs	r0, r3
    3580:	4158      	adcs	r0, r3
    3582:	3805      	subs	r0, #5
		i2c_dev->service.msg.flags &= ~I2C_M_BUSY;
    3584:	886b      	ldrh	r3, [r5, #2]
    3586:	4a81      	ldr	r2, [pc, #516]	; (378c <_i2c_m_sync_transfer+0x320>)
    3588:	4013      	ands	r3, r2
    358a:	806b      	strh	r3, [r5, #2]
}
    358c:	b002      	add	sp, #8
    358e:	bc1c      	pop	{r2, r3, r4}
    3590:	4690      	mov	r8, r2
    3592:	4699      	mov	r9, r3
    3594:	46a3      	mov	fp, r4
    3596:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (msg->len == 1 && sclsm) {
    3598:	464b      	mov	r3, r9
    359a:	011b      	lsls	r3, r3, #4
    359c:	d5a2      	bpl.n	34e4 <_i2c_m_sync_transfer+0x78>
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    359e:	2204      	movs	r2, #4
    35a0:	69fb      	ldr	r3, [r7, #28]
    35a2:	421a      	tst	r2, r3
    35a4:	d1fc      	bne.n	35a0 <_i2c_m_sync_transfer+0x134>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    35a6:	687a      	ldr	r2, [r7, #4]
    35a8:	2380      	movs	r3, #128	; 0x80
    35aa:	02db      	lsls	r3, r3, #11
    35ac:	4313      	orrs	r3, r2
    35ae:	607b      	str	r3, [r7, #4]
    35b0:	e7a0      	b.n	34f4 <_i2c_m_sync_transfer+0x88>
		                              ((msg->addr & SEVEN_ADDR_MASK) << 1) | (msg->flags & I2C_M_RD ? I2C_M_RD : 0x0)
    35b2:	8869      	ldrh	r1, [r5, #2]
    35b4:	005b      	lsls	r3, r3, #1
    35b6:	20ff      	movs	r0, #255	; 0xff
    35b8:	4003      	ands	r3, r0
    35ba:	38fe      	subs	r0, #254	; 0xfe
    35bc:	4008      	ands	r0, r1
    35be:	4318      	orrs	r0, r3
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    35c0:	2204      	movs	r2, #4
    35c2:	69fb      	ldr	r3, [r7, #28]
    35c4:	421a      	tst	r2, r3
    35c6:	d1fc      	bne.n	35c2 <_i2c_m_sync_transfer+0x156>
	return ((Sercom *)hw)->I2CM.ADDR.reg;
    35c8:	6a79      	ldr	r1, [r7, #36]	; 0x24
		                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    35ca:	2380      	movs	r3, #128	; 0x80
    35cc:	01db      	lsls	r3, r3, #7
    35ce:	4019      	ands	r1, r3
		hri_sercomi2cm_write_ADDR_reg(hw,
    35d0:	4301      	orrs	r1, r0
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    35d2:	2204      	movs	r2, #4
    35d4:	69fb      	ldr	r3, [r7, #28]
    35d6:	421a      	tst	r2, r3
    35d8:	d1fc      	bne.n	35d4 <_i2c_m_sync_transfer+0x168>
	((Sercom *)hw)->I2CM.ADDR.reg = data;
    35da:	6279      	str	r1, [r7, #36]	; 0x24
    35dc:	e7a9      	b.n	3532 <_i2c_m_sync_transfer+0xc6>
			if (status & SERCOM_I2CM_STATUS_RXNACK) {
    35de:	0753      	lsls	r3, r2, #29
    35e0:	d41b      	bmi.n	361a <_i2c_m_sync_transfer+0x1ae>
			if (msg->flags & I2C_M_TEN) {
    35e2:	886b      	ldrh	r3, [r5, #2]
    35e4:	055b      	lsls	r3, r3, #21
    35e6:	d535      	bpl.n	3654 <_i2c_m_sync_transfer+0x1e8>
				                              ((((msg->addr & TEN_ADDR_MASK) >> 8) | TEN_ADDR_FRAME) << 1) | I2C_M_RD
    35e8:	8829      	ldrh	r1, [r5, #0]
    35ea:	09c9      	lsrs	r1, r1, #7
				                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    35ec:	2006      	movs	r0, #6
    35ee:	4008      	ands	r0, r1
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    35f0:	2204      	movs	r2, #4
    35f2:	69fb      	ldr	r3, [r7, #28]
    35f4:	421a      	tst	r2, r3
    35f6:	d1fc      	bne.n	35f2 <_i2c_m_sync_transfer+0x186>
	return ((Sercom *)hw)->I2CM.ADDR.reg;
    35f8:	6a79      	ldr	r1, [r7, #36]	; 0x24
    35fa:	2380      	movs	r3, #128	; 0x80
    35fc:	01db      	lsls	r3, r3, #7
    35fe:	4019      	ands	r1, r3
				hri_sercomi2cm_write_ADDR_reg(hw,
    3600:	23f1      	movs	r3, #241	; 0xf1
    3602:	4319      	orrs	r1, r3
    3604:	4301      	orrs	r1, r0
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    3606:	2204      	movs	r2, #4
    3608:	69fb      	ldr	r3, [r7, #28]
    360a:	421a      	tst	r2, r3
    360c:	d1fc      	bne.n	3608 <_i2c_m_sync_transfer+0x19c>
	((Sercom *)hw)->I2CM.ADDR.reg = data;
    360e:	6279      	str	r1, [r7, #36]	; 0x24
				msg->flags &= ~I2C_M_TEN;
    3610:	886b      	ldrh	r3, [r5, #2]
    3612:	4a5f      	ldr	r2, [pc, #380]	; (3790 <_i2c_m_sync_transfer+0x324>)
    3614:	4013      	ands	r3, r2
    3616:	806b      	strh	r3, [r5, #2]
    3618:	e066      	b.n	36e8 <_i2c_m_sync_transfer+0x27c>
				if (msg->len > 0) {
    361a:	686b      	ldr	r3, [r5, #4]
    361c:	2b00      	cmp	r3, #0
    361e:	dd04      	ble.n	362a <_i2c_m_sync_transfer+0x1be>
					msg->flags |= I2C_M_FAIL;
    3620:	886b      	ldrh	r3, [r5, #2]
    3622:	2280      	movs	r2, #128	; 0x80
    3624:	0152      	lsls	r2, r2, #5
    3626:	4313      	orrs	r3, r2
    3628:	806b      	strh	r3, [r5, #2]
				if (msg->flags & I2C_M_STOP) {
    362a:	886b      	ldrh	r3, [r5, #2]
    362c:	b21b      	sxth	r3, r3
    362e:	2b00      	cmp	r3, #0
    3630:	db06      	blt.n	3640 <_i2c_m_sync_transfer+0x1d4>
				msg->flags &= ~I2C_M_BUSY;
    3632:	886b      	ldrh	r3, [r5, #2]
    3634:	4a55      	ldr	r2, [pc, #340]	; (378c <_i2c_m_sync_transfer+0x320>)
    3636:	4013      	ands	r3, r2
    3638:	806b      	strh	r3, [r5, #2]
				return I2C_NACK;
    363a:	2002      	movs	r0, #2
    363c:	4240      	negs	r0, r0
    363e:	e7a1      	b.n	3584 <_i2c_m_sync_transfer+0x118>
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    3640:	2304      	movs	r3, #4
    3642:	69fa      	ldr	r2, [r7, #28]
    3644:	4213      	tst	r3, r2
    3646:	d1fc      	bne.n	3642 <_i2c_m_sync_transfer+0x1d6>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
    3648:	687a      	ldr	r2, [r7, #4]
    364a:	23c0      	movs	r3, #192	; 0xc0
    364c:	029b      	lsls	r3, r3, #10
    364e:	4313      	orrs	r3, r2
    3650:	607b      	str	r3, [r7, #4]
    3652:	e7ee      	b.n	3632 <_i2c_m_sync_transfer+0x1c6>
			if (msg->len == 0) {
    3654:	686b      	ldr	r3, [r5, #4]
    3656:	2b00      	cmp	r3, #0
    3658:	d112      	bne.n	3680 <_i2c_m_sync_transfer+0x214>
				if (msg->flags & I2C_M_STOP) {
    365a:	886b      	ldrh	r3, [r5, #2]
    365c:	b21b      	sxth	r3, r3
    365e:	2b00      	cmp	r3, #0
    3660:	db04      	blt.n	366c <_i2c_m_sync_transfer+0x200>
				msg->flags &= ~I2C_M_BUSY;
    3662:	886b      	ldrh	r3, [r5, #2]
    3664:	4a49      	ldr	r2, [pc, #292]	; (378c <_i2c_m_sync_transfer+0x320>)
    3666:	4013      	ands	r3, r2
    3668:	806b      	strh	r3, [r5, #2]
    366a:	e03d      	b.n	36e8 <_i2c_m_sync_transfer+0x27c>
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    366c:	2204      	movs	r2, #4
    366e:	69fb      	ldr	r3, [r7, #28]
    3670:	421a      	tst	r2, r3
    3672:	d1fc      	bne.n	366e <_i2c_m_sync_transfer+0x202>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
    3674:	687a      	ldr	r2, [r7, #4]
    3676:	23c0      	movs	r3, #192	; 0xc0
    3678:	029b      	lsls	r3, r3, #10
    367a:	4313      	orrs	r3, r2
    367c:	607b      	str	r3, [r7, #4]
    367e:	e7f0      	b.n	3662 <_i2c_m_sync_transfer+0x1f6>
				hri_sercomi2cm_write_DATA_reg(hw, *msg->buffer);
    3680:	68ab      	ldr	r3, [r5, #8]
    3682:	7819      	ldrb	r1, [r3, #0]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    3684:	2204      	movs	r2, #4
    3686:	69fb      	ldr	r3, [r7, #28]
    3688:	421a      	tst	r2, r3
    368a:	d1fc      	bne.n	3686 <_i2c_m_sync_transfer+0x21a>
	((Sercom *)hw)->I2CM.DATA.reg = data;
    368c:	2328      	movs	r3, #40	; 0x28
    368e:	54f9      	strb	r1, [r7, r3]
				msg->buffer++;
    3690:	68ab      	ldr	r3, [r5, #8]
    3692:	3301      	adds	r3, #1
    3694:	60ab      	str	r3, [r5, #8]
				msg->len--;
    3696:	686b      	ldr	r3, [r5, #4]
    3698:	3b01      	subs	r3, #1
    369a:	606b      	str	r3, [r5, #4]
    369c:	e024      	b.n	36e8 <_i2c_m_sync_transfer+0x27c>
	} else if (flags & SB_FLAG) {
    369e:	079b      	lsls	r3, r3, #30
    36a0:	d522      	bpl.n	36e8 <_i2c_m_sync_transfer+0x27c>
		if ((msg->len) && !(status & SERCOM_I2CM_STATUS_RXNACK)) {
    36a2:	686b      	ldr	r3, [r5, #4]
    36a4:	2b00      	cmp	r3, #0
    36a6:	d033      	beq.n	3710 <_i2c_m_sync_transfer+0x2a4>
    36a8:	0752      	lsls	r2, r2, #29
    36aa:	d431      	bmi.n	3710 <_i2c_m_sync_transfer+0x2a4>
	tmp = (tmp & SERCOM_I2CM_CTRLA_SCLSM) >> SERCOM_I2CM_CTRLA_SCLSM_Pos;
    36ac:	0136      	lsls	r6, r6, #4
    36ae:	0ff6      	lsrs	r6, r6, #31
			msg->len--;
    36b0:	3b01      	subs	r3, #1
    36b2:	606b      	str	r3, [r5, #4]
			if ((msg->len == 0 && !sclsm) || (msg->len == 1 && sclsm)) {
    36b4:	2b00      	cmp	r3, #0
    36b6:	d000      	beq.n	36ba <_i2c_m_sync_transfer+0x24e>
    36b8:	e0fe      	b.n	38b8 <_i2c_m_sync_transfer+0x44c>
    36ba:	2e00      	cmp	r6, #0
    36bc:	d100      	bne.n	36c0 <_i2c_m_sync_transfer+0x254>
    36be:	e101      	b.n	38c4 <_i2c_m_sync_transfer+0x458>
				if (msg->flags & I2C_M_STOP) {
    36c0:	886b      	ldrh	r3, [r5, #2]
    36c2:	b21b      	sxth	r3, r3
    36c4:	2b00      	cmp	r3, #0
    36c6:	db19      	blt.n	36fc <_i2c_m_sync_transfer+0x290>
				msg->flags &= ~I2C_M_BUSY;
    36c8:	886b      	ldrh	r3, [r5, #2]
    36ca:	4a30      	ldr	r2, [pc, #192]	; (378c <_i2c_m_sync_transfer+0x320>)
    36cc:	4013      	ands	r3, r2
    36ce:	806b      	strh	r3, [r5, #2]
			*msg->buffer++ = hri_sercomi2cm_read_DATA_reg(hw);
    36d0:	68a9      	ldr	r1, [r5, #8]
    36d2:	1c4b      	adds	r3, r1, #1
    36d4:	60ab      	str	r3, [r5, #8]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    36d6:	2204      	movs	r2, #4
    36d8:	69fb      	ldr	r3, [r7, #28]
    36da:	421a      	tst	r2, r3
    36dc:	d1fc      	bne.n	36d8 <_i2c_m_sync_transfer+0x26c>
	return ((Sercom *)hw)->I2CM.DATA.reg;
    36de:	2328      	movs	r3, #40	; 0x28
    36e0:	5cfb      	ldrb	r3, [r7, r3]
    36e2:	700b      	strb	r3, [r1, #0]
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
    36e4:	2302      	movs	r3, #2
    36e6:	763b      	strb	r3, [r7, #24]
			return I2C_NACK;
    36e8:	2000      	movs	r0, #0
	while (i2c_dev->service.msg.flags & I2C_M_BUSY) {
    36ea:	2380      	movs	r3, #128	; 0x80
    36ec:	005b      	lsls	r3, r3, #1
    36ee:	469b      	mov	fp, r3
	} while (!(*flags & MB_FLAG) && !(*flags & SB_FLAG));
    36f0:	2103      	movs	r1, #3
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    36f2:	2204      	movs	r2, #4
	if (flags & MB_FLAG) {
    36f4:	3bff      	subs	r3, #255	; 0xff
    36f6:	4699      	mov	r9, r3
	} else if (flags & SB_FLAG) {
    36f8:	2602      	movs	r6, #2
    36fa:	e0b0      	b.n	385e <_i2c_m_sync_transfer+0x3f2>
    36fc:	2204      	movs	r2, #4
    36fe:	69fb      	ldr	r3, [r7, #28]
    3700:	421a      	tst	r2, r3
    3702:	d1fc      	bne.n	36fe <_i2c_m_sync_transfer+0x292>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
    3704:	687a      	ldr	r2, [r7, #4]
    3706:	23c0      	movs	r3, #192	; 0xc0
    3708:	029b      	lsls	r3, r3, #10
    370a:	4313      	orrs	r3, r2
    370c:	607b      	str	r3, [r7, #4]
    370e:	e7db      	b.n	36c8 <_i2c_m_sync_transfer+0x25c>
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
    3710:	2302      	movs	r3, #2
    3712:	763b      	strb	r3, [r7, #24]
			return I2C_NACK;
    3714:	2002      	movs	r0, #2
    3716:	4240      	negs	r0, r0
    3718:	e734      	b.n	3584 <_i2c_m_sync_transfer+0x118>
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    371a:	2204      	movs	r2, #4
    371c:	69e3      	ldr	r3, [r4, #28]
    371e:	421a      	tst	r2, r3
    3720:	d1fc      	bne.n	371c <_i2c_m_sync_transfer+0x2b0>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
    3722:	6862      	ldr	r2, [r4, #4]
    3724:	23c0      	movs	r3, #192	; 0xc0
    3726:	029b      	lsls	r3, r3, #10
    3728:	4313      	orrs	r3, r2
    372a:	6063      	str	r3, [r4, #4]
    372c:	e0ad      	b.n	388a <_i2c_m_sync_transfer+0x41e>
			if (status & SERCOM_I2CM_STATUS_RXNACK) {
    372e:	423a      	tst	r2, r7
    3730:	d130      	bne.n	3794 <_i2c_m_sync_transfer+0x328>
			if (msg->flags & I2C_M_TEN) {
    3732:	886b      	ldrh	r3, [r5, #2]
    3734:	055b      	lsls	r3, r3, #21
    3736:	d548      	bpl.n	37ca <_i2c_m_sync_transfer+0x35e>
				                              ((((msg->addr & TEN_ADDR_MASK) >> 8) | TEN_ADDR_FRAME) << 1) | I2C_M_RD
    3738:	8828      	ldrh	r0, [r5, #0]
    373a:	09c0      	lsrs	r0, r0, #7
				                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    373c:	2706      	movs	r7, #6
    373e:	4007      	ands	r7, r0
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    3740:	69e3      	ldr	r3, [r4, #28]
    3742:	421a      	tst	r2, r3
    3744:	d1fc      	bne.n	3740 <_i2c_m_sync_transfer+0x2d4>
	return ((Sercom *)hw)->I2CM.ADDR.reg;
    3746:	6a60      	ldr	r0, [r4, #36]	; 0x24
    3748:	2380      	movs	r3, #128	; 0x80
    374a:	01db      	lsls	r3, r3, #7
    374c:	4018      	ands	r0, r3
				hri_sercomi2cm_write_ADDR_reg(hw,
    374e:	23f1      	movs	r3, #241	; 0xf1
    3750:	4318      	orrs	r0, r3
    3752:	4338      	orrs	r0, r7
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    3754:	69e3      	ldr	r3, [r4, #28]
    3756:	421a      	tst	r2, r3
    3758:	d1fc      	bne.n	3754 <_i2c_m_sync_transfer+0x2e8>
	((Sercom *)hw)->I2CM.ADDR.reg = data;
    375a:	6260      	str	r0, [r4, #36]	; 0x24
				msg->flags &= ~I2C_M_TEN;
    375c:	886b      	ldrh	r3, [r5, #2]
    375e:	480c      	ldr	r0, [pc, #48]	; (3790 <_i2c_m_sync_transfer+0x324>)
    3760:	4003      	ands	r3, r0
    3762:	806b      	strh	r3, [r5, #2]
				return I2C_OK;
    3764:	2000      	movs	r0, #0
    3766:	e07a      	b.n	385e <_i2c_m_sync_transfer+0x3f2>
    3768:	00009c38 	.word	0x00009c38
    376c:	000005ca 	.word	0x000005ca
    3770:	00002fbd 	.word	0x00002fbd
    3774:	000005cb 	.word	0x000005cb
    3778:	000005cc 	.word	0x000005cc
    377c:	0000059f 	.word	0x0000059f
    3780:	fffbffff 	.word	0xfffbffff
    3784:	000007fe 	.word	0x000007fe
    3788:	0000ffff 	.word	0x0000ffff
    378c:	fffffeff 	.word	0xfffffeff
    3790:	fffffbff 	.word	0xfffffbff
				if (msg->len > 0) {
    3794:	686b      	ldr	r3, [r5, #4]
    3796:	2b00      	cmp	r3, #0
    3798:	dd04      	ble.n	37a4 <_i2c_m_sync_transfer+0x338>
					msg->flags |= I2C_M_FAIL;
    379a:	886b      	ldrh	r3, [r5, #2]
    379c:	2080      	movs	r0, #128	; 0x80
    379e:	0140      	lsls	r0, r0, #5
    37a0:	4303      	orrs	r3, r0
    37a2:	806b      	strh	r3, [r5, #2]
				if (msg->flags & I2C_M_STOP) {
    37a4:	886b      	ldrh	r3, [r5, #2]
    37a6:	b21b      	sxth	r3, r3
    37a8:	2b00      	cmp	r3, #0
    37aa:	db05      	blt.n	37b8 <_i2c_m_sync_transfer+0x34c>
				msg->flags &= ~I2C_M_BUSY;
    37ac:	886b      	ldrh	r3, [r5, #2]
    37ae:	4863      	ldr	r0, [pc, #396]	; (393c <_i2c_m_sync_transfer+0x4d0>)
    37b0:	4003      	ands	r3, r0
    37b2:	806b      	strh	r3, [r5, #2]
				return I2C_NACK;
    37b4:	30ff      	adds	r0, #255	; 0xff
    37b6:	e052      	b.n	385e <_i2c_m_sync_transfer+0x3f2>
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    37b8:	69e3      	ldr	r3, [r4, #28]
    37ba:	421a      	tst	r2, r3
    37bc:	d1fc      	bne.n	37b8 <_i2c_m_sync_transfer+0x34c>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
    37be:	6860      	ldr	r0, [r4, #4]
    37c0:	23c0      	movs	r3, #192	; 0xc0
    37c2:	029b      	lsls	r3, r3, #10
    37c4:	4303      	orrs	r3, r0
    37c6:	6063      	str	r3, [r4, #4]
    37c8:	e7f0      	b.n	37ac <_i2c_m_sync_transfer+0x340>
			if (msg->len == 0) {
    37ca:	686b      	ldr	r3, [r5, #4]
    37cc:	2b00      	cmp	r3, #0
    37ce:	d112      	bne.n	37f6 <_i2c_m_sync_transfer+0x38a>
				if (msg->flags & I2C_M_STOP) {
    37d0:	886b      	ldrh	r3, [r5, #2]
    37d2:	b21b      	sxth	r3, r3
    37d4:	2b00      	cmp	r3, #0
    37d6:	db05      	blt.n	37e4 <_i2c_m_sync_transfer+0x378>
				msg->flags &= ~I2C_M_BUSY;
    37d8:	886b      	ldrh	r3, [r5, #2]
    37da:	4858      	ldr	r0, [pc, #352]	; (393c <_i2c_m_sync_transfer+0x4d0>)
    37dc:	4003      	ands	r3, r0
    37de:	806b      	strh	r3, [r5, #2]
			return I2C_OK;
    37e0:	2000      	movs	r0, #0
    37e2:	e03c      	b.n	385e <_i2c_m_sync_transfer+0x3f2>
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    37e4:	69e3      	ldr	r3, [r4, #28]
    37e6:	421a      	tst	r2, r3
    37e8:	d1fc      	bne.n	37e4 <_i2c_m_sync_transfer+0x378>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
    37ea:	6860      	ldr	r0, [r4, #4]
    37ec:	23c0      	movs	r3, #192	; 0xc0
    37ee:	029b      	lsls	r3, r3, #10
    37f0:	4303      	orrs	r3, r0
    37f2:	6063      	str	r3, [r4, #4]
    37f4:	e7f0      	b.n	37d8 <_i2c_m_sync_transfer+0x36c>
				hri_sercomi2cm_write_DATA_reg(hw, *msg->buffer);
    37f6:	68ab      	ldr	r3, [r5, #8]
    37f8:	7818      	ldrb	r0, [r3, #0]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    37fa:	69e3      	ldr	r3, [r4, #28]
    37fc:	421a      	tst	r2, r3
    37fe:	d1fc      	bne.n	37fa <_i2c_m_sync_transfer+0x38e>
	((Sercom *)hw)->I2CM.DATA.reg = data;
    3800:	2328      	movs	r3, #40	; 0x28
    3802:	54e0      	strb	r0, [r4, r3]
				msg->buffer++;
    3804:	68ab      	ldr	r3, [r5, #8]
    3806:	3301      	adds	r3, #1
    3808:	60ab      	str	r3, [r5, #8]
				msg->len--;
    380a:	686b      	ldr	r3, [r5, #4]
    380c:	3b01      	subs	r3, #1
    380e:	606b      	str	r3, [r5, #4]
			return I2C_OK;
    3810:	2000      	movs	r0, #0
    3812:	e024      	b.n	385e <_i2c_m_sync_transfer+0x3f2>
	return I2C_OK;
    3814:	2000      	movs	r0, #0
	} else if (flags & SB_FLAG) {
    3816:	421e      	tst	r6, r3
    3818:	d021      	beq.n	385e <_i2c_m_sync_transfer+0x3f2>
		if ((msg->len) && !(status & SERCOM_I2CM_STATUS_RXNACK)) {
    381a:	686b      	ldr	r3, [r5, #4]
    381c:	2b00      	cmp	r3, #0
    381e:	d044      	beq.n	38aa <_i2c_m_sync_transfer+0x43e>
    3820:	423a      	tst	r2, r7
    3822:	d142      	bne.n	38aa <_i2c_m_sync_transfer+0x43e>
	tmp = (tmp & SERCOM_I2CM_CTRLA_SCLSM) >> SERCOM_I2CM_CTRLA_SCLSM_Pos;
    3824:	4660      	mov	r0, ip
    3826:	0ec0      	lsrs	r0, r0, #27
    3828:	464f      	mov	r7, r9
    382a:	4038      	ands	r0, r7
			msg->len--;
    382c:	3b01      	subs	r3, #1
    382e:	606b      	str	r3, [r5, #4]
			if ((msg->len == 0 && !sclsm) || (msg->len == 1 && sclsm)) {
    3830:	2b00      	cmp	r3, #0
    3832:	d172      	bne.n	391a <_i2c_m_sync_transfer+0x4ae>
    3834:	2800      	cmp	r0, #0
    3836:	d074      	beq.n	3922 <_i2c_m_sync_transfer+0x4b6>
				if (msg->flags & I2C_M_STOP) {
    3838:	886b      	ldrh	r3, [r5, #2]
    383a:	b21b      	sxth	r3, r3
    383c:	2b00      	cmp	r3, #0
    383e:	db2b      	blt.n	3898 <_i2c_m_sync_transfer+0x42c>
				msg->flags &= ~I2C_M_BUSY;
    3840:	886b      	ldrh	r3, [r5, #2]
    3842:	483e      	ldr	r0, [pc, #248]	; (393c <_i2c_m_sync_transfer+0x4d0>)
    3844:	4003      	ands	r3, r0
    3846:	806b      	strh	r3, [r5, #2]
			*msg->buffer++ = hri_sercomi2cm_read_DATA_reg(hw);
    3848:	68a8      	ldr	r0, [r5, #8]
    384a:	1c43      	adds	r3, r0, #1
    384c:	60ab      	str	r3, [r5, #8]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    384e:	69e3      	ldr	r3, [r4, #28]
    3850:	421a      	tst	r2, r3
    3852:	d1fc      	bne.n	384e <_i2c_m_sync_transfer+0x3e2>
	return ((Sercom *)hw)->I2CM.DATA.reg;
    3854:	2328      	movs	r3, #40	; 0x28
    3856:	5ce3      	ldrb	r3, [r4, r3]
    3858:	7003      	strb	r3, [r0, #0]
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
    385a:	7626      	strb	r6, [r4, #24]
	return I2C_OK;
    385c:	2000      	movs	r0, #0
	while (i2c_dev->service.msg.flags & I2C_M_BUSY) {
    385e:	886b      	ldrh	r3, [r5, #2]
    3860:	465f      	mov	r7, fp
    3862:	423b      	tst	r3, r7
    3864:	d100      	bne.n	3868 <_i2c_m_sync_transfer+0x3fc>
    3866:	e691      	b.n	358c <_i2c_m_sync_transfer+0x120>
	void *   hw      = i2c_dev->hw;
    3868:	692f      	ldr	r7, [r5, #16]
	return ((Sercom *)hw)->I2CM.INTFLAG.reg;
    386a:	7e3b      	ldrb	r3, [r7, #24]
    386c:	b2db      	uxtb	r3, r3
    386e:	4834      	ldr	r0, [pc, #208]	; (3940 <_i2c_m_sync_transfer+0x4d4>)
	} while (!(*flags & MB_FLAG) && !(*flags & SB_FLAG));
    3870:	4219      	tst	r1, r3
    3872:	d135      	bne.n	38e0 <_i2c_m_sync_transfer+0x474>
    3874:	7e3b      	ldrb	r3, [r7, #24]
    3876:	b2db      	uxtb	r3, r3
    3878:	3801      	subs	r0, #1
		if (timeout-- == 0) {
    387a:	2800      	cmp	r0, #0
    387c:	d1f8      	bne.n	3870 <_i2c_m_sync_transfer+0x404>
			if (msg->flags & I2C_M_STOP) {
    387e:	4643      	mov	r3, r8
    3880:	885b      	ldrh	r3, [r3, #2]
    3882:	b21b      	sxth	r3, r3
    3884:	2b00      	cmp	r3, #0
    3886:	da00      	bge.n	388a <_i2c_m_sync_transfer+0x41e>
    3888:	e747      	b.n	371a <_i2c_m_sync_transfer+0x2ae>
			i2c_dev->service.msg.flags &= ~I2C_M_BUSY;
    388a:	886b      	ldrh	r3, [r5, #2]
    388c:	4a2b      	ldr	r2, [pc, #172]	; (393c <_i2c_m_sync_transfer+0x4d0>)
    388e:	4013      	ands	r3, r2
    3890:	806b      	strh	r3, [r5, #2]
			return I2C_ERR_BUS;
    3892:	2005      	movs	r0, #5
    3894:	4240      	negs	r0, r0
			return ret;
    3896:	e679      	b.n	358c <_i2c_m_sync_transfer+0x120>
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    3898:	69e3      	ldr	r3, [r4, #28]
    389a:	421a      	tst	r2, r3
    389c:	d1fc      	bne.n	3898 <_i2c_m_sync_transfer+0x42c>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
    389e:	6860      	ldr	r0, [r4, #4]
    38a0:	23c0      	movs	r3, #192	; 0xc0
    38a2:	029b      	lsls	r3, r3, #10
    38a4:	4303      	orrs	r3, r0
    38a6:	6063      	str	r3, [r4, #4]
    38a8:	e7ca      	b.n	3840 <_i2c_m_sync_transfer+0x3d4>
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
    38aa:	7626      	strb	r6, [r4, #24]
			return I2C_NACK;
    38ac:	2002      	movs	r0, #2
    38ae:	4240      	negs	r0, r0
    38b0:	e7d5      	b.n	385e <_i2c_m_sync_transfer+0x3f2>
		return I2C_ERR_BUSY;
    38b2:	2006      	movs	r0, #6
    38b4:	4240      	negs	r0, r0
    38b6:	e669      	b.n	358c <_i2c_m_sync_transfer+0x120>
			if ((msg->len == 0 && !sclsm) || (msg->len == 1 && sclsm)) {
    38b8:	2b01      	cmp	r3, #1
    38ba:	d000      	beq.n	38be <_i2c_m_sync_transfer+0x452>
    38bc:	e708      	b.n	36d0 <_i2c_m_sync_transfer+0x264>
    38be:	2e00      	cmp	r6, #0
    38c0:	d100      	bne.n	38c4 <_i2c_m_sync_transfer+0x458>
    38c2:	e705      	b.n	36d0 <_i2c_m_sync_transfer+0x264>
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    38c4:	2204      	movs	r2, #4
    38c6:	69fb      	ldr	r3, [r7, #28]
    38c8:	421a      	tst	r2, r3
    38ca:	d1fc      	bne.n	38c6 <_i2c_m_sync_transfer+0x45a>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    38cc:	687a      	ldr	r2, [r7, #4]
    38ce:	2380      	movs	r3, #128	; 0x80
    38d0:	02db      	lsls	r3, r3, #11
    38d2:	4313      	orrs	r3, r2
    38d4:	607b      	str	r3, [r7, #4]
			if (msg->len == 0) {
    38d6:	686b      	ldr	r3, [r5, #4]
    38d8:	2b00      	cmp	r3, #0
    38da:	d100      	bne.n	38de <_i2c_m_sync_transfer+0x472>
    38dc:	e6f0      	b.n	36c0 <_i2c_m_sync_transfer+0x254>
    38de:	e6f7      	b.n	36d0 <_i2c_m_sync_transfer+0x264>
	tmp = ((Sercom *)hw)->I2CM.CTRLA.reg;
    38e0:	6820      	ldr	r0, [r4, #0]
    38e2:	4684      	mov	ip, r0
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    38e4:	69e0      	ldr	r0, [r4, #28]
    38e6:	4202      	tst	r2, r0
    38e8:	d1fc      	bne.n	38e4 <_i2c_m_sync_transfer+0x478>
	return ((Sercom *)hw)->I2CM.STATUS.reg;
    38ea:	8b67      	ldrh	r7, [r4, #26]
    38ec:	b2bf      	uxth	r7, r7
	if (flags & MB_FLAG) {
    38ee:	4648      	mov	r0, r9
    38f0:	4218      	tst	r0, r3
    38f2:	d08f      	beq.n	3814 <_i2c_m_sync_transfer+0x3a8>
		if (status & SERCOM_I2CM_STATUS_ARBLOST) {
    38f4:	423e      	tst	r6, r7
    38f6:	d100      	bne.n	38fa <_i2c_m_sync_transfer+0x48e>
    38f8:	e719      	b.n	372e <_i2c_m_sync_transfer+0x2c2>
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_MB;
    38fa:	7620      	strb	r0, [r4, #24]
			msg->flags |= I2C_M_FAIL;
    38fc:	886b      	ldrh	r3, [r5, #2]
    38fe:	2080      	movs	r0, #128	; 0x80
    3900:	0140      	lsls	r0, r0, #5
    3902:	4303      	orrs	r3, r0
    3904:	806b      	strh	r3, [r5, #2]
			msg->flags &= ~I2C_M_BUSY;
    3906:	886b      	ldrh	r3, [r5, #2]
    3908:	480c      	ldr	r0, [pc, #48]	; (393c <_i2c_m_sync_transfer+0x4d0>)
    390a:	4003      	ands	r3, r0
    390c:	806b      	strh	r3, [r5, #2]
			if (status & SERCOM_I2CM_STATUS_BUSERR) {
    390e:	464b      	mov	r3, r9
    3910:	401f      	ands	r7, r3
			return I2C_ERR_BAD_ADDRESS;
    3912:	4278      	negs	r0, r7
    3914:	4178      	adcs	r0, r7
    3916:	3805      	subs	r0, #5
    3918:	e7a1      	b.n	385e <_i2c_m_sync_transfer+0x3f2>
			if ((msg->len == 0 && !sclsm) || (msg->len == 1 && sclsm)) {
    391a:	2b01      	cmp	r3, #1
    391c:	d194      	bne.n	3848 <_i2c_m_sync_transfer+0x3dc>
    391e:	2800      	cmp	r0, #0
    3920:	d092      	beq.n	3848 <_i2c_m_sync_transfer+0x3dc>
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    3922:	69e3      	ldr	r3, [r4, #28]
    3924:	421a      	tst	r2, r3
    3926:	d1fc      	bne.n	3922 <_i2c_m_sync_transfer+0x4b6>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    3928:	6863      	ldr	r3, [r4, #4]
    392a:	2080      	movs	r0, #128	; 0x80
    392c:	02c0      	lsls	r0, r0, #11
    392e:	4303      	orrs	r3, r0
    3930:	6063      	str	r3, [r4, #4]
			if (msg->len == 0) {
    3932:	686b      	ldr	r3, [r5, #4]
    3934:	2b00      	cmp	r3, #0
    3936:	d100      	bne.n	393a <_i2c_m_sync_transfer+0x4ce>
    3938:	e77e      	b.n	3838 <_i2c_m_sync_transfer+0x3cc>
    393a:	e785      	b.n	3848 <_i2c_m_sync_transfer+0x3dc>
    393c:	fffffeff 	.word	0xfffffeff
    3940:	0000ffff 	.word	0x0000ffff

00003944 <_spi_m_sync_init>:

	return NULL;
}

int32_t _spi_m_sync_init(struct _spi_m_sync_dev *dev, void *const hw)
{
    3944:	b570      	push	{r4, r5, r6, lr}
    3946:	0006      	movs	r6, r0
    3948:	000c      	movs	r4, r1
	return ((uint32_t)hw - (uint32_t)SERCOM0) >> 10;
    394a:	4b4d      	ldr	r3, [pc, #308]	; (3a80 <_spi_m_sync_init+0x13c>)
    394c:	18cb      	adds	r3, r1, r3
    394e:	0a9b      	lsrs	r3, r3, #10
		if (sercomspi_regs[i].n == n) {
    3950:	b2db      	uxtb	r3, r3
    3952:	2b04      	cmp	r3, #4
    3954:	d008      	beq.n	3968 <_spi_m_sync_init+0x24>
	const struct sercomspi_regs_cfg *regs = _spi_get_regs((uint32_t)hw);

	ASSERT(dev && hw);
    3956:	2800      	cmp	r0, #0
    3958:	d100      	bne.n	395c <_spi_m_sync_init+0x18>
    395a:	e080      	b.n	3a5e <_spi_m_sync_init+0x11a>
    395c:	2900      	cmp	r1, #0
    395e:	d000      	beq.n	3962 <_spi_m_sync_init+0x1e>
    3960:	e085      	b.n	3a6e <_spi_m_sync_init+0x12a>
	return NULL;
    3962:	2500      	movs	r5, #0
	ASSERT(dev && hw);
    3964:	2000      	movs	r0, #0
    3966:	e006      	b.n	3976 <_spi_m_sync_init+0x32>
    3968:	2800      	cmp	r0, #0
    396a:	d050      	beq.n	3a0e <_spi_m_sync_init+0xca>
    396c:	2900      	cmp	r1, #0
    396e:	d04b      	beq.n	3a08 <_spi_m_sync_init+0xc4>
			return &sercomspi_regs[i];
    3970:	4d44      	ldr	r5, [pc, #272]	; (3a84 <_spi_m_sync_init+0x140>)
    3972:	3518      	adds	r5, #24
	ASSERT(dev && hw);
    3974:	2001      	movs	r0, #1
    3976:	4a44      	ldr	r2, [pc, #272]	; (3a88 <_spi_m_sync_init+0x144>)
    3978:	4944      	ldr	r1, [pc, #272]	; (3a8c <_spi_m_sync_init+0x148>)
    397a:	4b45      	ldr	r3, [pc, #276]	; (3a90 <_spi_m_sync_init+0x14c>)
    397c:	4798      	blx	r3

	if (regs == NULL) {
    397e:	2d00      	cmp	r5, #0
    3980:	d067      	beq.n	3a52 <_spi_m_sync_init+0x10e>
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    3982:	2201      	movs	r2, #1
    3984:	69e3      	ldr	r3, [r4, #28]
    3986:	421a      	tst	r2, r3
    3988:	d1fc      	bne.n	3984 <_spi_m_sync_init+0x40>
    398a:	2203      	movs	r2, #3
    398c:	69e3      	ldr	r3, [r4, #28]
    398e:	421a      	tst	r2, r3
    3990:	d1fc      	bne.n	398c <_spi_m_sync_init+0x48>
	tmp = ((Sercom *)hw)->SPI.CTRLA.reg;
    3992:	6823      	ldr	r3, [r4, #0]
		return ERR_INVALID_ARG;
	}

	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST);
	if (hri_sercomspi_get_CTRLA_ENABLE_bit(hw)) {
    3994:	079b      	lsls	r3, r3, #30
    3996:	d45f      	bmi.n	3a58 <_spi_m_sync_init+0x114>
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    3998:	2201      	movs	r2, #1
    399a:	69e3      	ldr	r3, [r4, #28]
    399c:	421a      	tst	r2, r3
    399e:	d1fc      	bne.n	399a <_spi_m_sync_init+0x56>
	((Sercom *)hw)->SPI.CTRLA.reg |= SERCOM_SPI_CTRLA_SWRST;
    39a0:	6823      	ldr	r3, [r4, #0]
    39a2:	2201      	movs	r2, #1
    39a4:	4313      	orrs	r3, r2
    39a6:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    39a8:	69e3      	ldr	r3, [r4, #28]
    39aa:	421a      	tst	r2, r3
    39ac:	d1fc      	bne.n	39a8 <_spi_m_sync_init+0x64>
		return ERR_DENIED;
	}
	hri_sercomspi_set_CTRLA_SWRST_bit(hw);
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST);
	dev->prvt = hw;
    39ae:	6034      	str	r4, [r6, #0]

	if ((regs->ctrla & SERCOM_SPI_CTRLA_MODE_Msk) == SERCOM_USART_CTRLA_MODE_SPI_SLAVE) {
    39b0:	231c      	movs	r3, #28
    39b2:	682a      	ldr	r2, [r5, #0]
    39b4:	4013      	ands	r3, r2
    39b6:	2b08      	cmp	r3, #8
    39b8:	d02c      	beq.n	3a14 <_spi_m_sync_init+0xd0>
	ASSERT(hw && regs);
    39ba:	0020      	movs	r0, r4
    39bc:	1e43      	subs	r3, r0, #1
    39be:	4198      	sbcs	r0, r3
    39c0:	b2c0      	uxtb	r0, r0
    39c2:	4a34      	ldr	r2, [pc, #208]	; (3a94 <_spi_m_sync_init+0x150>)
    39c4:	4931      	ldr	r1, [pc, #196]	; (3a8c <_spi_m_sync_init+0x148>)
    39c6:	4b32      	ldr	r3, [pc, #200]	; (3a90 <_spi_m_sync_init+0x14c>)
    39c8:	4798      	blx	r3
	hri_sercomspi_write_CTRLA_reg(
    39ca:	4933      	ldr	r1, [pc, #204]	; (3a98 <_spi_m_sync_init+0x154>)
    39cc:	682b      	ldr	r3, [r5, #0]
    39ce:	4019      	ands	r1, r3
    39d0:	2203      	movs	r2, #3
    39d2:	69e3      	ldr	r3, [r4, #28]
    39d4:	421a      	tst	r2, r3
    39d6:	d1fc      	bne.n	39d2 <_spi_m_sync_init+0x8e>
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    39d8:	6021      	str	r1, [r4, #0]
	        | (SERCOM_SPI_CTRLB_RXEN));
    39da:	4a30      	ldr	r2, [pc, #192]	; (3a9c <_spi_m_sync_init+0x158>)
    39dc:	686b      	ldr	r3, [r5, #4]
    39de:	401a      	ands	r2, r3
	hri_sercomspi_write_CTRLB_reg(
    39e0:	2380      	movs	r3, #128	; 0x80
    39e2:	029b      	lsls	r3, r3, #10
    39e4:	4313      	orrs	r3, r2
	((Sercom *)hw)->SPI.CTRLB.reg = data;
    39e6:	6063      	str	r3, [r4, #4]
	hri_sercomspi_write_BAUD_reg(hw, regs->baud);
    39e8:	7b2b      	ldrb	r3, [r5, #12]
	((Sercom *)hw)->SPI.BAUD.reg = data;
    39ea:	7323      	strb	r3, [r4, #12]
	hri_sercomspi_write_DBGCTRL_reg(hw, regs->dbgctrl);
    39ec:	7b6a      	ldrb	r2, [r5, #13]
	((Sercom *)hw)->SPI.DBGCTRL.reg = data;
    39ee:	2330      	movs	r3, #48	; 0x30
    39f0:	54e2      	strb	r2, [r4, r3]
	} else {
		_spi_load_regs_master(hw, regs);
	}

	/* Load character size from default hardware configuration */
	dev->char_size = ((regs->ctrlb & SERCOM_SPI_CTRLB_CHSIZE_Msk) == 0) ? 1 : 2;
    39f2:	2307      	movs	r3, #7
    39f4:	686a      	ldr	r2, [r5, #4]
    39f6:	4013      	ands	r3, r2
    39f8:	1e5a      	subs	r2, r3, #1
    39fa:	4193      	sbcs	r3, r2
    39fc:	3301      	adds	r3, #1
    39fe:	7133      	strb	r3, [r6, #4]

	dev->dummy_byte = regs->dummy_byte;
    3a00:	89eb      	ldrh	r3, [r5, #14]
    3a02:	80f3      	strh	r3, [r6, #6]

	return ERR_NONE;
    3a04:	2000      	movs	r0, #0
}
    3a06:	bd70      	pop	{r4, r5, r6, pc}
			return &sercomspi_regs[i];
    3a08:	4d1e      	ldr	r5, [pc, #120]	; (3a84 <_spi_m_sync_init+0x140>)
    3a0a:	3518      	adds	r5, #24
    3a0c:	e7aa      	b.n	3964 <_spi_m_sync_init+0x20>
    3a0e:	4d1d      	ldr	r5, [pc, #116]	; (3a84 <_spi_m_sync_init+0x140>)
    3a10:	3518      	adds	r5, #24
    3a12:	e7a7      	b.n	3964 <_spi_m_sync_init+0x20>
	ASSERT(hw && regs);
    3a14:	0020      	movs	r0, r4
    3a16:	1e43      	subs	r3, r0, #1
    3a18:	4198      	sbcs	r0, r3
    3a1a:	b2c0      	uxtb	r0, r0
    3a1c:	4a20      	ldr	r2, [pc, #128]	; (3aa0 <_spi_m_sync_init+0x15c>)
    3a1e:	491b      	ldr	r1, [pc, #108]	; (3a8c <_spi_m_sync_init+0x148>)
    3a20:	4b1b      	ldr	r3, [pc, #108]	; (3a90 <_spi_m_sync_init+0x14c>)
    3a22:	4798      	blx	r3
	hri_sercomspi_write_CTRLA_reg(
    3a24:	491c      	ldr	r1, [pc, #112]	; (3a98 <_spi_m_sync_init+0x154>)
    3a26:	682b      	ldr	r3, [r5, #0]
    3a28:	4019      	ands	r1, r3
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    3a2a:	2203      	movs	r2, #3
    3a2c:	69e3      	ldr	r3, [r4, #28]
    3a2e:	421a      	tst	r2, r3
    3a30:	d1fc      	bne.n	3a2c <_spi_m_sync_init+0xe8>
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    3a32:	6021      	str	r1, [r4, #0]
	                                  | (SERCOM_SPI_CTRLB_RXEN | SERCOM_SPI_CTRLB_SSDE | SERCOM_SPI_CTRLB_PLOADEN));
    3a34:	4a1b      	ldr	r2, [pc, #108]	; (3aa4 <_spi_m_sync_init+0x160>)
    3a36:	686b      	ldr	r3, [r5, #4]
    3a38:	401a      	ands	r2, r3
	hri_sercomspi_write_CTRLB_reg(hw,
    3a3a:	4b1b      	ldr	r3, [pc, #108]	; (3aa8 <_spi_m_sync_init+0x164>)
    3a3c:	4313      	orrs	r3, r2
	((Sercom *)hw)->SPI.CTRLB.reg = data;
    3a3e:	6063      	str	r3, [r4, #4]
	((Sercom *)hw)->SPI.ADDR.reg = data;
    3a40:	68ab      	ldr	r3, [r5, #8]
    3a42:	6263      	str	r3, [r4, #36]	; 0x24
	hri_sercomspi_write_DBGCTRL_reg(hw, regs->dbgctrl);
    3a44:	7b6a      	ldrb	r2, [r5, #13]
	((Sercom *)hw)->SPI.DBGCTRL.reg = data;
    3a46:	2330      	movs	r3, #48	; 0x30
    3a48:	54e2      	strb	r2, [r4, r3]
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    3a4a:	69e3      	ldr	r3, [r4, #28]
	while (hri_sercomspi_is_syncing(hw, 0xFFFFFFFF))
    3a4c:	2b00      	cmp	r3, #0
    3a4e:	d1fc      	bne.n	3a4a <_spi_m_sync_init+0x106>
    3a50:	e7cf      	b.n	39f2 <_spi_m_sync_init+0xae>
		return ERR_INVALID_ARG;
    3a52:	200d      	movs	r0, #13
    3a54:	4240      	negs	r0, r0
    3a56:	e7d6      	b.n	3a06 <_spi_m_sync_init+0xc2>
		return ERR_DENIED;
    3a58:	2011      	movs	r0, #17
    3a5a:	4240      	negs	r0, r0
    3a5c:	e7d3      	b.n	3a06 <_spi_m_sync_init+0xc2>
	ASSERT(dev && hw);
    3a5e:	4a0a      	ldr	r2, [pc, #40]	; (3a88 <_spi_m_sync_init+0x144>)
    3a60:	490a      	ldr	r1, [pc, #40]	; (3a8c <_spi_m_sync_init+0x148>)
    3a62:	2000      	movs	r0, #0
    3a64:	4b0a      	ldr	r3, [pc, #40]	; (3a90 <_spi_m_sync_init+0x14c>)
    3a66:	4798      	blx	r3
		return ERR_INVALID_ARG;
    3a68:	200d      	movs	r0, #13
    3a6a:	4240      	negs	r0, r0
    3a6c:	e7cb      	b.n	3a06 <_spi_m_sync_init+0xc2>
	ASSERT(dev && hw);
    3a6e:	4a06      	ldr	r2, [pc, #24]	; (3a88 <_spi_m_sync_init+0x144>)
    3a70:	4906      	ldr	r1, [pc, #24]	; (3a8c <_spi_m_sync_init+0x148>)
    3a72:	2001      	movs	r0, #1
    3a74:	4b06      	ldr	r3, [pc, #24]	; (3a90 <_spi_m_sync_init+0x14c>)
    3a76:	4798      	blx	r3
		return ERR_INVALID_ARG;
    3a78:	200d      	movs	r0, #13
    3a7a:	4240      	negs	r0, r0
    3a7c:	e7c3      	b.n	3a06 <_spi_m_sync_init+0xc2>
    3a7e:	46c0      	nop			; (mov r8, r8)
    3a80:	bdfff800 	.word	0xbdfff800
    3a84:	00009c0c 	.word	0x00009c0c
    3a88:	00000915 	.word	0x00000915
    3a8c:	00009c38 	.word	0x00009c38
    3a90:	00002fbd 	.word	0x00002fbd
    3a94:	000008df 	.word	0x000008df
    3a98:	fffffefc 	.word	0xfffffefc
    3a9c:	fffd1dbf 	.word	0xfffd1dbf
    3aa0:	000008f3 	.word	0x000008f3
    3aa4:	fffdddbf 	.word	0xfffdddbf
    3aa8:	00020240 	.word	0x00020240

00003aac <_spi_m_sync_trans>:

	return ERR_NONE;
}

int32_t _spi_m_sync_trans(struct _spi_m_sync_dev *dev, const struct spi_msg *msg)
{
    3aac:	b5f0      	push	{r4, r5, r6, r7, lr}
    3aae:	46de      	mov	lr, fp
    3ab0:	4657      	mov	r7, sl
    3ab2:	464e      	mov	r6, r9
    3ab4:	4645      	mov	r5, r8
    3ab6:	b5e0      	push	{r5, r6, r7, lr}
    3ab8:	b083      	sub	sp, #12
    3aba:	4681      	mov	r9, r0
    3abc:	000e      	movs	r6, r1
	void *                 hw   = dev->prvt;
    3abe:	6804      	ldr	r4, [r0, #0]
	int32_t                rc   = 0;
	struct _spi_trans_ctrl ctrl = {msg->txbuf, msg->rxbuf, 0, 0, dev->char_size};
    3ac0:	680b      	ldr	r3, [r1, #0]
    3ac2:	4698      	mov	r8, r3
    3ac4:	684d      	ldr	r5, [r1, #4]
    3ac6:	7903      	ldrb	r3, [r0, #4]
    3ac8:	9301      	str	r3, [sp, #4]

	ASSERT(dev && hw);
    3aca:	2800      	cmp	r0, #0
    3acc:	d015      	beq.n	3afa <_spi_m_sync_trans+0x4e>
    3ace:	0020      	movs	r0, r4
    3ad0:	1e43      	subs	r3, r0, #1
    3ad2:	4198      	sbcs	r0, r3
    3ad4:	b2c0      	uxtb	r0, r0
    3ad6:	4a36      	ldr	r2, [pc, #216]	; (3bb0 <_spi_m_sync_trans+0x104>)
    3ad8:	4936      	ldr	r1, [pc, #216]	; (3bb4 <_spi_m_sync_trans+0x108>)
    3ada:	4b37      	ldr	r3, [pc, #220]	; (3bb8 <_spi_m_sync_trans+0x10c>)
    3adc:	4798      	blx	r3
    3ade:	69e3      	ldr	r3, [r4, #28]

	/* If settings are not applied (pending), we can not go on */
	if (hri_sercomspi_is_syncing(
    3ae0:	075b      	lsls	r3, r3, #29
    3ae2:	d13f      	bne.n	3b64 <_spi_m_sync_trans+0xb8>
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    3ae4:	2303      	movs	r3, #3
    3ae6:	69e0      	ldr	r0, [r4, #28]
    3ae8:	4018      	ands	r0, r3
    3aea:	d1fc      	bne.n	3ae6 <_spi_m_sync_trans+0x3a>
	tmp = ((Sercom *)hw)->SPI.CTRLA.reg;
    3aec:	6823      	ldr	r3, [r4, #0]
	        hw, (SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE | SERCOM_SPI_SYNCBUSY_CTRLB))) {
		return ERR_BUSY;
	}

	/* SPI must be enabled to start synchronous transfer */
	if (!hri_sercomspi_get_CTRLA_ENABLE_bit(hw)) {
    3aee:	079b      	lsls	r3, r3, #30
    3af0:	d53b      	bpl.n	3b6a <_spi_m_sync_trans+0xbe>
    3af2:	0002      	movs	r2, r0
	if (!(SERCOM_SPI_INTFLAG_DRE & iflag)) {
    3af4:	2301      	movs	r3, #1
    3af6:	469c      	mov	ip, r3
    3af8:	e009      	b.n	3b0e <_spi_m_sync_trans+0x62>
    3afa:	2000      	movs	r0, #0
    3afc:	e7eb      	b.n	3ad6 <_spi_m_sync_trans+0x2a>
		*ctrl->rxbuf++ = (uint8_t)data;
    3afe:	3501      	adds	r5, #1
	ctrl->rxcnt++;
    3b00:	3201      	adds	r2, #1
	if (SERCOM_SPI_INTFLAG_ERROR & iflag) {
    3b02:	b25b      	sxtb	r3, r3
    3b04:	2b00      	cmp	r3, #0
    3b06:	db16      	blt.n	3b36 <_spi_m_sync_trans+0x8a>
		rc = _spi_err_check(iflag, hw);

		if (rc < 0) {
			break;
		}
		if (ctrl.txcnt >= msg->size && ctrl.rxcnt >= msg->size) {
    3b08:	68b3      	ldr	r3, [r6, #8]
    3b0a:	4283      	cmp	r3, r0
    3b0c:	d927      	bls.n	3b5e <_spi_m_sync_trans+0xb2>
	return ((Sercom *)hw)->SPI.INTFLAG.reg;
    3b0e:	7e23      	ldrb	r3, [r4, #24]
    3b10:	b2db      	uxtb	r3, r3
	if (!(iflag & SERCOM_SPI_INTFLAG_RXC)) {
    3b12:	2104      	movs	r1, #4
    3b14:	4219      	tst	r1, r3
    3b16:	d02b      	beq.n	3b70 <_spi_m_sync_trans+0xc4>
	return ((Sercom *)hw)->SPI.DATA.reg;
    3b18:	6aa7      	ldr	r7, [r4, #40]	; 0x28
	if (ctrl->rxbuf) {
    3b1a:	2d00      	cmp	r5, #0
    3b1c:	d0f0      	beq.n	3b00 <_spi_m_sync_trans+0x54>
		*ctrl->rxbuf++ = (uint8_t)data;
    3b1e:	702f      	strb	r7, [r5, #0]
		if (ctrl->char_size > 1) {
    3b20:	9901      	ldr	r1, [sp, #4]
    3b22:	2901      	cmp	r1, #1
    3b24:	d9eb      	bls.n	3afe <_spi_m_sync_trans+0x52>
			*ctrl->rxbuf++ = (uint8_t)(data >> 8);
    3b26:	0a3f      	lsrs	r7, r7, #8
    3b28:	706f      	strb	r7, [r5, #1]
    3b2a:	3502      	adds	r5, #2
    3b2c:	e7e8      	b.n	3b00 <_spi_m_sync_trans+0x54>
		data = *ctrl->txbuf++;
    3b2e:	2101      	movs	r1, #1
    3b30:	468b      	mov	fp, r1
    3b32:	44d8      	add	r8, fp
    3b34:	e037      	b.n	3ba6 <_spi_m_sync_trans+0xfa>
	((Sercom *)hw)->SPI.STATUS.reg = mask;
    3b36:	2301      	movs	r3, #1
    3b38:	425b      	negs	r3, r3
    3b3a:	8363      	strh	r3, [r4, #26]
	((Sercom *)hw)->SPI.INTFLAG.reg = mask;
    3b3c:	3381      	adds	r3, #129	; 0x81
    3b3e:	7623      	strb	r3, [r4, #24]
		return ERR_OVERFLOW;
    3b40:	2013      	movs	r0, #19
    3b42:	4240      	negs	r0, r0
	tmp &= mask;
    3b44:	2203      	movs	r2, #3
	tmp = ((Sercom *)hw)->SPI.INTFLAG.reg;
    3b46:	7e23      	ldrb	r3, [r4, #24]
	while (!(hri_sercomspi_get_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_TXC | SERCOM_SPI_INTFLAG_DRE))) {
    3b48:	4213      	tst	r3, r2
    3b4a:	d0fc      	beq.n	3b46 <_spi_m_sync_trans+0x9a>
	((Sercom *)hw)->SPI.INTFLAG.reg = mask;
    3b4c:	2303      	movs	r3, #3
    3b4e:	7623      	strb	r3, [r4, #24]
	}
	/* Wait until SPI bus idle */
	_spi_wait_bus_idle(hw);

	return rc;
}
    3b50:	b003      	add	sp, #12
    3b52:	bc3c      	pop	{r2, r3, r4, r5}
    3b54:	4690      	mov	r8, r2
    3b56:	4699      	mov	r9, r3
    3b58:	46a2      	mov	sl, r4
    3b5a:	46ab      	mov	fp, r5
    3b5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (ctrl.txcnt >= msg->size && ctrl.rxcnt >= msg->size) {
    3b5e:	4293      	cmp	r3, r2
    3b60:	d8d5      	bhi.n	3b0e <_spi_m_sync_trans+0x62>
    3b62:	e7ef      	b.n	3b44 <_spi_m_sync_trans+0x98>
		return ERR_BUSY;
    3b64:	2004      	movs	r0, #4
    3b66:	4240      	negs	r0, r0
    3b68:	e7f2      	b.n	3b50 <_spi_m_sync_trans+0xa4>
		return ERR_NOT_INITIALIZED;
    3b6a:	2014      	movs	r0, #20
    3b6c:	4240      	negs	r0, r0
    3b6e:	e7ef      	b.n	3b50 <_spi_m_sync_trans+0xa4>
			if (ctrl.rxcnt >= ctrl.txcnt) {
    3b70:	4290      	cmp	r0, r2
    3b72:	d8c6      	bhi.n	3b02 <_spi_m_sync_trans+0x56>
	if (!(SERCOM_SPI_INTFLAG_DRE & iflag)) {
    3b74:	4667      	mov	r7, ip
    3b76:	421f      	tst	r7, r3
    3b78:	d0c3      	beq.n	3b02 <_spi_m_sync_trans+0x56>
				_spi_tx_check_and_send(hw, iflag, &ctrl, dev->dummy_byte);
    3b7a:	464f      	mov	r7, r9
    3b7c:	88ff      	ldrh	r7, [r7, #6]
    3b7e:	46ba      	mov	sl, r7
	if (ctrl->txbuf) {
    3b80:	4647      	mov	r7, r8
    3b82:	2f00      	cmp	r7, #0
    3b84:	d00f      	beq.n	3ba6 <_spi_m_sync_trans+0xfa>
		data = *ctrl->txbuf++;
    3b86:	783f      	ldrb	r7, [r7, #0]
    3b88:	46ba      	mov	sl, r7
		if (ctrl->char_size > 1) {
    3b8a:	9901      	ldr	r1, [sp, #4]
    3b8c:	2901      	cmp	r1, #1
    3b8e:	d9ce      	bls.n	3b2e <_spi_m_sync_trans+0x82>
			data |= (*ctrl->txbuf) << 8;
    3b90:	4647      	mov	r7, r8
    3b92:	787f      	ldrb	r7, [r7, #1]
    3b94:	023f      	lsls	r7, r7, #8
    3b96:	46bb      	mov	fp, r7
    3b98:	4657      	mov	r7, sl
    3b9a:	4659      	mov	r1, fp
    3b9c:	430f      	orrs	r7, r1
    3b9e:	46ba      	mov	sl, r7
			ctrl->txbuf++;
    3ba0:	2102      	movs	r1, #2
    3ba2:	468b      	mov	fp, r1
    3ba4:	44d8      	add	r8, fp
	ctrl->txcnt++;
    3ba6:	3001      	adds	r0, #1
	((Sercom *)hw)->SPI.DATA.reg = data;
    3ba8:	4657      	mov	r7, sl
    3baa:	62a7      	str	r7, [r4, #40]	; 0x28
    3bac:	e7a9      	b.n	3b02 <_spi_m_sync_trans+0x56>
    3bae:	46c0      	nop			; (mov r8, r8)
    3bb0:	00000a71 	.word	0x00000a71
    3bb4:	00009c38 	.word	0x00009c38
    3bb8:	00002fbd 	.word	0x00002fbd

00003bbc <_sysctrl_init_sources>:
 * \brief Initializes clock generators
 *
 * All GCLK generators are running when this function returns.
 */
void _sysctrl_init_sources(void)
{
    3bbc:	b510      	push	{r4, lr}
}

static inline void hri_sysctrl_write_XOSC32K_reg(const void *const hw, hri_sysctrl_xosc32k_reg_t data)
{
	SYSCTRL_CRITICAL_SECTION_ENTER();
	((Sysctrl *)hw)->XOSC32K.reg = data;
    3bbe:	4b14      	ldr	r3, [pc, #80]	; (3c10 <_sysctrl_init_sources+0x54>)
    3bc0:	4a14      	ldr	r2, [pc, #80]	; (3c14 <_sysctrl_init_sources+0x58>)
    3bc2:	829a      	strh	r2, [r3, #20]
}

static inline hri_sysctrl_osc8m_reg_t hri_sysctrl_read_OSC8M_CALIB_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((Sysctrl *)hw)->OSC8M.reg;
    3bc4:	6a19      	ldr	r1, [r3, #32]
}

static inline hri_sysctrl_osc8m_reg_t hri_sysctrl_read_OSC8M_FRANGE_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((Sysctrl *)hw)->OSC8M.reg;
    3bc6:	6a1a      	ldr	r2, [r3, #32]
	hri_sysctrl_write_OSC8M_reg(hw,
	                            SYSCTRL_OSC8M_FRANGE(hri_sysctrl_read_OSC8M_FRANGE_bf(hw)) |
#if CONF_OSC8M_OVERWRITE_CALIBRATION == 1
	                                SYSCTRL_OSC8M_CALIB(CONF_OSC8M_CALIB) |
#else
	                                SYSCTRL_OSC8M_CALIB(calib) |
    3bc8:	4813      	ldr	r0, [pc, #76]	; (3c18 <_sysctrl_init_sources+0x5c>)
    3bca:	4008      	ands	r0, r1
	                            SYSCTRL_OSC8M_FRANGE(hri_sysctrl_read_OSC8M_FRANGE_bf(hw)) |
    3bcc:	0f92      	lsrs	r2, r2, #30
    3bce:	0792      	lsls	r2, r2, #30
	hri_sysctrl_write_OSC8M_reg(hw,
    3bd0:	2402      	movs	r4, #2
    3bd2:	4322      	orrs	r2, r4
    3bd4:	4302      	orrs	r2, r0
}

static inline void hri_sysctrl_write_OSC8M_reg(const void *const hw, hri_sysctrl_osc8m_reg_t data)
{
	SYSCTRL_CRITICAL_SECTION_ENTER();
	((Sysctrl *)hw)->OSC8M.reg = data;
    3bd6:	621a      	str	r2, [r3, #32]
	((Sysctrl *)hw)->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    3bd8:	699a      	ldr	r2, [r3, #24]
    3bda:	4322      	orrs	r2, r4
    3bdc:	619a      	str	r2, [r3, #24]
	/* Enable OSC32K anyway since GCLK configuration may need it to sync */
	hri_sysctrl_set_OSC32K_ENABLE_bit(hw);
#endif

#if CONF_OSCULP32K_CONFIG == 1
	hri_sysctrl_write_OSCULP32K_reg(hw,
    3bde:	02c9      	lsls	r1, r1, #11
    3be0:	0ec9      	lsrs	r1, r1, #27
	((Sysctrl *)hw)->OSCULP32K.reg = data;
    3be2:	7719      	strb	r1, [r3, #28]
	return (((Sysctrl *)hw)->PCLKSR.reg & SYSCTRL_PCLKSR_XOSC32KRDY) >> SYSCTRL_PCLKSR_XOSC32KRDY_Pos;
    3be4:	0019      	movs	r1, r3
	                                    (CONF_OSC32K_WRTLOCK << SYSCTRL_OSCULP32K_WRTLOCK_Pos));
#endif

#if CONF_XOSC32K_CONFIG == 1
#if CONF_XOSC32K_ENABLE == 1
	while (!hri_sysctrl_get_PCLKSR_XOSC32KRDY_bit(hw))
    3be6:	2202      	movs	r2, #2
    3be8:	68cb      	ldr	r3, [r1, #12]
    3bea:	421a      	tst	r2, r3
    3bec:	d0fc      	beq.n	3be8 <_sysctrl_init_sources+0x2c>
	((Sysctrl *)hw)->XOSC32K.reg |= SYSCTRL_XOSC32K_ONDEMAND;
    3bee:	4a08      	ldr	r2, [pc, #32]	; (3c10 <_sysctrl_init_sources+0x54>)
    3bf0:	8a93      	ldrh	r3, [r2, #20]
    3bf2:	2180      	movs	r1, #128	; 0x80
    3bf4:	430b      	orrs	r3, r1
    3bf6:	8293      	strh	r3, [r2, #20]
	return (((Sysctrl *)hw)->PCLKSR.reg & SYSCTRL_PCLKSR_OSC8MRDY) >> SYSCTRL_PCLKSR_OSC8MRDY_Pos;
    3bf8:	0011      	movs	r1, r2
#endif
#endif

#if CONF_OSC8M_CONFIG == 1
#if CONF_OSC8M_ENABLE == 1
	while (!hri_sysctrl_get_PCLKSR_OSC8MRDY_bit(hw))
    3bfa:	2208      	movs	r2, #8
    3bfc:	68cb      	ldr	r3, [r1, #12]
    3bfe:	421a      	tst	r2, r3
    3c00:	d0fc      	beq.n	3bfc <_sysctrl_init_sources+0x40>
	((Sysctrl *)hw)->OSC8M.reg |= SYSCTRL_OSC8M_ONDEMAND;
    3c02:	4a03      	ldr	r2, [pc, #12]	; (3c10 <_sysctrl_init_sources+0x54>)
    3c04:	6a13      	ldr	r3, [r2, #32]
    3c06:	2180      	movs	r1, #128	; 0x80
    3c08:	430b      	orrs	r3, r1
    3c0a:	6213      	str	r3, [r2, #32]
	hri_sysctrl_set_OSC8M_ONDEMAND_bit(hw);
#endif
#endif

	(void)calib, (void)hw;
}
    3c0c:	bd10      	pop	{r4, pc}
    3c0e:	46c0      	nop			; (mov r8, r8)
    3c10:	40000800 	.word	0x40000800
    3c14:	0000030e 	.word	0x0000030e
    3c18:	0fff0000 	.word	0x0fff0000

00003c1c <_sysctrl_init_referenced_generators>:
	((Gclk *)hw)->CLKCTRL.reg = data;
    3c1c:	2286      	movs	r2, #134	; 0x86
    3c1e:	01d2      	lsls	r2, r2, #7
    3c20:	4b1a      	ldr	r3, [pc, #104]	; (3c8c <_sysctrl_init_referenced_generators+0x70>)
    3c22:	805a      	strh	r2, [r3, #2]
}

static inline void hri_sysctrl_write_DFLLCTRL_reg(const void *const hw, hri_sysctrl_dfllctrl_reg_t data)
{
	SYSCTRL_CRITICAL_SECTION_ENTER();
	((Sysctrl *)hw)->DFLLCTRL.reg = data;
    3c24:	2202      	movs	r2, #2
    3c26:	4b1a      	ldr	r3, [pc, #104]	; (3c90 <_sysctrl_init_referenced_generators+0x74>)
    3c28:	849a      	strh	r2, [r3, #36]	; 0x24
	return (((Sysctrl *)hw)->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY) >> SYSCTRL_PCLKSR_DFLLRDY_Pos;
    3c2a:	0019      	movs	r1, r3
	hri_gclk_write_CLKCTRL_reg(GCLK,
	                           GCLK_CLKCTRL_ID(0) | GCLK_CLKCTRL_GEN(CONF_DFLL_GCLK) | (1 << GCLK_CLKCTRL_CLKEN_Pos));
#endif

	hri_sysctrl_write_DFLLCTRL_reg(hw, SYSCTRL_DFLLCTRL_ENABLE);
	while (!hri_sysctrl_get_PCLKSR_DFLLRDY_bit(hw))
    3c2c:	320e      	adds	r2, #14
    3c2e:	68cb      	ldr	r3, [r1, #12]
    3c30:	421a      	tst	r2, r3
    3c32:	d0fc      	beq.n	3c2e <_sysctrl_init_referenced_generators+0x12>
}

static inline void hri_sysctrl_write_DFLLMUL_reg(const void *const hw, hri_sysctrl_dfllmul_reg_t data)
{
	SYSCTRL_CRITICAL_SECTION_ENTER();
	((Sysctrl *)hw)->DFLLMUL.reg = data;
    3c34:	4a17      	ldr	r2, [pc, #92]	; (3c94 <_sysctrl_init_referenced_generators+0x78>)
    3c36:	4b16      	ldr	r3, [pc, #88]	; (3c90 <_sysctrl_init_referenced_generators+0x74>)
    3c38:	62da      	str	r2, [r3, #44]	; 0x2c
		;

	hri_sysctrl_write_DFLLMUL_reg(hw,
	                              SYSCTRL_DFLLMUL_CSTEP(CONF_DFLL_CSTEP) | SYSCTRL_DFLLMUL_FSTEP(CONF_DFLL_FSTEP)
	                                  | SYSCTRL_DFLLMUL_MUL(CONF_DFLL_MUL));
	hri_sysctrl_write_DFLLVAL_reg(hw, CONF_DFLLVAL);
    3c3a:	4b17      	ldr	r3, [pc, #92]	; (3c98 <_sysctrl_init_referenced_generators+0x7c>)
    3c3c:	681b      	ldr	r3, [r3, #0]
    3c3e:	0e9b      	lsrs	r3, r3, #26
    3c40:	2b3f      	cmp	r3, #63	; 0x3f
    3c42:	d01a      	beq.n	3c7a <_sysctrl_init_referenced_generators+0x5e>
    3c44:	029b      	lsls	r3, r3, #10
    3c46:	2280      	movs	r2, #128	; 0x80
    3c48:	0092      	lsls	r2, r2, #2
    3c4a:	4313      	orrs	r3, r2
	((Sysctrl *)hw)->DFLLVAL.reg = data;
    3c4c:	4a10      	ldr	r2, [pc, #64]	; (3c90 <_sysctrl_init_referenced_generators+0x74>)
    3c4e:	6293      	str	r3, [r2, #40]	; 0x28
	((Sysctrl *)hw)->DFLLCTRL.reg = data;
    3c50:	4b12      	ldr	r3, [pc, #72]	; (3c9c <_sysctrl_init_referenced_generators+0x80>)
    3c52:	8493      	strh	r3, [r2, #36]	; 0x24
	tmp = ((Sysctrl *)hw)->DFLLCTRL.reg;
    3c54:	8c93      	ldrh	r3, [r2, #36]	; 0x24
	                                    | SYSCTRL_DPLLCTRLB_FILTER(CONF_DPLL_FILTER));
#endif

#if CONF_DFLL_CONFIG == 1
#if CONF_DFLL_ENABLE == 1
	if (hri_sysctrl_get_DFLLCTRL_MODE_bit(hw)) {
    3c56:	075b      	lsls	r3, r3, #29
    3c58:	d512      	bpl.n	3c80 <_sysctrl_init_referenced_generators+0x64>
	tmp = ((Sysctrl *)hw)->PCLKSR.reg;
    3c5a:	0011      	movs	r1, r2
	tmp &= mask;
    3c5c:	22d0      	movs	r2, #208	; 0xd0
	tmp = ((Sysctrl *)hw)->PCLKSR.reg;
    3c5e:	68cb      	ldr	r3, [r1, #12]
	tmp &= mask;
    3c60:	4013      	ands	r3, r2
		    = SYSCTRL_PCLKSR_DFLLRDY | SYSCTRL_PCLKSR_DFLLLCKF | SYSCTRL_PCLKSR_DFLLLCKC;
#else
		hri_sysctrl_pclksr_reg_t status_mask = SYSCTRL_PCLKSR_DFLLRDY;
#endif

		while (hri_sysctrl_get_PCLKSR_reg(hw, status_mask) != status_mask)
    3c62:	2bd0      	cmp	r3, #208	; 0xd0
    3c64:	d1fb      	bne.n	3c5e <_sysctrl_init_referenced_generators+0x42>
	return (((Gclk *)hw)->STATUS.reg & GCLK_STATUS_SYNCBUSY) >> GCLK_STATUS_SYNCBUSY_Pos;
    3c66:	4a09      	ldr	r2, [pc, #36]	; (3c8c <_sysctrl_init_referenced_generators+0x70>)
    3c68:	7853      	ldrb	r3, [r2, #1]
	hri_sysctrl_set_DPLLCTRLA_ONDEMAND_bit(hw);
#endif
#endif

#if CONF_DFLL_CONFIG == 1
	while (hri_gclk_get_STATUS_SYNCBUSY_bit(GCLK))
    3c6a:	09db      	lsrs	r3, r3, #7
    3c6c:	d1fc      	bne.n	3c68 <_sysctrl_init_referenced_generators+0x4c>
	((Sysctrl *)hw)->OSC32K.reg &= ~SYSCTRL_OSC32K_ENABLE;
    3c6e:	4a08      	ldr	r2, [pc, #32]	; (3c90 <_sysctrl_init_referenced_generators+0x74>)
    3c70:	6993      	ldr	r3, [r2, #24]
    3c72:	2102      	movs	r1, #2
    3c74:	438b      	bics	r3, r1
    3c76:	6193      	str	r3, [r2, #24]
	/* Disable after all possible configurations needs sync written. */
	hri_sysctrl_clear_OSC32K_ENABLE_bit(hw);
#endif

	(void)hw;
}
    3c78:	4770      	bx	lr
	hri_sysctrl_write_DFLLVAL_reg(hw, CONF_DFLLVAL);
    3c7a:	23fc      	movs	r3, #252	; 0xfc
    3c7c:	01db      	lsls	r3, r3, #7
    3c7e:	e7e5      	b.n	3c4c <_sysctrl_init_referenced_generators+0x30>
	return (((Sysctrl *)hw)->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY) >> SYSCTRL_PCLKSR_DFLLRDY_Pos;
    3c80:	4903      	ldr	r1, [pc, #12]	; (3c90 <_sysctrl_init_referenced_generators+0x74>)
		while (!hri_sysctrl_get_PCLKSR_DFLLRDY_bit(hw))
    3c82:	2210      	movs	r2, #16
    3c84:	68cb      	ldr	r3, [r1, #12]
    3c86:	421a      	tst	r2, r3
    3c88:	d0fc      	beq.n	3c84 <_sysctrl_init_referenced_generators+0x68>
    3c8a:	e7ec      	b.n	3c66 <_sysctrl_init_referenced_generators+0x4a>
    3c8c:	40000c00 	.word	0x40000c00
    3c90:	40000800 	.word	0x40000800
    3c94:	040105b8 	.word	0x040105b8
    3c98:	00806024 	.word	0x00806024
    3c9c:	00000506 	.word	0x00000506

00003ca0 <_delay_init>:
 * \brief Initialize system time module
 */
void _system_time_init(void *const hw)
{
	(void)hw;
	SysTick->LOAD = (0xFFFFFF << SysTick_LOAD_RELOAD_Pos);
    3ca0:	4b02      	ldr	r3, [pc, #8]	; (3cac <_delay_init+0xc>)
    3ca2:	4a03      	ldr	r2, [pc, #12]	; (3cb0 <_delay_init+0x10>)
    3ca4:	605a      	str	r2, [r3, #4]
	SysTick->CTRL = (1 << SysTick_CTRL_ENABLE_Pos) | (CONF_SYSTICK_TICKINT << SysTick_CTRL_TICKINT_Pos)
    3ca6:	2205      	movs	r2, #5
    3ca8:	601a      	str	r2, [r3, #0]
 * \brief Initialize delay functionality
 */
void _delay_init(void *const hw)
{
	_system_time_init(hw);
}
    3caa:	4770      	bx	lr
    3cac:	e000e010 	.word	0xe000e010
    3cb0:	00ffffff 	.word	0x00ffffff

00003cb4 <_delay_cycles>:
}
/**
 * \brief Delay loop to delay n number of cycles
 */
void _delay_cycles(void *const hw, uint32_t cycles)
{
    3cb4:	b570      	push	{r4, r5, r6, lr}
	(void)hw;
	uint8_t  n   = cycles >> 24;
    3cb6:	0e0b      	lsrs	r3, r1, #24
	uint32_t buf = cycles;

	while (n--) {
    3cb8:	1e5e      	subs	r6, r3, #1
    3cba:	b2f6      	uxtb	r6, r6
    3cbc:	2b00      	cmp	r3, #0
    3cbe:	d013      	beq.n	3ce8 <_delay_cycles+0x34>
    3cc0:	0034      	movs	r4, r6
		SysTick->LOAD = 0xFFFFFF;
    3cc2:	4a0e      	ldr	r2, [pc, #56]	; (3cfc <_delay_cycles+0x48>)
    3cc4:	4d0e      	ldr	r5, [pc, #56]	; (3d00 <_delay_cycles+0x4c>)
		SysTick->VAL  = 0xFFFFFF;
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
    3cc6:	2080      	movs	r0, #128	; 0x80
    3cc8:	0240      	lsls	r0, r0, #9
		SysTick->LOAD = 0xFFFFFF;
    3cca:	6055      	str	r5, [r2, #4]
		SysTick->VAL  = 0xFFFFFF;
    3ccc:	6095      	str	r5, [r2, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
    3cce:	6813      	ldr	r3, [r2, #0]
    3cd0:	4203      	tst	r3, r0
    3cd2:	d0fc      	beq.n	3cce <_delay_cycles+0x1a>
	while (n--) {
    3cd4:	3c01      	subs	r4, #1
    3cd6:	b2e4      	uxtb	r4, r4
    3cd8:	2cff      	cmp	r4, #255	; 0xff
    3cda:	d1f6      	bne.n	3cca <_delay_cycles+0x16>
    3cdc:	0633      	lsls	r3, r6, #24
    3cde:	1af6      	subs	r6, r6, r3
    3ce0:	4b08      	ldr	r3, [pc, #32]	; (3d04 <_delay_cycles+0x50>)
    3ce2:	469c      	mov	ip, r3
    3ce4:	4461      	add	r1, ip
    3ce6:	1871      	adds	r1, r6, r1
			;
		buf -= 0xFFFFFF;
	}

	SysTick->LOAD = buf;
    3ce8:	4b04      	ldr	r3, [pc, #16]	; (3cfc <_delay_cycles+0x48>)
    3cea:	6059      	str	r1, [r3, #4]
	SysTick->VAL  = buf;
    3cec:	6099      	str	r1, [r3, #8]
	while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
    3cee:	0019      	movs	r1, r3
    3cf0:	2280      	movs	r2, #128	; 0x80
    3cf2:	0252      	lsls	r2, r2, #9
    3cf4:	680b      	ldr	r3, [r1, #0]
    3cf6:	4213      	tst	r3, r2
    3cf8:	d0fc      	beq.n	3cf4 <_delay_cycles+0x40>
		;
}
    3cfa:	bd70      	pop	{r4, r5, r6, pc}
    3cfc:	e000e010 	.word	0xe000e010
    3d00:	00ffffff 	.word	0x00ffffff
    3d04:	ff000001 	.word	0xff000001

00003d08 <_dummy_func_no_return>:
static bool _dummy_func_no_return(uint32_t unused0, uint32_t unused1)
{
	(void)unused0;
	(void)unused1;
	return false;
}
    3d08:	2000      	movs	r0, #0
    3d0a:	4770      	bx	lr

00003d0c <_usb_d_dev_handle_setup>:
/**
 * \brief Handles setup received interrupt
 * \param[in] ept Pointer to endpoint information.
 */
static void _usb_d_dev_handle_setup(struct _usb_d_dev_ep *ept)
{
    3d0c:	b570      	push	{r4, r5, r6, lr}
	uint8_t epn     = USB_EP_GET_N(ept->ep);
    3d0e:	7c83      	ldrb	r3, [r0, #18]
    3d10:	220f      	movs	r2, #15
    3d12:	4013      	ands	r3, r2
	bool    is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    3d14:	7cc1      	ldrb	r1, [r0, #19]

	if (!is_ctrl) {
    3d16:	3a08      	subs	r2, #8
    3d18:	400a      	ands	r2, r1
    3d1a:	2a01      	cmp	r2, #1
    3d1c:	d00b      	beq.n	3d36 <_usb_d_dev_handle_setup+0x2a>
}

static inline void hri_usbendpoint_clear_EPINTFLAG_reg(const void *const hw, uint8_t submodule_index,
                                                       hri_usbendpoint_epintflag_reg_t mask)
{
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    3d1e:	015a      	lsls	r2, r3, #5
    3d20:	4919      	ldr	r1, [pc, #100]	; (3d88 <_usb_d_dev_handle_setup+0x7c>)
    3d22:	468c      	mov	ip, r1
    3d24:	4462      	add	r2, ip
    3d26:	2110      	movs	r1, #16
    3d28:	71d1      	strb	r1, [r2, #7]
	}
}

static inline void hri_usbendpoint_clear_EPINTEN_RXSTP_bit(const void *const hw, uint8_t submodule_index)
{
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = USB_DEVICE_EPINTENSET_RXSTP;
    3d2a:	015b      	lsls	r3, r3, #5
    3d2c:	4a17      	ldr	r2, [pc, #92]	; (3d8c <_usb_d_dev_handle_setup+0x80>)
    3d2e:	4694      	mov	ip, r2
    3d30:	4463      	add	r3, ip
    3d32:	7019      	strb	r1, [r3, #0]
	_usbd_ep_clear_bank_status(epn, 1);
	_usbd_ep_int_ack(epn, USB_D_BANK0_INT_FLAGS | USB_D_BANK1_INT_FLAGS);
	_usbd_ep_int_dis(epn, USB_D_BANK0_INT_FLAGS | USB_D_BANK1_INT_FLAGS);
	/* Invoke callback. */
	dev_inst.ep_callbacks.setup(ept->ep);
}
    3d34:	bd70      	pop	{r4, r5, r6, pc}
	if (_usb_d_dev_ep_is_busy(ept)) {
    3d36:	064a      	lsls	r2, r1, #25
    3d38:	d50e      	bpl.n	3d58 <_usb_d_dev_handle_setup+0x4c>
		ept->flags.bits.is_busy = 0;
    3d3a:	7cc2      	ldrb	r2, [r0, #19]
    3d3c:	2140      	movs	r1, #64	; 0x40
    3d3e:	438a      	bics	r2, r1
    3d40:	74c2      	strb	r2, [r0, #19]
    3d42:	015a      	lsls	r2, r3, #5
    3d44:	4c12      	ldr	r4, [pc, #72]	; (3d90 <_usb_d_dev_handle_setup+0x84>)
    3d46:	46a4      	mov	ip, r4
    3d48:	4462      	add	r2, ip
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    3d4a:	2580      	movs	r5, #128	; 0x80
    3d4c:	2482      	movs	r4, #130	; 0x82
    3d4e:	0064      	lsls	r4, r4, #1
    3d50:	5515      	strb	r5, [r2, r4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    3d52:	2406      	movs	r4, #6
    3d54:	34ff      	adds	r4, #255	; 0xff
    3d56:	5511      	strb	r1, [r2, r4]
	ept->flags.bits.is_stalled = 0;
    3d58:	7cc2      	ldrb	r2, [r0, #19]
    3d5a:	2108      	movs	r1, #8
    3d5c:	438a      	bics	r2, r1
    3d5e:	74c2      	strb	r2, [r0, #19]
	bank->STATUS_BK.reg     = 0;
    3d60:	490c      	ldr	r1, [pc, #48]	; (3d94 <_usb_d_dev_handle_setup+0x88>)
    3d62:	015a      	lsls	r2, r3, #5
    3d64:	188c      	adds	r4, r1, r2
    3d66:	2500      	movs	r5, #0
    3d68:	72a5      	strb	r5, [r4, #10]
    3d6a:	76a5      	strb	r5, [r4, #26]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    3d6c:	0013      	movs	r3, r2
    3d6e:	4c06      	ldr	r4, [pc, #24]	; (3d88 <_usb_d_dev_handle_setup+0x7c>)
    3d70:	46a4      	mov	ip, r4
    3d72:	4463      	add	r3, ip
    3d74:	246f      	movs	r4, #111	; 0x6f
    3d76:	71dc      	strb	r4, [r3, #7]
}

static inline void hri_usbendpoint_clear_EPINTEN_reg(const void *const hw, uint8_t submodule_index,
                                                     hri_usbendpoint_epintenset_reg_t mask)
{
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    3d78:	4b04      	ldr	r3, [pc, #16]	; (3d8c <_usb_d_dev_handle_setup+0x80>)
    3d7a:	469c      	mov	ip, r3
    3d7c:	4462      	add	r2, ip
    3d7e:	7014      	strb	r4, [r2, #0]
	dev_inst.ep_callbacks.setup(ept->ep);
    3d80:	7c80      	ldrb	r0, [r0, #18]
    3d82:	6e8b      	ldr	r3, [r1, #104]	; 0x68
    3d84:	4798      	blx	r3
    3d86:	e7d5      	b.n	3d34 <_usb_d_dev_handle_setup+0x28>
    3d88:	41005100 	.word	0x41005100
    3d8c:	41005108 	.word	0x41005108
    3d90:	41005000 	.word	0x41005000
    3d94:	200001cc 	.word	0x200001cc

00003d98 <_usb_d_dev_handle_stall>:
 * \brief Handles stall sent interrupt
 * \param[in] ept Pointer to endpoint information.
 * \param[in] bank_n Bank number.
 */
static void _usb_d_dev_handle_stall(struct _usb_d_dev_ep *ept, const uint8_t bank_n)
{
    3d98:	b510      	push	{r4, lr}
		_usbd_ep_int_dis(epn, USB_DEVICE_EPINTFLAG_STALL0 << bank_n);
    3d9a:	2220      	movs	r2, #32
    3d9c:	408a      	lsls	r2, r1
	hri_usbendpoint_clear_EPINTEN_reg(USB, epn, flags);
    3d9e:	b2d2      	uxtb	r2, r2
	uint8_t epn = USB_EP_GET_N(ept->ep);
    3da0:	7c81      	ldrb	r1, [r0, #18]
    3da2:	230f      	movs	r3, #15
    3da4:	400b      	ands	r3, r1
    3da6:	015b      	lsls	r3, r3, #5
    3da8:	4905      	ldr	r1, [pc, #20]	; (3dc0 <_usb_d_dev_handle_stall+0x28>)
    3daa:	468c      	mov	ip, r1
    3dac:	4463      	add	r3, ip
    3dae:	701a      	strb	r2, [r3, #0]
	/* Clear interrupt enable. Leave status there for status check. */
	_usbd_ep_int_stall_en(epn, bank_n, false);
	dev_inst.ep_callbacks.done(ept->ep, USB_TRANS_STALL, ept->trans_count);
    3db0:	6882      	ldr	r2, [r0, #8]
    3db2:	7c80      	ldrb	r0, [r0, #18]
    3db4:	4b03      	ldr	r3, [pc, #12]	; (3dc4 <_usb_d_dev_handle_stall+0x2c>)
    3db6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
    3db8:	2101      	movs	r1, #1
    3dba:	4798      	blx	r3
}
    3dbc:	bd10      	pop	{r4, pc}
    3dbe:	46c0      	nop			; (mov r8, r8)
    3dc0:	41005108 	.word	0x41005108
    3dc4:	200001cc 	.word	0x200001cc

00003dc8 <_usb_d_dev_trans_done>:
 *  \brief Finish the transaction and invoke callback
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] code Information code passed.
 */
static void _usb_d_dev_trans_done(struct _usb_d_dev_ep *ept, const int32_t code)
{
    3dc8:	b510      	push	{r4, lr}
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
    3dca:	7c83      	ldrb	r3, [r0, #18]
    3dcc:	2bff      	cmp	r3, #255	; 0xff
    3dce:	d002      	beq.n	3dd6 <_usb_d_dev_trans_done+0xe>
    3dd0:	7cc2      	ldrb	r2, [r0, #19]
    3dd2:	0652      	lsls	r2, r2, #25
    3dd4:	d400      	bmi.n	3dd8 <_usb_d_dev_trans_done+0x10>
		return;
	}
	ept->flags.bits.is_busy = 0;
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
}
    3dd6:	bd10      	pop	{r4, pc}
	ept->flags.bits.is_busy = 0;
    3dd8:	7cc2      	ldrb	r2, [r0, #19]
    3dda:	2440      	movs	r4, #64	; 0x40
    3ddc:	43a2      	bics	r2, r4
    3dde:	74c2      	strb	r2, [r0, #19]
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
    3de0:	6882      	ldr	r2, [r0, #8]
    3de2:	4802      	ldr	r0, [pc, #8]	; (3dec <_usb_d_dev_trans_done+0x24>)
    3de4:	6f04      	ldr	r4, [r0, #112]	; 0x70
    3de6:	0018      	movs	r0, r3
    3de8:	47a0      	blx	r4
    3dea:	e7f4      	b.n	3dd6 <_usb_d_dev_trans_done+0xe>
    3dec:	200001cc 	.word	0x200001cc

00003df0 <_usb_d_dev_trans_stop>:
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] dir Endpoint direction.
 * \param[in] code Information code passed.
 */
static void _usb_d_dev_trans_stop(struct _usb_d_dev_ep *ept, bool dir, const int32_t code)
{
    3df0:	b530      	push	{r4, r5, lr}
    3df2:	b083      	sub	sp, #12
	uint8_t epn = USB_EP_GET_N(ept->ep);
    3df4:	7c83      	ldrb	r3, [r0, #18]
	;
	const uint8_t intflags[2] = {USB_D_BANK0_INT_FLAGS, USB_D_BANK1_INT_FLAGS};
    3df6:	ac01      	add	r4, sp, #4
    3df8:	2525      	movs	r5, #37	; 0x25
    3dfa:	7025      	strb	r5, [r4, #0]
    3dfc:	3525      	adds	r5, #37	; 0x25
    3dfe:	7065      	strb	r5, [r4, #1]
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
    3e00:	2bff      	cmp	r3, #255	; 0xff
    3e02:	d01b      	beq.n	3e3c <_usb_d_dev_trans_stop+0x4c>
    3e04:	7cc4      	ldrb	r4, [r0, #19]
    3e06:	0664      	lsls	r4, r4, #25
    3e08:	d518      	bpl.n	3e3c <_usb_d_dev_trans_stop+0x4c>
	uint8_t epn = USB_EP_GET_N(ept->ep);
    3e0a:	240f      	movs	r4, #15
    3e0c:	4023      	ands	r3, r4
		return;
	}
	/* Stop transfer */
	if (dir) {
    3e0e:	2900      	cmp	r1, #0
    3e10:	d016      	beq.n	3e40 <_usb_d_dev_trans_stop+0x50>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    3e12:	015c      	lsls	r4, r3, #5
    3e14:	4d0e      	ldr	r5, [pc, #56]	; (3e50 <_usb_d_dev_trans_stop+0x60>)
    3e16:	46ac      	mov	ip, r5
    3e18:	4464      	add	r4, ip
    3e1a:	2580      	movs	r5, #128	; 0x80
    3e1c:	7125      	strb	r5, [r4, #4]
		_usbd_ep_set_in_rdy(epn, 1, false);
	} else {
		/* NAK OUT */
		_usbd_ep_set_out_rdy(epn, 0, false);
	}
	_usbd_ep_int_ack(epn, intflags[dir]);
    3e1e:	ac01      	add	r4, sp, #4
    3e20:	5c64      	ldrb	r4, [r4, r1]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    3e22:	0159      	lsls	r1, r3, #5
    3e24:	4d0a      	ldr	r5, [pc, #40]	; (3e50 <_usb_d_dev_trans_stop+0x60>)
    3e26:	46ac      	mov	ip, r5
    3e28:	4461      	add	r1, ip
    3e2a:	71cc      	strb	r4, [r1, #7]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    3e2c:	015b      	lsls	r3, r3, #5
    3e2e:	4909      	ldr	r1, [pc, #36]	; (3e54 <_usb_d_dev_trans_stop+0x64>)
    3e30:	468c      	mov	ip, r1
    3e32:	4463      	add	r3, ip
    3e34:	701c      	strb	r4, [r3, #0]
	_usbd_ep_int_dis(epn, intflags[dir]);
	_usb_d_dev_trans_done(ept, code);
    3e36:	0011      	movs	r1, r2
    3e38:	4b07      	ldr	r3, [pc, #28]	; (3e58 <_usb_d_dev_trans_stop+0x68>)
    3e3a:	4798      	blx	r3
}
    3e3c:	b003      	add	sp, #12
    3e3e:	bd30      	pop	{r4, r5, pc}
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    3e40:	015c      	lsls	r4, r3, #5
    3e42:	4d03      	ldr	r5, [pc, #12]	; (3e50 <_usb_d_dev_trans_stop+0x60>)
    3e44:	46ac      	mov	ip, r5
    3e46:	4464      	add	r4, ip
    3e48:	2540      	movs	r5, #64	; 0x40
    3e4a:	7165      	strb	r5, [r4, #5]
    3e4c:	e7e7      	b.n	3e1e <_usb_d_dev_trans_stop+0x2e>
    3e4e:	46c0      	nop			; (mov r8, r8)
    3e50:	41005100 	.word	0x41005100
    3e54:	41005108 	.word	0x41005108
    3e58:	00003dc9 	.word	0x00003dc9

00003e5c <_usb_d_dev_handle_trfail>:
{
    3e5c:	b570      	push	{r4, r5, r6, lr}
    3e5e:	b082      	sub	sp, #8
	uint8_t            epn     = USB_EP_GET_N(ept->ep);
    3e60:	7c83      	ldrb	r3, [r0, #18]
    3e62:	220f      	movs	r2, #15
    3e64:	4013      	ands	r3, r2
	const uint8_t      fail[2] = {USB_DEVICE_EPINTFLAG_TRFAIL0, USB_DEVICE_EPINTFLAG_TRFAIL1};
    3e66:	aa01      	add	r2, sp, #4
    3e68:	2404      	movs	r4, #4
    3e6a:	7014      	strb	r4, [r2, #0]
    3e6c:	3404      	adds	r4, #4
    3e6e:	7054      	strb	r4, [r2, #1]
    3e70:	015d      	lsls	r5, r3, #5
	uint8_t            eptype
    3e72:	2900      	cmp	r1, #0
    3e74:	d031      	beq.n	3eda <_usb_d_dev_handle_trfail+0x7e>

static inline hri_usbendpoint_epcfg_reg_t hri_usbendpoint_read_EPCFG_EPTYPE1_bf(const void *const hw,
                                                                                uint8_t           submodule_index)
{
	uint8_t tmp;
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    3e76:	001a      	movs	r2, r3
    3e78:	3208      	adds	r2, #8
    3e7a:	0152      	lsls	r2, r2, #5
    3e7c:	4c32      	ldr	r4, [pc, #200]	; (3f48 <_usb_d_dev_handle_trfail+0xec>)
    3e7e:	5d14      	ldrb	r4, [r2, r4]
	tmp = (tmp & USB_DEVICE_EPCFG_EPTYPE1_Msk) >> USB_DEVICE_EPCFG_EPTYPE1_Pos;
    3e80:	0664      	lsls	r4, r4, #25
    3e82:	0f64      	lsrs	r4, r4, #29
	st.reg = bank[bank_n].STATUS_BK.reg;
    3e84:	010a      	lsls	r2, r1, #4
    3e86:	1952      	adds	r2, r2, r5
    3e88:	4d30      	ldr	r5, [pc, #192]	; (3f4c <_usb_d_dev_handle_trfail+0xf0>)
    3e8a:	18aa      	adds	r2, r5, r2
    3e8c:	7a95      	ldrb	r5, [r2, #10]
    3e8e:	b2ed      	uxtb	r5, r5
	if ((eptype == USB_D_EPTYPE_ISOCH) && st.bit.CRCERR) {
    3e90:	2c02      	cmp	r4, #2
    3e92:	d02a      	beq.n	3eea <_usb_d_dev_handle_trfail+0x8e>
	} else if (st.bit.ERRORFLOW) {
    3e94:	07ac      	lsls	r4, r5, #30
    3e96:	d541      	bpl.n	3f1c <_usb_d_dev_handle_trfail+0xc0>
	bool                      is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    3e98:	7cc5      	ldrb	r5, [r0, #19]
		bank[bank_n].STATUS_BK.bit.ERRORFLOW = 0;
    3e9a:	7a94      	ldrb	r4, [r2, #10]
    3e9c:	2602      	movs	r6, #2
    3e9e:	43b4      	bics	r4, r6
    3ea0:	7294      	strb	r4, [r2, #10]
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    3ea2:	aa01      	add	r2, sp, #4
    3ea4:	5c54      	ldrb	r4, [r2, r1]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    3ea6:	015a      	lsls	r2, r3, #5
    3ea8:	4e29      	ldr	r6, [pc, #164]	; (3f50 <_usb_d_dev_handle_trfail+0xf4>)
    3eaa:	46b4      	mov	ip, r6
    3eac:	4462      	add	r2, ip
    3eae:	71d4      	strb	r4, [r2, #7]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    3eb0:	015b      	lsls	r3, r3, #5
    3eb2:	4a28      	ldr	r2, [pc, #160]	; (3f54 <_usb_d_dev_handle_trfail+0xf8>)
    3eb4:	4694      	mov	ip, r2
    3eb6:	4463      	add	r3, ip
    3eb8:	701c      	strb	r4, [r3, #0]
		if (is_ctrl && _usb_d_dev_ep_is_busy(ept)) {
    3eba:	2307      	movs	r3, #7
    3ebc:	402b      	ands	r3, r5
    3ebe:	2b01      	cmp	r3, #1
    3ec0:	d13f      	bne.n	3f42 <_usb_d_dev_handle_trfail+0xe6>
    3ec2:	7cc3      	ldrb	r3, [r0, #19]
    3ec4:	065b      	lsls	r3, r3, #25
    3ec6:	d53c      	bpl.n	3f42 <_usb_d_dev_handle_trfail+0xe6>
			if (bank_n != _usb_d_dev_ep_is_in(ept)) {
    3ec8:	7cc3      	ldrb	r3, [r0, #19]
    3eca:	09db      	lsrs	r3, r3, #7
    3ecc:	4299      	cmp	r1, r3
    3ece:	d038      	beq.n	3f42 <_usb_d_dev_handle_trfail+0xe6>
				_usb_d_dev_trans_stop(ept, _usb_d_dev_ep_is_in(ept), USB_TRANS_DONE);
    3ed0:	2200      	movs	r2, #0
    3ed2:	0019      	movs	r1, r3
    3ed4:	4b20      	ldr	r3, [pc, #128]	; (3f58 <_usb_d_dev_handle_trfail+0xfc>)
    3ed6:	4798      	blx	r3
    3ed8:	e033      	b.n	3f42 <_usb_d_dev_handle_trfail+0xe6>
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    3eda:	001a      	movs	r2, r3
    3edc:	3208      	adds	r2, #8
    3ede:	0152      	lsls	r2, r2, #5
    3ee0:	4c19      	ldr	r4, [pc, #100]	; (3f48 <_usb_d_dev_handle_trfail+0xec>)
    3ee2:	5d14      	ldrb	r4, [r2, r4]
	tmp = (tmp & USB_DEVICE_EPCFG_EPTYPE0_Msk) >> USB_DEVICE_EPCFG_EPTYPE0_Pos;
    3ee4:	2207      	movs	r2, #7
    3ee6:	4014      	ands	r4, r2
    3ee8:	e7cc      	b.n	3e84 <_usb_d_dev_handle_trfail+0x28>
	if ((eptype == USB_D_EPTYPE_ISOCH) && st.bit.CRCERR) {
    3eea:	07ec      	lsls	r4, r5, #31
    3eec:	d5d2      	bpl.n	3e94 <_usb_d_dev_handle_trfail+0x38>
		bank[bank_n].STATUS_BK.bit.CRCERR = 0;
    3eee:	7a94      	ldrb	r4, [r2, #10]
    3ef0:	2501      	movs	r5, #1
    3ef2:	43ac      	bics	r4, r5
    3ef4:	7294      	strb	r4, [r2, #10]
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    3ef6:	aa01      	add	r2, sp, #4
    3ef8:	5c54      	ldrb	r4, [r2, r1]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    3efa:	015a      	lsls	r2, r3, #5
    3efc:	4d14      	ldr	r5, [pc, #80]	; (3f50 <_usb_d_dev_handle_trfail+0xf4>)
    3efe:	46ac      	mov	ip, r5
    3f00:	4462      	add	r2, ip
    3f02:	71d4      	strb	r4, [r2, #7]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    3f04:	015b      	lsls	r3, r3, #5
    3f06:	4a13      	ldr	r2, [pc, #76]	; (3f54 <_usb_d_dev_handle_trfail+0xf8>)
    3f08:	4694      	mov	ip, r2
    3f0a:	4463      	add	r3, ip
    3f0c:	701c      	strb	r4, [r3, #0]
		_usb_d_dev_trans_stop(ept, bank_n, USB_TRANS_ERROR);
    3f0e:	1e4b      	subs	r3, r1, #1
    3f10:	4199      	sbcs	r1, r3
    3f12:	b2c9      	uxtb	r1, r1
    3f14:	2204      	movs	r2, #4
    3f16:	4b10      	ldr	r3, [pc, #64]	; (3f58 <_usb_d_dev_handle_trfail+0xfc>)
    3f18:	4798      	blx	r3
    3f1a:	e012      	b.n	3f42 <_usb_d_dev_handle_trfail+0xe6>
	bank->STATUS_BK.reg     = 0;
    3f1c:	005a      	lsls	r2, r3, #1
    3f1e:	1852      	adds	r2, r2, r1
    3f20:	0112      	lsls	r2, r2, #4
    3f22:	480a      	ldr	r0, [pc, #40]	; (3f4c <_usb_d_dev_handle_trfail+0xf0>)
    3f24:	1882      	adds	r2, r0, r2
    3f26:	2000      	movs	r0, #0
    3f28:	7290      	strb	r0, [r2, #10]
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    3f2a:	aa01      	add	r2, sp, #4
    3f2c:	5c51      	ldrb	r1, [r2, r1]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    3f2e:	015a      	lsls	r2, r3, #5
    3f30:	4807      	ldr	r0, [pc, #28]	; (3f50 <_usb_d_dev_handle_trfail+0xf4>)
    3f32:	4684      	mov	ip, r0
    3f34:	4462      	add	r2, ip
    3f36:	71d1      	strb	r1, [r2, #7]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    3f38:	015b      	lsls	r3, r3, #5
    3f3a:	4a06      	ldr	r2, [pc, #24]	; (3f54 <_usb_d_dev_handle_trfail+0xf8>)
    3f3c:	4694      	mov	ip, r2
    3f3e:	4463      	add	r3, ip
    3f40:	7019      	strb	r1, [r3, #0]
}
    3f42:	b002      	add	sp, #8
    3f44:	bd70      	pop	{r4, r5, r6, pc}
    3f46:	46c0      	nop			; (mov r8, r8)
    3f48:	41005000 	.word	0x41005000
    3f4c:	200001cc 	.word	0x200001cc
    3f50:	41005100 	.word	0x41005100
    3f54:	41005108 	.word	0x41005108
    3f58:	00003df1 	.word	0x00003df1

00003f5c <_usb_d_dev_reset_epts>:
{
    3f5c:	b5f0      	push	{r4, r5, r6, r7, lr}
    3f5e:	46c6      	mov	lr, r8
    3f60:	b500      	push	{lr}
    3f62:	4d0c      	ldr	r5, [pc, #48]	; (3f94 <_usb_d_dev_reset_epts+0x38>)
    3f64:	002c      	movs	r4, r5
    3f66:	3474      	adds	r4, #116	; 0x74
    3f68:	3529      	adds	r5, #41	; 0x29
    3f6a:	35ff      	adds	r5, #255	; 0xff
		_usb_d_dev_trans_done(&dev_inst.ep[i], USB_TRANS_RESET);
    3f6c:	4b0a      	ldr	r3, [pc, #40]	; (3f98 <_usb_d_dev_reset_epts+0x3c>)
    3f6e:	4698      	mov	r8, r3
		dev_inst.ep[i].ep       = 0xFF;
    3f70:	27ff      	movs	r7, #255	; 0xff
		dev_inst.ep[i].flags.u8 = 0;
    3f72:	2600      	movs	r6, #0
		_usb_d_dev_trans_done(&dev_inst.ep[i], USB_TRANS_RESET);
    3f74:	2103      	movs	r1, #3
    3f76:	0020      	movs	r0, r4
    3f78:	47c0      	blx	r8
		dev_inst.ep[i].ep       = 0xFF;
    3f7a:	74a7      	strb	r7, [r4, #18]
		dev_inst.ep[i].flags.u8 = 0;
    3f7c:	74e6      	strb	r6, [r4, #19]
    3f7e:	3414      	adds	r4, #20
	for (i = 0; i < USB_D_N_EP; i++) {
    3f80:	42ac      	cmp	r4, r5
    3f82:	d1f7      	bne.n	3f74 <_usb_d_dev_reset_epts+0x18>
	memset(prvt_inst.desc_table, 0, sizeof(UsbDeviceDescriptor) * (CONF_USB_D_MAX_EP_N + 1));
    3f84:	2260      	movs	r2, #96	; 0x60
    3f86:	2100      	movs	r1, #0
    3f88:	4802      	ldr	r0, [pc, #8]	; (3f94 <_usb_d_dev_reset_epts+0x38>)
    3f8a:	4b04      	ldr	r3, [pc, #16]	; (3f9c <_usb_d_dev_reset_epts+0x40>)
    3f8c:	4798      	blx	r3
}
    3f8e:	bc04      	pop	{r2}
    3f90:	4690      	mov	r8, r2
    3f92:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3f94:	200001cc 	.word	0x200001cc
    3f98:	00003dc9 	.word	0x00003dc9
    3f9c:	000092f3 	.word	0x000092f3

00003fa0 <_usb_d_dev_in_next>:
{
    3fa0:	b5f0      	push	{r4, r5, r6, r7, lr}
    3fa2:	46c6      	mov	lr, r8
    3fa4:	b500      	push	{lr}
    3fa6:	0004      	movs	r4, r0
    3fa8:	000e      	movs	r6, r1
	uint8_t            epn         = USB_EP_GET_N(ept->ep);
    3faa:	7c83      	ldrb	r3, [r0, #18]
    3fac:	250f      	movs	r5, #15
    3fae:	401d      	ands	r5, r3
	uint16_t           trans_count = isr ? bank[1].PCKSIZE.bit.BYTE_COUNT : 0;
    3fb0:	2900      	cmp	r1, #0
    3fb2:	d100      	bne.n	3fb6 <_usb_d_dev_in_next+0x16>
    3fb4:	e0aa      	b.n	410c <_usb_d_dev_in_next+0x16c>
	UsbDeviceDescBank *bank        = &prvt_inst.desc_table[epn].DeviceDescBank[0];
    3fb6:	016a      	lsls	r2, r5, #5
    3fb8:	4b5a      	ldr	r3, [pc, #360]	; (4124 <_usb_d_dev_in_next+0x184>)
    3fba:	189b      	adds	r3, r3, r2
	uint16_t           trans_count = isr ? bank[1].PCKSIZE.bit.BYTE_COUNT : 0;
    3fbc:	6958      	ldr	r0, [r3, #20]
    3fbe:	0480      	lsls	r0, r0, #18
    3fc0:	0c80      	lsrs	r0, r0, #18
	uint16_t           last_pkt = trans_count & ((ept->size == 1023) ? ept->size : (ept->size - 1));
    3fc2:	8a23      	ldrh	r3, [r4, #16]
    3fc4:	4a58      	ldr	r2, [pc, #352]	; (4128 <_usb_d_dev_in_next+0x188>)
    3fc6:	4293      	cmp	r3, r2
    3fc8:	d100      	bne.n	3fcc <_usb_d_dev_in_next+0x2c>
    3fca:	e09a      	b.n	4102 <_usb_d_dev_in_next+0x162>
    3fcc:	3b01      	subs	r3, #1
    3fce:	b29a      	uxth	r2, r3
	bool               is_ctrl  = _usb_d_dev_ep_is_ctrl(ept);
    3fd0:	7ce3      	ldrb	r3, [r4, #19]
    3fd2:	2707      	movs	r7, #7
    3fd4:	401f      	ands	r7, r3
	if (isr) {
    3fd6:	2e00      	cmp	r6, #0
    3fd8:	d005      	beq.n	3fe6 <_usb_d_dev_in_next+0x46>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    3fda:	016b      	lsls	r3, r5, #5
    3fdc:	4953      	ldr	r1, [pc, #332]	; (412c <_usb_d_dev_in_next+0x18c>)
    3fde:	468c      	mov	ip, r1
    3fe0:	4463      	add	r3, ip
    3fe2:	2102      	movs	r1, #2
    3fe4:	71d9      	strb	r1, [r3, #7]
	ept->trans_count += trans_count;
    3fe6:	68a3      	ldr	r3, [r4, #8]
    3fe8:	18c1      	adds	r1, r0, r3
    3fea:	60a1      	str	r1, [r4, #8]
	if (ept->trans_count < ept->trans_size) {
    3fec:	6863      	ldr	r3, [r4, #4]
    3fee:	4299      	cmp	r1, r3
    3ff0:	d24a      	bcs.n	4088 <_usb_d_dev_in_next+0xe8>
		trans_next = ept->trans_size - ept->trans_count;
    3ff2:	1a5b      	subs	r3, r3, r1
    3ff4:	b29b      	uxth	r3, r3
		if (ept->flags.bits.use_cache) {
    3ff6:	7ce2      	ldrb	r2, [r4, #19]
    3ff8:	0692      	lsls	r2, r2, #26
    3ffa:	d535      	bpl.n	4068 <_usb_d_dev_in_next+0xc8>
    3ffc:	8a22      	ldrh	r2, [r4, #16]
    3ffe:	1c10      	adds	r0, r2, #0
    4000:	b292      	uxth	r2, r2
    4002:	429a      	cmp	r2, r3
    4004:	d900      	bls.n	4008 <_usb_d_dev_in_next+0x68>
    4006:	1c18      	adds	r0, r3, #0
    4008:	b283      	uxth	r3, r0
    400a:	4698      	mov	r8, r3
			memcpy(ept->cache, &ept->trans_buf[ept->trans_count], trans_next);
    400c:	6823      	ldr	r3, [r4, #0]
    400e:	469c      	mov	ip, r3
    4010:	4461      	add	r1, ip
    4012:	4642      	mov	r2, r8
    4014:	68e0      	ldr	r0, [r4, #12]
    4016:	4b46      	ldr	r3, [pc, #280]	; (4130 <_usb_d_dev_in_next+0x190>)
    4018:	4798      	blx	r3
			_usbd_ep_set_buf(epn, 1, (uint32_t)ept->cache);
    401a:	68e1      	ldr	r1, [r4, #12]
	bank->ADDR.reg          = addr;
    401c:	016a      	lsls	r2, r5, #5
    401e:	4b41      	ldr	r3, [pc, #260]	; (4124 <_usb_d_dev_in_next+0x184>)
    4020:	189b      	adds	r3, r3, r2
    4022:	6119      	str	r1, [r3, #16]
	bank->PCKSIZE.bit.BYTE_COUNT = size;
    4024:	016a      	lsls	r2, r5, #5
    4026:	4b3f      	ldr	r3, [pc, #252]	; (4124 <_usb_d_dev_in_next+0x184>)
    4028:	189b      	adds	r3, r3, r2
    402a:	695a      	ldr	r2, [r3, #20]
    402c:	4641      	mov	r1, r8
    402e:	0489      	lsls	r1, r1, #18
    4030:	0c89      	lsrs	r1, r1, #18
    4032:	0b92      	lsrs	r2, r2, #14
    4034:	0392      	lsls	r2, r2, #14
    4036:	430a      	orrs	r2, r1
    4038:	615a      	str	r2, [r3, #20]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = count;
    403a:	695a      	ldr	r2, [r3, #20]
    403c:	493d      	ldr	r1, [pc, #244]	; (4134 <_usb_d_dev_in_next+0x194>)
    403e:	400a      	ands	r2, r1
    4040:	615a      	str	r2, [r3, #20]
	if (!isr) {
    4042:	2e00      	cmp	r6, #0
    4044:	d107      	bne.n	4056 <_usb_d_dev_in_next+0xb6>
		if (is_ctrl) {
    4046:	2f01      	cmp	r7, #1
    4048:	d059      	beq.n	40fe <_usb_d_dev_in_next+0x15e>
			inten = USB_D_BANK1_INT_FLAGS;
    404a:	224a      	movs	r2, #74	; 0x4a
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    404c:	016b      	lsls	r3, r5, #5
    404e:	493a      	ldr	r1, [pc, #232]	; (4138 <_usb_d_dev_in_next+0x198>)
    4050:	468c      	mov	ip, r1
    4052:	4463      	add	r3, ip
    4054:	701a      	strb	r2, [r3, #0]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    4056:	016d      	lsls	r5, r5, #5
    4058:	4b34      	ldr	r3, [pc, #208]	; (412c <_usb_d_dev_in_next+0x18c>)
    405a:	469c      	mov	ip, r3
    405c:	4465      	add	r5, ip
    405e:	2380      	movs	r3, #128	; 0x80
    4060:	716b      	strb	r3, [r5, #5]
}
    4062:	bc04      	pop	{r2}
    4064:	4690      	mov	r8, r2
    4066:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4068:	1c1a      	adds	r2, r3, #0
    406a:	2080      	movs	r0, #128	; 0x80
    406c:	0180      	lsls	r0, r0, #6
    406e:	4283      	cmp	r3, r0
    4070:	d901      	bls.n	4076 <_usb_d_dev_in_next+0xd6>
    4072:	4b32      	ldr	r3, [pc, #200]	; (413c <_usb_d_dev_in_next+0x19c>)
    4074:	881a      	ldrh	r2, [r3, #0]
    4076:	b293      	uxth	r3, r2
    4078:	4698      	mov	r8, r3
			_usbd_ep_set_buf(epn, 1, (uint32_t)&ept->trans_buf[ept->trans_count]);
    407a:	6823      	ldr	r3, [r4, #0]
    407c:	1859      	adds	r1, r3, r1
	bank->ADDR.reg          = addr;
    407e:	016a      	lsls	r2, r5, #5
    4080:	4b28      	ldr	r3, [pc, #160]	; (4124 <_usb_d_dev_in_next+0x184>)
    4082:	189b      	adds	r3, r3, r2
    4084:	6119      	str	r1, [r3, #16]
    4086:	e7cd      	b.n	4024 <_usb_d_dev_in_next+0x84>
	} else if (ept->flags.bits.need_zlp) {
    4088:	7ce3      	ldrb	r3, [r4, #19]
    408a:	06db      	lsls	r3, r3, #27
    408c:	d50f      	bpl.n	40ae <_usb_d_dev_in_next+0x10e>
		ept->flags.bits.need_zlp = 0;
    408e:	7ce3      	ldrb	r3, [r4, #19]
    4090:	2210      	movs	r2, #16
    4092:	4393      	bics	r3, r2
    4094:	74e3      	strb	r3, [r4, #19]
	bank->PCKSIZE.bit.BYTE_COUNT = size;
    4096:	016a      	lsls	r2, r5, #5
    4098:	4b22      	ldr	r3, [pc, #136]	; (4124 <_usb_d_dev_in_next+0x184>)
    409a:	189b      	adds	r3, r3, r2
    409c:	695a      	ldr	r2, [r3, #20]
    409e:	0b92      	lsrs	r2, r2, #14
    40a0:	0392      	lsls	r2, r2, #14
    40a2:	615a      	str	r2, [r3, #20]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = count;
    40a4:	695a      	ldr	r2, [r3, #20]
    40a6:	4923      	ldr	r1, [pc, #140]	; (4134 <_usb_d_dev_in_next+0x194>)
    40a8:	400a      	ands	r2, r1
    40aa:	615a      	str	r2, [r3, #20]
    40ac:	e7c9      	b.n	4042 <_usb_d_dev_in_next+0xa2>
	if (is_ctrl) {
    40ae:	2f01      	cmp	r7, #1
    40b0:	d00e      	beq.n	40d0 <_usb_d_dev_in_next+0x130>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    40b2:	016d      	lsls	r5, r5, #5
    40b4:	4b22      	ldr	r3, [pc, #136]	; (4140 <_usb_d_dev_in_next+0x1a0>)
    40b6:	469c      	mov	ip, r3
    40b8:	4465      	add	r5, ip
    40ba:	234a      	movs	r3, #74	; 0x4a
    40bc:	702b      	strb	r3, [r5, #0]
	if (last_pkt == ept->size) {
    40be:	8a21      	ldrh	r1, [r4, #16]
    40c0:	4002      	ands	r2, r0
    40c2:	4291      	cmp	r1, r2
    40c4:	d00b      	beq.n	40de <_usb_d_dev_in_next+0x13e>
	_usb_d_dev_trans_done(ept, USB_TRANS_DONE);
    40c6:	2100      	movs	r1, #0
    40c8:	0020      	movs	r0, r4
    40ca:	4b1e      	ldr	r3, [pc, #120]	; (4144 <_usb_d_dev_in_next+0x1a4>)
    40cc:	4798      	blx	r3
	return;
    40ce:	e7c8      	b.n	4062 <_usb_d_dev_in_next+0xc2>
    40d0:	016d      	lsls	r5, r5, #5
    40d2:	4b1b      	ldr	r3, [pc, #108]	; (4140 <_usb_d_dev_in_next+0x1a0>)
    40d4:	469c      	mov	ip, r3
    40d6:	4465      	add	r5, ip
    40d8:	234b      	movs	r3, #75	; 0x4b
    40da:	702b      	strb	r3, [r5, #0]
    40dc:	e7ef      	b.n	40be <_usb_d_dev_in_next+0x11e>
		ept->flags.bits.is_busy = 0;
    40de:	7ce3      	ldrb	r3, [r4, #19]
    40e0:	2240      	movs	r2, #64	; 0x40
    40e2:	4393      	bics	r3, r2
    40e4:	74e3      	strb	r3, [r4, #19]
		if (dev_inst.ep_callbacks.more(ept->ep, ept->trans_count)) {
    40e6:	7ca0      	ldrb	r0, [r4, #18]
    40e8:	4b0e      	ldr	r3, [pc, #56]	; (4124 <_usb_d_dev_in_next+0x184>)
    40ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
    40ec:	68a1      	ldr	r1, [r4, #8]
    40ee:	4798      	blx	r3
    40f0:	2800      	cmp	r0, #0
    40f2:	d1b6      	bne.n	4062 <_usb_d_dev_in_next+0xc2>
		ept->flags.bits.is_busy = 1;
    40f4:	7ce3      	ldrb	r3, [r4, #19]
    40f6:	2240      	movs	r2, #64	; 0x40
    40f8:	4313      	orrs	r3, r2
    40fa:	74e3      	strb	r3, [r4, #19]
    40fc:	e7e3      	b.n	40c6 <_usb_d_dev_in_next+0x126>
			inten = USB_D_BANK1_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRFAIL0;
    40fe:	224e      	movs	r2, #78	; 0x4e
    4100:	e7a4      	b.n	404c <_usb_d_dev_in_next+0xac>
	bool               is_ctrl  = _usb_d_dev_ep_is_ctrl(ept);
    4102:	7ce7      	ldrb	r7, [r4, #19]
    4104:	2307      	movs	r3, #7
    4106:	401f      	ands	r7, r3
    4108:	4a07      	ldr	r2, [pc, #28]	; (4128 <_usb_d_dev_in_next+0x188>)
    410a:	e766      	b.n	3fda <_usb_d_dev_in_next+0x3a>
	uint16_t           last_pkt = trans_count & ((ept->size == 1023) ? ept->size : (ept->size - 1));
    410c:	8a03      	ldrh	r3, [r0, #16]
    410e:	4a06      	ldr	r2, [pc, #24]	; (4128 <_usb_d_dev_in_next+0x188>)
    4110:	2000      	movs	r0, #0
    4112:	4293      	cmp	r3, r2
    4114:	d000      	beq.n	4118 <_usb_d_dev_in_next+0x178>
    4116:	e759      	b.n	3fcc <_usb_d_dev_in_next+0x2c>
	bool               is_ctrl  = _usb_d_dev_ep_is_ctrl(ept);
    4118:	7ce3      	ldrb	r3, [r4, #19]
    411a:	2707      	movs	r7, #7
    411c:	401f      	ands	r7, r3
    411e:	2000      	movs	r0, #0
    4120:	4a01      	ldr	r2, [pc, #4]	; (4128 <_usb_d_dev_in_next+0x188>)
    4122:	e760      	b.n	3fe6 <_usb_d_dev_in_next+0x46>
    4124:	200001cc 	.word	0x200001cc
    4128:	000003ff 	.word	0x000003ff
    412c:	41005100 	.word	0x41005100
    4130:	000092e1 	.word	0x000092e1
    4134:	f0003fff 	.word	0xf0003fff
    4138:	41005109 	.word	0x41005109
    413c:	00009c54 	.word	0x00009c54
    4140:	41005108 	.word	0x41005108
    4144:	00003dc9 	.word	0x00003dc9

00004148 <_usb_d_dev_out_next>:
{
    4148:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    414a:	46de      	mov	lr, fp
    414c:	4657      	mov	r7, sl
    414e:	464e      	mov	r6, r9
    4150:	4645      	mov	r5, r8
    4152:	b5e0      	push	{r5, r6, r7, lr}
    4154:	0004      	movs	r4, r0
    4156:	4688      	mov	r8, r1
	uint8_t            epn        = USB_EP_GET_N(ept->ep);
    4158:	7c83      	ldrb	r3, [r0, #18]
    415a:	250f      	movs	r5, #15
    415c:	401d      	ands	r5, r3
	uint16_t           trans_size = isr ? bank->PCKSIZE.bit.MULTI_PACKET_SIZE : 0;
    415e:	2900      	cmp	r1, #0
    4160:	d057      	beq.n	4212 <_usb_d_dev_out_next+0xca>
    4162:	016a      	lsls	r2, r5, #5
    4164:	4b7d      	ldr	r3, [pc, #500]	; (435c <_usb_d_dev_out_next+0x214>)
    4166:	189b      	adds	r3, r3, r2
    4168:	685a      	ldr	r2, [r3, #4]
    416a:	0112      	lsls	r2, r2, #4
    416c:	0c92      	lsrs	r2, r2, #18
    416e:	4692      	mov	sl, r2
	uint16_t           last_trans = isr ? bank->PCKSIZE.bit.BYTE_COUNT : 0;
    4170:	685f      	ldr	r7, [r3, #4]
    4172:	04bf      	lsls	r7, r7, #18
    4174:	0cbf      	lsrs	r7, r7, #18
    4176:	46bb      	mov	fp, r7
	uint16_t           size_mask  = (ept->size == 1023) ? 1023 : (ept->size - 1);
    4178:	8a06      	ldrh	r6, [r0, #16]
    417a:	4b79      	ldr	r3, [pc, #484]	; (4360 <_usb_d_dev_out_next+0x218>)
    417c:	429e      	cmp	r6, r3
    417e:	d100      	bne.n	4182 <_usb_d_dev_out_next+0x3a>
    4180:	e0cd      	b.n	431e <_usb_d_dev_out_next+0x1d6>
    4182:	3e01      	subs	r6, #1
    4184:	b2b6      	uxth	r6, r6
	uint16_t           last_pkt   = last_trans & size_mask;
    4186:	465f      	mov	r7, fp
    4188:	4037      	ands	r7, r6
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    418a:	7ce3      	ldrb	r3, [r4, #19]
    418c:	2207      	movs	r2, #7
    418e:	401a      	ands	r2, r3
    4190:	4691      	mov	r9, r2
	if (isr) {
    4192:	4643      	mov	r3, r8
    4194:	2b00      	cmp	r3, #0
    4196:	d005      	beq.n	41a4 <_usb_d_dev_out_next+0x5c>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    4198:	016b      	lsls	r3, r5, #5
    419a:	4a72      	ldr	r2, [pc, #456]	; (4364 <_usb_d_dev_out_next+0x21c>)
    419c:	4694      	mov	ip, r2
    419e:	4463      	add	r3, ip
    41a0:	2201      	movs	r2, #1
    41a2:	71da      	strb	r2, [r3, #7]
	if (ept->flags.bits.use_cache && ept->trans_size) {
    41a4:	7ce3      	ldrb	r3, [r4, #19]
    41a6:	069b      	lsls	r3, r3, #26
    41a8:	d50f      	bpl.n	41ca <_usb_d_dev_out_next+0x82>
    41aa:	6863      	ldr	r3, [r4, #4]
    41ac:	2b00      	cmp	r3, #0
    41ae:	d039      	beq.n	4224 <_usb_d_dev_out_next+0xdc>
		uint16_t buf_remain = ept->trans_size - ept->trans_count;
    41b0:	68a0      	ldr	r0, [r4, #8]
    41b2:	1a1b      	subs	r3, r3, r0
    41b4:	b29b      	uxth	r3, r3
		memcpy(&ept->trans_buf[ept->trans_count], ept->cache, (buf_remain > last_pkt) ? last_pkt : buf_remain);
    41b6:	6822      	ldr	r2, [r4, #0]
    41b8:	4694      	mov	ip, r2
    41ba:	4460      	add	r0, ip
    41bc:	68e1      	ldr	r1, [r4, #12]
    41be:	001a      	movs	r2, r3
    41c0:	42bb      	cmp	r3, r7
    41c2:	d900      	bls.n	41c6 <_usb_d_dev_out_next+0x7e>
    41c4:	003a      	movs	r2, r7
    41c6:	4b68      	ldr	r3, [pc, #416]	; (4368 <_usb_d_dev_out_next+0x220>)
    41c8:	4798      	blx	r3
	if (ept->trans_size == 0 && ept->flags.bits.need_zlp) {
    41ca:	6863      	ldr	r3, [r4, #4]
    41cc:	2b00      	cmp	r3, #0
    41ce:	d029      	beq.n	4224 <_usb_d_dev_out_next+0xdc>
	} else if (isr && last_pkt < ept->size) {
    41d0:	4642      	mov	r2, r8
    41d2:	2a00      	cmp	r2, #0
    41d4:	d042      	beq.n	425c <_usb_d_dev_out_next+0x114>
    41d6:	8a22      	ldrh	r2, [r4, #16]
    41d8:	42ba      	cmp	r2, r7
    41da:	d93f      	bls.n	425c <_usb_d_dev_out_next+0x114>
		ept->flags.bits.need_zlp = 0;
    41dc:	7ce3      	ldrb	r3, [r4, #19]
    41de:	2210      	movs	r2, #16
    41e0:	4393      	bics	r3, r2
    41e2:	74e3      	strb	r3, [r4, #19]
		ept->trans_count += last_trans;
    41e4:	68a3      	ldr	r3, [r4, #8]
    41e6:	445b      	add	r3, fp
    41e8:	60a3      	str	r3, [r4, #8]
	if (is_ctrl) {
    41ea:	464b      	mov	r3, r9
    41ec:	2b01      	cmp	r3, #1
    41ee:	d100      	bne.n	41f2 <_usb_d_dev_out_next+0xaa>
    41f0:	e087      	b.n	4302 <_usb_d_dev_out_next+0x1ba>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    41f2:	016b      	lsls	r3, r5, #5
    41f4:	4a5d      	ldr	r2, [pc, #372]	; (436c <_usb_d_dev_out_next+0x224>)
    41f6:	4694      	mov	ip, r2
    41f8:	4463      	add	r3, ip
    41fa:	2225      	movs	r2, #37	; 0x25
    41fc:	701a      	strb	r2, [r3, #0]
	if (0 == epn) {
    41fe:	2d00      	cmp	r5, #0
    4200:	d102      	bne.n	4208 <_usb_d_dev_out_next+0xc0>
	bank->ADDR.reg          = addr;
    4202:	4b56      	ldr	r3, [pc, #344]	; (435c <_usb_d_dev_out_next+0x214>)
    4204:	68e2      	ldr	r2, [r4, #12]
    4206:	601a      	str	r2, [r3, #0]
	_usb_d_dev_trans_done(ept, USB_TRANS_DONE);
    4208:	2100      	movs	r1, #0
    420a:	0020      	movs	r0, r4
    420c:	4b58      	ldr	r3, [pc, #352]	; (4370 <_usb_d_dev_out_next+0x228>)
    420e:	4798      	blx	r3
	return;
    4210:	e059      	b.n	42c6 <_usb_d_dev_out_next+0x17e>
	uint16_t           size_mask  = (ept->size == 1023) ? 1023 : (ept->size - 1);
    4212:	8a06      	ldrh	r6, [r0, #16]
    4214:	4b52      	ldr	r3, [pc, #328]	; (4360 <_usb_d_dev_out_next+0x218>)
    4216:	429e      	cmp	r6, r3
    4218:	d100      	bne.n	421c <_usb_d_dev_out_next+0xd4>
    421a:	e08e      	b.n	433a <_usb_d_dev_out_next+0x1f2>
    421c:	2300      	movs	r3, #0
    421e:	469b      	mov	fp, r3
    4220:	469a      	mov	sl, r3
    4222:	e7ae      	b.n	4182 <_usb_d_dev_out_next+0x3a>
	if (ept->trans_size == 0 && ept->flags.bits.need_zlp) {
    4224:	7ce3      	ldrb	r3, [r4, #19]
    4226:	06db      	lsls	r3, r3, #27
    4228:	d400      	bmi.n	422c <_usb_d_dev_out_next+0xe4>
    422a:	e07f      	b.n	432c <_usb_d_dev_out_next+0x1e4>
		ept->flags.bits.need_zlp  = 0;
    422c:	7ce3      	ldrb	r3, [r4, #19]
		ept->flags.bits.use_cache = 1;
    422e:	2210      	movs	r2, #16
    4230:	4393      	bics	r3, r2
    4232:	2220      	movs	r2, #32
    4234:	4313      	orrs	r3, r2
    4236:	74e3      	strb	r3, [r4, #19]
	bank->ADDR.reg          = addr;
    4238:	4a48      	ldr	r2, [pc, #288]	; (435c <_usb_d_dev_out_next+0x214>)
    423a:	016b      	lsls	r3, r5, #5
    423c:	68e1      	ldr	r1, [r4, #12]
    423e:	5099      	str	r1, [r3, r2]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = size;
    4240:	8a21      	ldrh	r1, [r4, #16]
    4242:	18d3      	adds	r3, r2, r3
    4244:	685a      	ldr	r2, [r3, #4]
    4246:	0489      	lsls	r1, r1, #18
    4248:	0909      	lsrs	r1, r1, #4
    424a:	484a      	ldr	r0, [pc, #296]	; (4374 <_usb_d_dev_out_next+0x22c>)
    424c:	4002      	ands	r2, r0
    424e:	430a      	orrs	r2, r1
    4250:	605a      	str	r2, [r3, #4]
	bank->PCKSIZE.bit.BYTE_COUNT = count;
    4252:	685a      	ldr	r2, [r3, #4]
    4254:	0b92      	lsrs	r2, r2, #14
    4256:	0392      	lsls	r2, r2, #14
    4258:	605a      	str	r2, [r3, #4]
    425a:	e022      	b.n	42a2 <_usb_d_dev_out_next+0x15a>
		ept->trans_count += trans_size;
    425c:	68a2      	ldr	r2, [r4, #8]
    425e:	4452      	add	r2, sl
    4260:	60a2      	str	r2, [r4, #8]
		if (ept->trans_count < ept->trans_size) {
    4262:	4293      	cmp	r3, r2
    4264:	d9c1      	bls.n	41ea <_usb_d_dev_out_next+0xa2>
			trans_next = ept->trans_size - ept->trans_count;
    4266:	1a9b      	subs	r3, r3, r2
    4268:	b29b      	uxth	r3, r3
			if (ept->flags.bits.use_cache) {
    426a:	7ce1      	ldrb	r1, [r4, #19]
    426c:	0689      	lsls	r1, r1, #26
    426e:	d530      	bpl.n	42d2 <_usb_d_dev_out_next+0x18a>
    4270:	8a22      	ldrh	r2, [r4, #16]
    4272:	1c11      	adds	r1, r2, #0
    4274:	b292      	uxth	r2, r2
    4276:	429a      	cmp	r2, r3
    4278:	d900      	bls.n	427c <_usb_d_dev_out_next+0x134>
    427a:	1c19      	adds	r1, r3, #0
    427c:	b28b      	uxth	r3, r1
				_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    427e:	68e0      	ldr	r0, [r4, #12]
	bank->ADDR.reg          = addr;
    4280:	016a      	lsls	r2, r5, #5
    4282:	4936      	ldr	r1, [pc, #216]	; (435c <_usb_d_dev_out_next+0x214>)
    4284:	5050      	str	r0, [r2, r1]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = size;
    4286:	016a      	lsls	r2, r5, #5
    4288:	4934      	ldr	r1, [pc, #208]	; (435c <_usb_d_dev_out_next+0x214>)
    428a:	1889      	adds	r1, r1, r2
    428c:	684a      	ldr	r2, [r1, #4]
    428e:	049b      	lsls	r3, r3, #18
    4290:	091b      	lsrs	r3, r3, #4
    4292:	4838      	ldr	r0, [pc, #224]	; (4374 <_usb_d_dev_out_next+0x22c>)
    4294:	4002      	ands	r2, r0
    4296:	4313      	orrs	r3, r2
    4298:	604b      	str	r3, [r1, #4]
	bank->PCKSIZE.bit.BYTE_COUNT = count;
    429a:	684b      	ldr	r3, [r1, #4]
    429c:	0b9b      	lsrs	r3, r3, #14
    429e:	039b      	lsls	r3, r3, #14
    42a0:	604b      	str	r3, [r1, #4]
	if (!isr) {
    42a2:	4643      	mov	r3, r8
    42a4:	2b00      	cmp	r3, #0
    42a6:	d108      	bne.n	42ba <_usb_d_dev_out_next+0x172>
			inten = USB_D_BANK0_INT_FLAGS;
    42a8:	2225      	movs	r2, #37	; 0x25
		if (is_ctrl) {
    42aa:	464b      	mov	r3, r9
    42ac:	2b01      	cmp	r3, #1
    42ae:	d02f      	beq.n	4310 <_usb_d_dev_out_next+0x1c8>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    42b0:	016b      	lsls	r3, r5, #5
    42b2:	4931      	ldr	r1, [pc, #196]	; (4378 <_usb_d_dev_out_next+0x230>)
    42b4:	468c      	mov	ip, r1
    42b6:	4463      	add	r3, ip
    42b8:	701a      	strb	r2, [r3, #0]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    42ba:	016d      	lsls	r5, r5, #5
    42bc:	4b29      	ldr	r3, [pc, #164]	; (4364 <_usb_d_dev_out_next+0x21c>)
    42be:	469c      	mov	ip, r3
    42c0:	4465      	add	r5, ip
    42c2:	2340      	movs	r3, #64	; 0x40
    42c4:	712b      	strb	r3, [r5, #4]
}
    42c6:	bc3c      	pop	{r2, r3, r4, r5}
    42c8:	4690      	mov	r8, r2
    42ca:	4699      	mov	r9, r3
    42cc:	46a2      	mov	sl, r4
    42ce:	46ab      	mov	fp, r5
    42d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				if (trans_next > ept->size) {
    42d2:	8a21      	ldrh	r1, [r4, #16]
    42d4:	428b      	cmp	r3, r1
    42d6:	d90a      	bls.n	42ee <_usb_d_dev_out_next+0x1a6>
					if (trans_next > USB_D_DEV_TRANS_MAX) {
    42d8:	2180      	movs	r1, #128	; 0x80
    42da:	0189      	lsls	r1, r1, #6
    42dc:	428b      	cmp	r3, r1
    42de:	d80d      	bhi.n	42fc <_usb_d_dev_out_next+0x1b4>
    42e0:	43b3      	bics	r3, r6
				_usbd_ep_set_buf(epn, 0, (uint32_t)&ept->trans_buf[ept->trans_count]);
    42e2:	6821      	ldr	r1, [r4, #0]
    42e4:	188a      	adds	r2, r1, r2
	bank->ADDR.reg          = addr;
    42e6:	0169      	lsls	r1, r5, #5
    42e8:	481c      	ldr	r0, [pc, #112]	; (435c <_usb_d_dev_out_next+0x214>)
    42ea:	500a      	str	r2, [r1, r0]
    42ec:	e7cb      	b.n	4286 <_usb_d_dev_out_next+0x13e>
				} else if (trans_next < ept->size) {
    42ee:	428b      	cmp	r3, r1
    42f0:	d2f7      	bcs.n	42e2 <_usb_d_dev_out_next+0x19a>
					ept->flags.bits.use_cache = 1;
    42f2:	7ce1      	ldrb	r1, [r4, #19]
    42f4:	2020      	movs	r0, #32
    42f6:	4301      	orrs	r1, r0
    42f8:	74e1      	strb	r1, [r4, #19]
    42fa:	e7f2      	b.n	42e2 <_usb_d_dev_out_next+0x19a>
						trans_next = USB_D_DEV_TRANS_MAX;
    42fc:	2380      	movs	r3, #128	; 0x80
    42fe:	019b      	lsls	r3, r3, #6
    4300:	e7ef      	b.n	42e2 <_usb_d_dev_out_next+0x19a>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    4302:	016b      	lsls	r3, r5, #5
    4304:	4a19      	ldr	r2, [pc, #100]	; (436c <_usb_d_dev_out_next+0x224>)
    4306:	4694      	mov	ip, r2
    4308:	4463      	add	r3, ip
    430a:	222d      	movs	r2, #45	; 0x2d
    430c:	701a      	strb	r2, [r3, #0]
    430e:	e776      	b.n	41fe <_usb_d_dev_out_next+0xb6>
	bank->STATUS_BK.reg     = 0;
    4310:	016a      	lsls	r2, r5, #5
    4312:	4b12      	ldr	r3, [pc, #72]	; (435c <_usb_d_dev_out_next+0x214>)
    4314:	189b      	adds	r3, r3, r2
    4316:	2200      	movs	r2, #0
    4318:	769a      	strb	r2, [r3, #26]
			inten = USB_D_BANK0_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRFAIL1;
    431a:	322d      	adds	r2, #45	; 0x2d
    431c:	e7c8      	b.n	42b0 <_usb_d_dev_out_next+0x168>
	uint16_t           last_pkt   = last_trans & size_mask;
    431e:	05bf      	lsls	r7, r7, #22
    4320:	0dbf      	lsrs	r7, r7, #22
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    4322:	7cc3      	ldrb	r3, [r0, #19]
    4324:	2207      	movs	r2, #7
    4326:	401a      	ands	r2, r3
    4328:	4691      	mov	r9, r2
    432a:	e735      	b.n	4198 <_usb_d_dev_out_next+0x50>
	} else if (isr && last_pkt < ept->size) {
    432c:	4643      	mov	r3, r8
    432e:	2b00      	cmp	r3, #0
    4330:	d10c      	bne.n	434c <_usb_d_dev_out_next+0x204>
		ept->trans_count += trans_size;
    4332:	68a3      	ldr	r3, [r4, #8]
    4334:	4453      	add	r3, sl
    4336:	60a3      	str	r3, [r4, #8]
    4338:	e757      	b.n	41ea <_usb_d_dev_out_next+0xa2>
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    433a:	7cc3      	ldrb	r3, [r0, #19]
    433c:	2207      	movs	r2, #7
    433e:	401a      	ands	r2, r3
    4340:	4691      	mov	r9, r2
	uint16_t           last_pkt   = last_trans & size_mask;
    4342:	2700      	movs	r7, #0
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    4344:	2300      	movs	r3, #0
    4346:	469b      	mov	fp, r3
    4348:	469a      	mov	sl, r3
    434a:	e72b      	b.n	41a4 <_usb_d_dev_out_next+0x5c>
	} else if (isr && last_pkt < ept->size) {
    434c:	8a23      	ldrh	r3, [r4, #16]
    434e:	42bb      	cmp	r3, r7
    4350:	d900      	bls.n	4354 <_usb_d_dev_out_next+0x20c>
    4352:	e743      	b.n	41dc <_usb_d_dev_out_next+0x94>
		ept->trans_count += trans_size;
    4354:	68a3      	ldr	r3, [r4, #8]
    4356:	4453      	add	r3, sl
    4358:	60a3      	str	r3, [r4, #8]
    435a:	e746      	b.n	41ea <_usb_d_dev_out_next+0xa2>
    435c:	200001cc 	.word	0x200001cc
    4360:	000003ff 	.word	0x000003ff
    4364:	41005100 	.word	0x41005100
    4368:	000092e1 	.word	0x000092e1
    436c:	41005108 	.word	0x41005108
    4370:	00003dc9 	.word	0x00003dc9
    4374:	f0003fff 	.word	0xf0003fff
    4378:	41005109 	.word	0x41005109

0000437c <_usb_d_dev_init>:
{
    437c:	b510      	push	{r4, lr}
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    437e:	492d      	ldr	r1, [pc, #180]	; (4434 <_usb_d_dev_init+0xb8>)
    4380:	2201      	movs	r2, #1
    4382:	788b      	ldrb	r3, [r1, #2]
    4384:	4213      	tst	r3, r2
    4386:	d1fc      	bne.n	4382 <_usb_d_dev_init+0x6>
    4388:	492a      	ldr	r1, [pc, #168]	; (4434 <_usb_d_dev_init+0xb8>)
    438a:	2203      	movs	r2, #3
    438c:	788b      	ldrb	r3, [r1, #2]
    438e:	4213      	tst	r3, r2
    4390:	d1fc      	bne.n	438c <_usb_d_dev_init+0x10>
	tmp = ((Usb *)hw)->DEVICE.CTRLA.reg;
    4392:	4b28      	ldr	r3, [pc, #160]	; (4434 <_usb_d_dev_init+0xb8>)
    4394:	781b      	ldrb	r3, [r3, #0]
	if (hri_usbdevice_get_CTRLA_ENABLE_bit(hw)) {
    4396:	079b      	lsls	r3, r3, #30
    4398:	d448      	bmi.n	442c <_usb_d_dev_init+0xb0>
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    439a:	4926      	ldr	r1, [pc, #152]	; (4434 <_usb_d_dev_init+0xb8>)
    439c:	2201      	movs	r2, #1
    439e:	788b      	ldrb	r3, [r1, #2]
    43a0:	4213      	tst	r3, r2
    43a2:	d1fc      	bne.n	439e <_usb_d_dev_init+0x22>
	((Usb *)hw)->DEVICE.CTRLA.reg |= USB_CTRLA_SWRST;
    43a4:	4a23      	ldr	r2, [pc, #140]	; (4434 <_usb_d_dev_init+0xb8>)
    43a6:	7813      	ldrb	r3, [r2, #0]
    43a8:	2101      	movs	r1, #1
    43aa:	430b      	orrs	r3, r1
    43ac:	7013      	strb	r3, [r2, #0]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    43ae:	0011      	movs	r1, r2
    43b0:	2201      	movs	r2, #1
    43b2:	788b      	ldrb	r3, [r1, #2]
    43b4:	4213      	tst	r3, r2
    43b6:	d1fc      	bne.n	43b2 <_usb_d_dev_init+0x36>
	dev_inst.callbacks.sof   = (_usb_d_dev_sof_cb_t)_dummy_func_no_return;
    43b8:	4b1f      	ldr	r3, [pc, #124]	; (4438 <_usb_d_dev_init+0xbc>)
    43ba:	4a20      	ldr	r2, [pc, #128]	; (443c <_usb_d_dev_init+0xc0>)
    43bc:	661a      	str	r2, [r3, #96]	; 0x60
	dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)_dummy_func_no_return;
    43be:	665a      	str	r2, [r3, #100]	; 0x64
	dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)_dummy_func_no_return;
    43c0:	669a      	str	r2, [r3, #104]	; 0x68
	dev_inst.ep_callbacks.more  = (_usb_d_dev_ep_cb_more_t)_dummy_func_no_return;
    43c2:	66da      	str	r2, [r3, #108]	; 0x6c
	dev_inst.ep_callbacks.done  = (_usb_d_dev_ep_cb_done_t)_dummy_func_no_return;
    43c4:	671a      	str	r2, [r3, #112]	; 0x70
	_usb_d_dev_reset_epts();
    43c6:	4b1e      	ldr	r3, [pc, #120]	; (4440 <_usb_d_dev_init+0xc4>)
    43c8:	4798      	blx	r3
	    = (*((uint32_t *)(NVMCTRL_OTP4) + (NVM_USB_PAD_TRANSN_POS / 32)) >> (NVM_USB_PAD_TRANSN_POS % 32))
    43ca:	4b1e      	ldr	r3, [pc, #120]	; (4444 <_usb_d_dev_init+0xc8>)
    43cc:	681b      	ldr	r3, [r3, #0]
    43ce:	0b5a      	lsrs	r2, r3, #13
	uint32_t pad_transn
    43d0:	211f      	movs	r1, #31
    43d2:	400a      	ands	r2, r1
	    = (*((uint32_t *)(NVMCTRL_OTP4) + (NVM_USB_PAD_TRANSP_POS / 32)) >> (NVM_USB_PAD_TRANSP_POS % 32))
    43d4:	0c98      	lsrs	r0, r3, #18
	uint32_t pad_transp
    43d6:	4001      	ands	r1, r0
	uint32_t pad_trim = (*((uint32_t *)(NVMCTRL_OTP4) + (NVM_USB_PAD_TRIM_POS / 32)) >> (NVM_USB_PAD_TRIM_POS % 32))
    43d8:	019b      	lsls	r3, r3, #6
    43da:	0f5b      	lsrs	r3, r3, #29
	if (pad_transn == 0x1F) {
    43dc:	2a1f      	cmp	r2, #31
    43de:	d01f      	beq.n	4420 <_usb_d_dev_init+0xa4>
	if (pad_transp == 0x1F) {
    43e0:	291f      	cmp	r1, #31
    43e2:	d01f      	beq.n	4424 <_usb_d_dev_init+0xa8>
	if (pad_trim == 0x7) {
    43e4:	2b07      	cmp	r3, #7
    43e6:	d01f      	beq.n	4428 <_usb_d_dev_init+0xac>
	hw->DEVICE.PADCAL.reg = USB_PADCAL_TRANSN(pad_transn) | USB_PADCAL_TRANSP(pad_transp) | USB_PADCAL_TRIM(pad_trim);
    43e8:	0192      	lsls	r2, r2, #6
    43ea:	430a      	orrs	r2, r1
    43ec:	031b      	lsls	r3, r3, #12
    43ee:	4313      	orrs	r3, r2
    43f0:	4a10      	ldr	r2, [pc, #64]	; (4434 <_usb_d_dev_init+0xb8>)
    43f2:	8513      	strh	r3, [r2, #40]	; 0x28
	hw->DEVICE.QOSCTRL.bit.CQOS = 3;
    43f4:	78d3      	ldrb	r3, [r2, #3]
    43f6:	2103      	movs	r1, #3
    43f8:	430b      	orrs	r3, r1
    43fa:	70d3      	strb	r3, [r2, #3]
	hw->DEVICE.QOSCTRL.bit.DQOS = 3;
    43fc:	78d3      	ldrb	r3, [r2, #3]
    43fe:	210c      	movs	r1, #12
    4400:	430b      	orrs	r3, r1
    4402:	70d3      	strb	r3, [r2, #3]
    4404:	0011      	movs	r1, r2
    4406:	2203      	movs	r2, #3
    4408:	788b      	ldrb	r3, [r1, #2]
    440a:	4213      	tst	r3, r2
    440c:	d1fc      	bne.n	4408 <_usb_d_dev_init+0x8c>
	((Usb *)hw)->DEVICE.CTRLA.reg = data;
    440e:	4b09      	ldr	r3, [pc, #36]	; (4434 <_usb_d_dev_init+0xb8>)
    4410:	2204      	movs	r2, #4
    4412:	701a      	strb	r2, [r3, #0]
	hri_usbdevice_write_DESCADD_reg(hw, (uint32_t)prvt_inst.desc_table);
    4414:	4a08      	ldr	r2, [pc, #32]	; (4438 <_usb_d_dev_init+0xbc>)
	((Usb *)hw)->DEVICE.DESCADD.reg = data;
    4416:	625a      	str	r2, [r3, #36]	; 0x24
	((Usb *)hw)->DEVICE.CTRLB.reg = data;
    4418:	2201      	movs	r2, #1
    441a:	811a      	strh	r2, [r3, #8]
	return ERR_NONE;
    441c:	2000      	movs	r0, #0
}
    441e:	bd10      	pop	{r4, pc}
		pad_transn = 5;
    4420:	3a1a      	subs	r2, #26
    4422:	e7dd      	b.n	43e0 <_usb_d_dev_init+0x64>
		pad_transp = 29;
    4424:	3902      	subs	r1, #2
    4426:	e7dd      	b.n	43e4 <_usb_d_dev_init+0x68>
		pad_trim = 5;
    4428:	3b02      	subs	r3, #2
    442a:	e7dd      	b.n	43e8 <_usb_d_dev_init+0x6c>
		return ERR_DENIED;
    442c:	2011      	movs	r0, #17
    442e:	4240      	negs	r0, r0
    4430:	e7f5      	b.n	441e <_usb_d_dev_init+0xa2>
    4432:	46c0      	nop			; (mov r8, r8)
    4434:	41005000 	.word	0x41005000
    4438:	200001cc 	.word	0x200001cc
    443c:	00003d09 	.word	0x00003d09
    4440:	00003f5d 	.word	0x00003f5d
    4444:	00806024 	.word	0x00806024

00004448 <_usb_d_dev_enable>:
	tmp = ((Usb *)hw)->DEVICE.SYNCBUSY.reg;
    4448:	4b10      	ldr	r3, [pc, #64]	; (448c <_usb_d_dev_enable+0x44>)
    444a:	789b      	ldrb	r3, [r3, #2]
	if (hri_usbdevice_get_SYNCBUSY_reg(hw, (USB_SYNCBUSY_ENABLE | USB_SYNCBUSY_SWRST))) {
    444c:	079b      	lsls	r3, r3, #30
    444e:	d11a      	bne.n	4486 <_usb_d_dev_enable+0x3e>
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    4450:	490e      	ldr	r1, [pc, #56]	; (448c <_usb_d_dev_enable+0x44>)
    4452:	2203      	movs	r2, #3
    4454:	788b      	ldrb	r3, [r1, #2]
    4456:	4213      	tst	r3, r2
    4458:	d1fc      	bne.n	4454 <_usb_d_dev_enable+0xc>
	return ((Usb *)hw)->DEVICE.CTRLA.reg;
    445a:	4b0c      	ldr	r3, [pc, #48]	; (448c <_usb_d_dev_enable+0x44>)
    445c:	781b      	ldrb	r3, [r3, #0]
    445e:	b2db      	uxtb	r3, r3
	if ((ctrla & USB_CTRLA_ENABLE) == 0) {
    4460:	079a      	lsls	r2, r3, #30
    4462:	d408      	bmi.n	4476 <_usb_d_dev_enable+0x2e>
		hri_usbdevice_write_CTRLA_reg(hw, ctrla | USB_CTRLA_ENABLE);
    4464:	2002      	movs	r0, #2
    4466:	4318      	orrs	r0, r3
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    4468:	4908      	ldr	r1, [pc, #32]	; (448c <_usb_d_dev_enable+0x44>)
    446a:	2203      	movs	r2, #3
    446c:	788b      	ldrb	r3, [r1, #2]
    446e:	4213      	tst	r3, r2
    4470:	d1fc      	bne.n	446c <_usb_d_dev_enable+0x24>
	((Usb *)hw)->DEVICE.CTRLA.reg = data;
    4472:	4b06      	ldr	r3, [pc, #24]	; (448c <_usb_d_dev_enable+0x44>)
    4474:	7018      	strb	r0, [r3, #0]
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    4476:	2280      	movs	r2, #128	; 0x80
    4478:	4b05      	ldr	r3, [pc, #20]	; (4490 <_usb_d_dev_enable+0x48>)
    447a:	601a      	str	r2, [r3, #0]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    447c:	4a05      	ldr	r2, [pc, #20]	; (4494 <_usb_d_dev_enable+0x4c>)
    447e:	4b03      	ldr	r3, [pc, #12]	; (448c <_usb_d_dev_enable+0x44>)
    4480:	831a      	strh	r2, [r3, #24]
	return ERR_NONE;
    4482:	2000      	movs	r0, #0
}
    4484:	4770      	bx	lr
		return -USB_ERR_DENIED;
    4486:	2011      	movs	r0, #17
    4488:	4240      	negs	r0, r0
    448a:	e7fb      	b.n	4484 <_usb_d_dev_enable+0x3c>
    448c:	41005000 	.word	0x41005000
    4490:	e000e100 	.word	0xe000e100
    4494:	0000028d 	.word	0x0000028d

00004498 <_usb_d_dev_attach>:
	((Usb *)hw)->DEVICE.CTRLB.reg &= ~USB_DEVICE_CTRLB_DETACH;
    4498:	4a02      	ldr	r2, [pc, #8]	; (44a4 <_usb_d_dev_attach+0xc>)
    449a:	8913      	ldrh	r3, [r2, #8]
    449c:	2101      	movs	r1, #1
    449e:	438b      	bics	r3, r1
    44a0:	8113      	strh	r3, [r2, #8]
}
    44a2:	4770      	bx	lr
    44a4:	41005000 	.word	0x41005000

000044a8 <_usb_d_dev_set_address>:
	hri_usbdevice_write_DADD_reg(USB, USB_DEVICE_DADD_ADDEN | USB_DEVICE_DADD_DADD(addr));
    44a8:	2380      	movs	r3, #128	; 0x80
    44aa:	4318      	orrs	r0, r3
	((Usb *)hw)->DEVICE.DADD.reg = data;
    44ac:	4b01      	ldr	r3, [pc, #4]	; (44b4 <_usb_d_dev_set_address+0xc>)
    44ae:	7298      	strb	r0, [r3, #10]
}
    44b0:	4770      	bx	lr
    44b2:	46c0      	nop			; (mov r8, r8)
    44b4:	41005000 	.word	0x41005000

000044b8 <_usb_d_dev_ep_init>:
{
    44b8:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint8_t               epn = USB_EP_GET_N(ep);
    44ba:	240f      	movs	r4, #15
    44bc:	4004      	ands	r4, r0
    44be:	b243      	sxtb	r3, r0
    44c0:	469c      	mov	ip, r3
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    44c2:	2c00      	cmp	r4, #0
    44c4:	d054      	beq.n	4570 <_usb_d_dev_ep_init+0xb8>
    44c6:	0025      	movs	r5, r4
    44c8:	2b00      	cmp	r3, #0
    44ca:	db07      	blt.n	44dc <_usb_d_dev_ep_init+0x24>
	uint8_t                        ep_type = attr & USB_EP_XTYPE_MASK;
    44cc:	2303      	movs	r3, #3
    44ce:	4019      	ands	r1, r3
	const struct _usb_ep_cfg_item *pcfg    = &_usb_ep_cfgs[epn];
    44d0:	0027      	movs	r7, r4
	if (epn > CONF_USB_D_MAX_EP_N) {
    44d2:	2c02      	cmp	r4, #2
    44d4:	d950      	bls.n	4578 <_usb_d_dev_ep_init+0xc0>
		return -USB_ERR_PARAM;
    44d6:	2012      	movs	r0, #18
    44d8:	4240      	negs	r0, r0
    44da:	e025      	b.n	4528 <_usb_d_dev_ep_init+0x70>
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    44dc:	1ca5      	adds	r5, r4, #2
    44de:	e7f5      	b.n	44cc <_usb_d_dev_ep_init+0x14>
	if ((dir ? pcfg->i_cache : pcfg->cache) && ((dir ? pcfg->i_size : pcfg->size) < max_pkt_siz)) {
    44e0:	4663      	mov	r3, ip
    44e2:	2b00      	cmp	r3, #0
    44e4:	db21      	blt.n	452a <_usb_d_dev_ep_init+0x72>
    44e6:	007b      	lsls	r3, r7, #1
    44e8:	19db      	adds	r3, r3, r7
    44ea:	009b      	lsls	r3, r3, #2
    44ec:	4c3b      	ldr	r4, [pc, #236]	; (45dc <_usb_d_dev_ep_init+0x124>)
    44ee:	591b      	ldr	r3, [r3, r4]
    44f0:	2b00      	cmp	r3, #0
    44f2:	d166      	bne.n	45c2 <_usb_d_dev_ep_init+0x10a>
	ept->cache    = (uint8_t *)(dir ? pcfg->i_cache : pcfg->cache);
    44f4:	007b      	lsls	r3, r7, #1
    44f6:	19df      	adds	r7, r3, r7
    44f8:	00bf      	lsls	r7, r7, #2
    44fa:	4b38      	ldr	r3, [pc, #224]	; (45dc <_usb_d_dev_ep_init+0x124>)
    44fc:	58ff      	ldr	r7, [r7, r3]
    44fe:	4b38      	ldr	r3, [pc, #224]	; (45e0 <_usb_d_dev_ep_init+0x128>)
    4500:	00ae      	lsls	r6, r5, #2
    4502:	1974      	adds	r4, r6, r5
    4504:	00a4      	lsls	r4, r4, #2
    4506:	191c      	adds	r4, r3, r4
    4508:	3480      	adds	r4, #128	; 0x80
    450a:	6027      	str	r7, [r4, #0]
	ept->size     = max_pkt_siz;
    450c:	3360      	adds	r3, #96	; 0x60
    450e:	1974      	adds	r4, r6, r5
    4510:	00a4      	lsls	r4, r4, #2
    4512:	191c      	adds	r4, r3, r4
    4514:	84a2      	strh	r2, [r4, #36]	; 0x24
	ept->flags.u8 = (ep_type + 1);
    4516:	3427      	adds	r4, #39	; 0x27
    4518:	3101      	adds	r1, #1
    451a:	7021      	strb	r1, [r4, #0]
	ept->ep       = ep;
    451c:	1975      	adds	r5, r6, r5
    451e:	00ad      	lsls	r5, r5, #2
    4520:	195b      	adds	r3, r3, r5
    4522:	3326      	adds	r3, #38	; 0x26
    4524:	7018      	strb	r0, [r3, #0]
	return USB_OK;
    4526:	2000      	movs	r0, #0
}
    4528:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if ((dir ? pcfg->i_cache : pcfg->cache) && ((dir ? pcfg->i_size : pcfg->size) < max_pkt_siz)) {
    452a:	007b      	lsls	r3, r7, #1
    452c:	19db      	adds	r3, r3, r7
    452e:	009b      	lsls	r3, r3, #2
    4530:	4c2a      	ldr	r4, [pc, #168]	; (45dc <_usb_d_dev_ep_init+0x124>)
    4532:	18e3      	adds	r3, r4, r3
    4534:	685b      	ldr	r3, [r3, #4]
    4536:	2b00      	cmp	r3, #0
    4538:	d106      	bne.n	4548 <_usb_d_dev_ep_init+0x90>
	ept->cache    = (uint8_t *)(dir ? pcfg->i_cache : pcfg->cache);
    453a:	007b      	lsls	r3, r7, #1
    453c:	19df      	adds	r7, r3, r7
    453e:	00bf      	lsls	r7, r7, #2
    4540:	4b26      	ldr	r3, [pc, #152]	; (45dc <_usb_d_dev_ep_init+0x124>)
    4542:	19df      	adds	r7, r3, r7
    4544:	687f      	ldr	r7, [r7, #4]
    4546:	e7da      	b.n	44fe <_usb_d_dev_ep_init+0x46>
	if ((dir ? pcfg->i_cache : pcfg->cache) && ((dir ? pcfg->i_size : pcfg->size) < max_pkt_siz)) {
    4548:	007b      	lsls	r3, r7, #1
    454a:	19db      	adds	r3, r3, r7
    454c:	009b      	lsls	r3, r3, #2
    454e:	4c23      	ldr	r4, [pc, #140]	; (45dc <_usb_d_dev_ep_init+0x124>)
    4550:	18e3      	adds	r3, r4, r3
    4552:	895b      	ldrh	r3, [r3, #10]
    4554:	4293      	cmp	r3, r2
    4556:	daf0      	bge.n	453a <_usb_d_dev_ep_init+0x82>
		return -USB_ERR_FUNC;
    4558:	2013      	movs	r0, #19
    455a:	4240      	negs	r0, r0
    455c:	e7e4      	b.n	4528 <_usb_d_dev_ep_init+0x70>
		return -USB_ERR_REDO;
    455e:	2014      	movs	r0, #20
    4560:	4240      	negs	r0, r0
    4562:	e7e1      	b.n	4528 <_usb_d_dev_ep_init+0x70>
			return -USB_ERR_REDO;
    4564:	2014      	movs	r0, #20
    4566:	4240      	negs	r0, r0
    4568:	e7de      	b.n	4528 <_usb_d_dev_ep_init+0x70>
			return -USB_ERR_FUNC;
    456a:	2013      	movs	r0, #19
    456c:	4240      	negs	r0, r0
    456e:	e7db      	b.n	4528 <_usb_d_dev_ep_init+0x70>
	uint8_t                        ep_type = attr & USB_EP_XTYPE_MASK;
    4570:	2303      	movs	r3, #3
    4572:	4019      	ands	r1, r3
	return &dev_inst.ep[ep_index];
    4574:	2500      	movs	r5, #0
	const struct _usb_ep_cfg_item *pcfg    = &_usb_ep_cfgs[epn];
    4576:	2700      	movs	r7, #0
	if (ept->ep != 0xFF) {
    4578:	00ab      	lsls	r3, r5, #2
    457a:	195b      	adds	r3, r3, r5
    457c:	009e      	lsls	r6, r3, #2
    457e:	4b18      	ldr	r3, [pc, #96]	; (45e0 <_usb_d_dev_ep_init+0x128>)
    4580:	199b      	adds	r3, r3, r6
    4582:	3386      	adds	r3, #134	; 0x86
    4584:	781b      	ldrb	r3, [r3, #0]
    4586:	2bff      	cmp	r3, #255	; 0xff
    4588:	d1e9      	bne.n	455e <_usb_d_dev_ep_init+0xa6>
	if (ep_type == USB_EP_XTYPE_CTRL) {
    458a:	2900      	cmp	r1, #0
    458c:	d1a8      	bne.n	44e0 <_usb_d_dev_ep_init+0x28>
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    458e:	2c00      	cmp	r4, #0
    4590:	d004      	beq.n	459c <_usb_d_dev_ep_init+0xe4>
    4592:	4663      	mov	r3, ip
    4594:	2b00      	cmp	r3, #0
    4596:	db01      	blt.n	459c <_usb_d_dev_ep_init+0xe4>
    4598:	3402      	adds	r4, #2
    459a:	b2e4      	uxtb	r4, r4
		if (ept_in->ep != 0xFF) {
    459c:	00a3      	lsls	r3, r4, #2
    459e:	191b      	adds	r3, r3, r4
    45a0:	009b      	lsls	r3, r3, #2
    45a2:	4c0f      	ldr	r4, [pc, #60]	; (45e0 <_usb_d_dev_ep_init+0x128>)
    45a4:	18e4      	adds	r4, r4, r3
    45a6:	3486      	adds	r4, #134	; 0x86
    45a8:	7823      	ldrb	r3, [r4, #0]
    45aa:	2bff      	cmp	r3, #255	; 0xff
    45ac:	d1da      	bne.n	4564 <_usb_d_dev_ep_init+0xac>
		if (pcfg->cache == NULL) {
    45ae:	007b      	lsls	r3, r7, #1
    45b0:	19db      	adds	r3, r3, r7
    45b2:	009b      	lsls	r3, r3, #2
    45b4:	4c09      	ldr	r4, [pc, #36]	; (45dc <_usb_d_dev_ep_init+0x124>)
    45b6:	591b      	ldr	r3, [r3, r4]
    45b8:	2b00      	cmp	r3, #0
    45ba:	d0d6      	beq.n	456a <_usb_d_dev_ep_init+0xb2>
	if ((dir ? pcfg->i_cache : pcfg->cache) && ((dir ? pcfg->i_size : pcfg->size) < max_pkt_siz)) {
    45bc:	4663      	mov	r3, ip
    45be:	2b00      	cmp	r3, #0
    45c0:	dbb3      	blt.n	452a <_usb_d_dev_ep_init+0x72>
    45c2:	007b      	lsls	r3, r7, #1
    45c4:	19db      	adds	r3, r3, r7
    45c6:	009b      	lsls	r3, r3, #2
    45c8:	4c04      	ldr	r4, [pc, #16]	; (45dc <_usb_d_dev_ep_init+0x124>)
    45ca:	18e3      	adds	r3, r4, r3
    45cc:	891b      	ldrh	r3, [r3, #8]
    45ce:	4293      	cmp	r3, r2
    45d0:	db00      	blt.n	45d4 <_usb_d_dev_ep_init+0x11c>
    45d2:	e78f      	b.n	44f4 <_usb_d_dev_ep_init+0x3c>
		return -USB_ERR_FUNC;
    45d4:	2013      	movs	r0, #19
    45d6:	4240      	negs	r0, r0
    45d8:	e7a6      	b.n	4528 <_usb_d_dev_ep_init+0x70>
    45da:	46c0      	nop			; (mov r8, r8)
    45dc:	00009c58 	.word	0x00009c58
    45e0:	200001cc 	.word	0x200001cc

000045e4 <_usb_d_dev_ep_deinit>:
{
    45e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    45e6:	0005      	movs	r5, r0
	uint8_t               epn = USB_EP_GET_N(ep);
    45e8:	240f      	movs	r4, #15
    45ea:	4004      	ands	r4, r0
    45ec:	b247      	sxtb	r7, r0
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    45ee:	2c00      	cmp	r4, #0
    45f0:	d010      	beq.n	4614 <_usb_d_dev_ep_deinit+0x30>
    45f2:	0020      	movs	r0, r4
    45f4:	2f00      	cmp	r7, #0
    45f6:	db02      	blt.n	45fe <_usb_d_dev_ep_deinit+0x1a>
	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    45f8:	2c02      	cmp	r4, #2
    45fa:	d902      	bls.n	4602 <_usb_d_dev_ep_deinit+0x1e>
}
    45fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    45fe:	1ca0      	adds	r0, r4, #2
    4600:	e7fa      	b.n	45f8 <_usb_d_dev_ep_deinit+0x14>
	return &dev_inst.ep[ep_index];
    4602:	0006      	movs	r6, r0
    4604:	3001      	adds	r0, #1
    4606:	0083      	lsls	r3, r0, #2
    4608:	1818      	adds	r0, r3, r0
    460a:	0080      	lsls	r0, r0, #2
    460c:	4b25      	ldr	r3, [pc, #148]	; (46a4 <_usb_d_dev_ep_deinit+0xc0>)
    460e:	3360      	adds	r3, #96	; 0x60
    4610:	1818      	adds	r0, r3, r0
    4612:	e002      	b.n	461a <_usb_d_dev_ep_deinit+0x36>
    4614:	4823      	ldr	r0, [pc, #140]	; (46a4 <_usb_d_dev_ep_deinit+0xc0>)
    4616:	3074      	adds	r0, #116	; 0x74
    4618:	2600      	movs	r6, #0
	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    461a:	00b3      	lsls	r3, r6, #2
    461c:	199b      	adds	r3, r3, r6
    461e:	009a      	lsls	r2, r3, #2
    4620:	4b20      	ldr	r3, [pc, #128]	; (46a4 <_usb_d_dev_ep_deinit+0xc0>)
    4622:	189b      	adds	r3, r3, r2
    4624:	3386      	adds	r3, #134	; 0x86
    4626:	781b      	ldrb	r3, [r3, #0]
    4628:	2bff      	cmp	r3, #255	; 0xff
    462a:	d0e7      	beq.n	45fc <_usb_d_dev_ep_deinit+0x18>
	_usb_d_dev_trans_stop(ept, dir, USB_TRANS_RESET);
    462c:	0ff9      	lsrs	r1, r7, #31
    462e:	2203      	movs	r2, #3
    4630:	4b1d      	ldr	r3, [pc, #116]	; (46a8 <_usb_d_dev_ep_deinit+0xc4>)
    4632:	4798      	blx	r3
	if (_usb_d_dev_ep_is_ctrl(ept)) {
    4634:	00b3      	lsls	r3, r6, #2
    4636:	199b      	adds	r3, r3, r6
    4638:	009a      	lsls	r2, r3, #2
    463a:	4b1a      	ldr	r3, [pc, #104]	; (46a4 <_usb_d_dev_ep_deinit+0xc0>)
    463c:	189b      	adds	r3, r3, r2
    463e:	3380      	adds	r3, #128	; 0x80
    4640:	79da      	ldrb	r2, [r3, #7]
    4642:	2307      	movs	r3, #7
    4644:	4013      	ands	r3, r2
    4646:	2b01      	cmp	r3, #1
    4648:	d01b      	beq.n	4682 <_usb_d_dev_ep_deinit+0x9e>
	} else if (USB_EP_GET_DIR(ep)) {
    464a:	2f00      	cmp	r7, #0
    464c:	db1f      	blt.n	468e <_usb_d_dev_ep_deinit+0xaa>
    464e:	016d      	lsls	r5, r5, #5
    4650:	4b16      	ldr	r3, [pc, #88]	; (46ac <_usb_d_dev_ep_deinit+0xc8>)
    4652:	469c      	mov	ip, r3
    4654:	4465      	add	r5, ip
		hw->DEVICE.DeviceEndpoint[ep].EPCFG.reg &= ~USB_DEVICE_EPCFG_EPTYPE0_Msk;
    4656:	2280      	movs	r2, #128	; 0x80
    4658:	0052      	lsls	r2, r2, #1
    465a:	5cab      	ldrb	r3, [r5, r2]
    465c:	2107      	movs	r1, #7
    465e:	438b      	bics	r3, r1
    4660:	54ab      	strb	r3, [r5, r2]
	ept->flags.u8 = 0;
    4662:	4b10      	ldr	r3, [pc, #64]	; (46a4 <_usb_d_dev_ep_deinit+0xc0>)
    4664:	3360      	adds	r3, #96	; 0x60
    4666:	00b1      	lsls	r1, r6, #2
    4668:	198a      	adds	r2, r1, r6
    466a:	0092      	lsls	r2, r2, #2
    466c:	189a      	adds	r2, r3, r2
    466e:	3227      	adds	r2, #39	; 0x27
    4670:	2000      	movs	r0, #0
    4672:	7010      	strb	r0, [r2, #0]
	ept->ep       = 0xFF;
    4674:	198e      	adds	r6, r1, r6
    4676:	00b6      	lsls	r6, r6, #2
    4678:	199b      	adds	r3, r3, r6
    467a:	3326      	adds	r3, #38	; 0x26
    467c:	22ff      	movs	r2, #255	; 0xff
    467e:	701a      	strb	r2, [r3, #0]
    4680:	e7bc      	b.n	45fc <_usb_d_dev_ep_deinit+0x18>
		hw->DEVICE.DeviceEndpoint[ep].EPCFG.reg = 0;
    4682:	3508      	adds	r5, #8
    4684:	016d      	lsls	r5, r5, #5
    4686:	2200      	movs	r2, #0
    4688:	4b08      	ldr	r3, [pc, #32]	; (46ac <_usb_d_dev_ep_deinit+0xc8>)
    468a:	54ea      	strb	r2, [r5, r3]
    468c:	e7e9      	b.n	4662 <_usb_d_dev_ep_deinit+0x7e>
    468e:	0164      	lsls	r4, r4, #5
    4690:	4b06      	ldr	r3, [pc, #24]	; (46ac <_usb_d_dev_ep_deinit+0xc8>)
    4692:	469c      	mov	ip, r3
    4694:	4464      	add	r4, ip
		hw->DEVICE.DeviceEndpoint[USB_EP_GET_N(ep)].EPCFG.reg &= ~USB_DEVICE_EPCFG_EPTYPE1_Msk;
    4696:	2280      	movs	r2, #128	; 0x80
    4698:	0052      	lsls	r2, r2, #1
    469a:	5ca3      	ldrb	r3, [r4, r2]
    469c:	2170      	movs	r1, #112	; 0x70
    469e:	438b      	bics	r3, r1
    46a0:	54a3      	strb	r3, [r4, r2]
    46a2:	e7de      	b.n	4662 <_usb_d_dev_ep_deinit+0x7e>
    46a4:	200001cc 	.word	0x200001cc
    46a8:	00003df1 	.word	0x00003df1
    46ac:	41005000 	.word	0x41005000

000046b0 <_usb_d_dev_ep_enable>:
{
    46b0:	b5f0      	push	{r4, r5, r6, r7, lr}
    46b2:	46c6      	mov	lr, r8
    46b4:	b500      	push	{lr}
	uint8_t               epn   = USB_EP_GET_N(ep);
    46b6:	220f      	movs	r2, #15
    46b8:	4002      	ands	r2, r0
    46ba:	b240      	sxtb	r0, r0
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    46bc:	2a00      	cmp	r2, #0
    46be:	d100      	bne.n	46c2 <_usb_d_dev_ep_enable+0x12>
    46c0:	e092      	b.n	47e8 <_usb_d_dev_ep_enable+0x138>
    46c2:	0013      	movs	r3, r2
    46c4:	2800      	cmp	r0, #0
    46c6:	db0b      	blt.n	46e0 <_usb_d_dev_ep_enable+0x30>
	USB_CRITICAL_SECTION_LEAVE();
}

static inline hri_usbendpoint_epcfg_reg_t hri_usbendpoint_read_EPCFG_reg(const void *const hw, uint8_t submodule_index)
{
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    46c8:	0011      	movs	r1, r2
    46ca:	3208      	adds	r2, #8
    46cc:	0152      	lsls	r2, r2, #5
    46ce:	4caa      	ldr	r4, [pc, #680]	; (4978 <_usb_d_dev_ep_enable+0x2c8>)
    46d0:	5d15      	ldrb	r5, [r2, r4]
    46d2:	b2ed      	uxtb	r5, r5
	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    46d4:	2902      	cmp	r1, #2
    46d6:	d800      	bhi.n	46da <_usb_d_dev_ep_enable+0x2a>
    46d8:	e08d      	b.n	47f6 <_usb_d_dev_ep_enable+0x146>
		return -USB_ERR_PARAM;
    46da:	2012      	movs	r0, #18
    46dc:	4240      	negs	r0, r0
    46de:	e0e5      	b.n	48ac <_usb_d_dev_ep_enable+0x1fc>
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    46e0:	1c93      	adds	r3, r2, #2
    46e2:	e7f1      	b.n	46c8 <_usb_d_dev_ep_enable+0x18>
		if (epcfg & (USB_DEVICE_EPCFG_EPTYPE1_Msk | USB_DEVICE_EPCFG_EPTYPE0_Msk)) {
    46e4:	3276      	adds	r2, #118	; 0x76
    46e6:	422a      	tst	r2, r5
    46e8:	d175      	bne.n	47d6 <_usb_d_dev_ep_enable+0x126>
    46ea:	4aa3      	ldr	r2, [pc, #652]	; (4978 <_usb_d_dev_ep_enable+0x2c8>)
    46ec:	4690      	mov	r8, r2
    46ee:	4444      	add	r4, r8
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg = data;
    46f0:	2011      	movs	r0, #17
    46f2:	2280      	movs	r2, #128	; 0x80
    46f4:	0052      	lsls	r2, r2, #1
    46f6:	54a0      	strb	r0, [r4, r2]
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    46f8:	009a      	lsls	r2, r3, #2
    46fa:	18d2      	adds	r2, r2, r3
    46fc:	0095      	lsls	r5, r2, #2
    46fe:	4a9f      	ldr	r2, [pc, #636]	; (497c <_usb_d_dev_ep_enable+0x2cc>)
    4700:	3260      	adds	r2, #96	; 0x60
    4702:	1952      	adds	r2, r2, r5
    4704:	8c92      	ldrh	r2, [r2, #36]	; 0x24
    4706:	0395      	lsls	r5, r2, #14
    4708:	489d      	ldr	r0, [pc, #628]	; (4980 <_usb_d_dev_ep_enable+0x2d0>)
    470a:	4005      	ands	r5, r0
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    470c:	2080      	movs	r0, #128	; 0x80
    470e:	0080      	lsls	r0, r0, #2
    4710:	4282      	cmp	r2, r0
    4712:	d900      	bls.n	4716 <_usb_d_dev_ep_enable+0x66>
    4714:	e0cd      	b.n	48b2 <_usb_d_dev_ep_enable+0x202>
    4716:	3801      	subs	r0, #1
    4718:	38ff      	subs	r0, #255	; 0xff
    471a:	4282      	cmp	r2, r0
    471c:	d900      	bls.n	4720 <_usb_d_dev_ep_enable+0x70>
    471e:	e113      	b.n	4948 <_usb_d_dev_ep_enable+0x298>
    4720:	2a80      	cmp	r2, #128	; 0x80
    4722:	d900      	bls.n	4726 <_usb_d_dev_ep_enable+0x76>
    4724:	e100      	b.n	4928 <_usb_d_dev_ep_enable+0x278>
    4726:	2a40      	cmp	r2, #64	; 0x40
    4728:	d900      	bls.n	472c <_usb_d_dev_ep_enable+0x7c>
    472a:	e115      	b.n	4958 <_usb_d_dev_ep_enable+0x2a8>
    472c:	2a20      	cmp	r2, #32
    472e:	d900      	bls.n	4732 <_usb_d_dev_ep_enable+0x82>
    4730:	e102      	b.n	4938 <_usb_d_dev_ep_enable+0x288>
    4732:	2a10      	cmp	r2, #16
    4734:	d900      	bls.n	4738 <_usb_d_dev_ep_enable+0x88>
    4736:	e117      	b.n	4968 <_usb_d_dev_ep_enable+0x2b8>
    4738:	38f8      	subs	r0, #248	; 0xf8
    473a:	4290      	cmp	r0, r2
    473c:	4180      	sbcs	r0, r0
    473e:	4240      	negs	r0, r0
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    4740:	0706      	lsls	r6, r0, #28
    4742:	4335      	orrs	r5, r6
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    4744:	607d      	str	r5, [r7, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    4746:	0495      	lsls	r5, r2, #18
    4748:	0cad      	lsrs	r5, r5, #18
    474a:	e0b9      	b.n	48c0 <_usb_d_dev_ep_enable+0x210>
		if (epcfg & USB_DEVICE_EPCFG_EPTYPE1_Msk) {
    474c:	2270      	movs	r2, #112	; 0x70
    474e:	422a      	tst	r2, r5
    4750:	d144      	bne.n	47dc <_usb_d_dev_ep_enable+0x12c>
		epcfg |= USB_DEVICE_EPCFG_EPTYPE1(ept->flags.bits.eptype);
    4752:	488a      	ldr	r0, [pc, #552]	; (497c <_usb_d_dev_ep_enable+0x2cc>)
    4754:	009e      	lsls	r6, r3, #2
    4756:	18f2      	adds	r2, r6, r3
    4758:	0092      	lsls	r2, r2, #2
    475a:	1882      	adds	r2, r0, r2
    475c:	3280      	adds	r2, #128	; 0x80
    475e:	79d2      	ldrb	r2, [r2, #7]
    4760:	0752      	lsls	r2, r2, #29
    4762:	0e52      	lsrs	r2, r2, #25
    4764:	4315      	orrs	r5, r2
    4766:	4a84      	ldr	r2, [pc, #528]	; (4978 <_usb_d_dev_ep_enable+0x2c8>)
    4768:	4694      	mov	ip, r2
    476a:	4464      	add	r4, ip
    476c:	2280      	movs	r2, #128	; 0x80
    476e:	0052      	lsls	r2, r2, #1
    4770:	54a5      	strb	r5, [r4, r2]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    4772:	3060      	adds	r0, #96	; 0x60
    4774:	18f6      	adds	r6, r6, r3
    4776:	00b6      	lsls	r6, r6, #2
    4778:	1980      	adds	r0, r0, r6
    477a:	8c80      	ldrh	r0, [r0, #36]	; 0x24
    477c:	0485      	lsls	r5, r0, #18
    477e:	0cad      	lsrs	r5, r5, #18
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    4780:	3201      	adds	r2, #1
    4782:	32ff      	adds	r2, #255	; 0xff
    4784:	2307      	movs	r3, #7
    4786:	4290      	cmp	r0, r2
    4788:	d814      	bhi.n	47b4 <_usb_d_dev_ep_enable+0x104>
    478a:	3a01      	subs	r2, #1
    478c:	3aff      	subs	r2, #255	; 0xff
    478e:	3b01      	subs	r3, #1
    4790:	4290      	cmp	r0, r2
    4792:	d80f      	bhi.n	47b4 <_usb_d_dev_ep_enable+0x104>
    4794:	3b01      	subs	r3, #1
    4796:	2880      	cmp	r0, #128	; 0x80
    4798:	d80c      	bhi.n	47b4 <_usb_d_dev_ep_enable+0x104>
    479a:	3b01      	subs	r3, #1
    479c:	2840      	cmp	r0, #64	; 0x40
    479e:	d809      	bhi.n	47b4 <_usb_d_dev_ep_enable+0x104>
    47a0:	3b01      	subs	r3, #1
    47a2:	2820      	cmp	r0, #32
    47a4:	d806      	bhi.n	47b4 <_usb_d_dev_ep_enable+0x104>
    47a6:	3b01      	subs	r3, #1
    47a8:	2810      	cmp	r0, #16
    47aa:	d803      	bhi.n	47b4 <_usb_d_dev_ep_enable+0x104>
    47ac:	3af8      	subs	r2, #248	; 0xf8
    47ae:	4282      	cmp	r2, r0
    47b0:	4192      	sbcs	r2, r2
    47b2:	4253      	negs	r3, r2
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    47b4:	071b      	lsls	r3, r3, #28
    47b6:	432b      	orrs	r3, r5
    47b8:	617b      	str	r3, [r7, #20]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    47ba:	2280      	movs	r2, #128	; 0x80
    47bc:	2382      	movs	r3, #130	; 0x82
    47be:	005b      	lsls	r3, r3, #1
    47c0:	54e2      	strb	r2, [r4, r3]
	bank->STATUS_BK.reg     = 0;
    47c2:	0149      	lsls	r1, r1, #5
    47c4:	4b6d      	ldr	r3, [pc, #436]	; (497c <_usb_d_dev_ep_enable+0x2cc>)
    47c6:	1859      	adds	r1, r3, r1
    47c8:	2300      	movs	r3, #0
    47ca:	768b      	strb	r3, [r1, #26]
	return USB_OK;
    47cc:	2000      	movs	r0, #0
    47ce:	e06d      	b.n	48ac <_usb_d_dev_ep_enable+0x1fc>
		return -USB_ERR_PARAM;
    47d0:	2012      	movs	r0, #18
    47d2:	4240      	negs	r0, r0
    47d4:	e06a      	b.n	48ac <_usb_d_dev_ep_enable+0x1fc>
			return -USB_ERR_REDO;
    47d6:	2014      	movs	r0, #20
    47d8:	4240      	negs	r0, r0
    47da:	e067      	b.n	48ac <_usb_d_dev_ep_enable+0x1fc>
			return -USB_ERR_REDO;
    47dc:	2014      	movs	r0, #20
    47de:	4240      	negs	r0, r0
    47e0:	e064      	b.n	48ac <_usb_d_dev_ep_enable+0x1fc>
			return -USB_ERR_REDO;
    47e2:	2014      	movs	r0, #20
    47e4:	4240      	negs	r0, r0
    47e6:	e061      	b.n	48ac <_usb_d_dev_ep_enable+0x1fc>
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    47e8:	2380      	movs	r3, #128	; 0x80
    47ea:	005b      	lsls	r3, r3, #1
    47ec:	4a62      	ldr	r2, [pc, #392]	; (4978 <_usb_d_dev_ep_enable+0x2c8>)
    47ee:	5cd5      	ldrb	r5, [r2, r3]
    47f0:	b2ed      	uxtb	r5, r5
    47f2:	2100      	movs	r1, #0
	return &dev_inst.ep[ep_index];
    47f4:	2300      	movs	r3, #0
	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    47f6:	009a      	lsls	r2, r3, #2
    47f8:	18d2      	adds	r2, r2, r3
    47fa:	0094      	lsls	r4, r2, #2
    47fc:	4a5f      	ldr	r2, [pc, #380]	; (497c <_usb_d_dev_ep_enable+0x2cc>)
    47fe:	1912      	adds	r2, r2, r4
    4800:	3286      	adds	r2, #134	; 0x86
    4802:	7812      	ldrb	r2, [r2, #0]
    4804:	4694      	mov	ip, r2
    4806:	2aff      	cmp	r2, #255	; 0xff
    4808:	d0e2      	beq.n	47d0 <_usb_d_dev_ep_enable+0x120>
    480a:	014c      	lsls	r4, r1, #5
	bank = prvt_inst.desc_table[epn].DeviceDescBank;
    480c:	4a5b      	ldr	r2, [pc, #364]	; (497c <_usb_d_dev_ep_enable+0x2cc>)
    480e:	1917      	adds	r7, r2, r4
	if (ept->flags.bits.eptype == USB_D_EPTYPE_CTRL) {
    4810:	009e      	lsls	r6, r3, #2
    4812:	18f6      	adds	r6, r6, r3
    4814:	00b6      	lsls	r6, r6, #2
    4816:	1992      	adds	r2, r2, r6
    4818:	3280      	adds	r2, #128	; 0x80
    481a:	79d6      	ldrb	r6, [r2, #7]
    481c:	2207      	movs	r2, #7
    481e:	4032      	ands	r2, r6
    4820:	2a01      	cmp	r2, #1
    4822:	d100      	bne.n	4826 <_usb_d_dev_ep_enable+0x176>
    4824:	e75e      	b.n	46e4 <_usb_d_dev_ep_enable+0x34>
	} else if (dir) {
    4826:	2800      	cmp	r0, #0
    4828:	db90      	blt.n	474c <_usb_d_dev_ep_enable+0x9c>
		if (epcfg & USB_DEVICE_EPCFG_EPTYPE0_Msk) {
    482a:	076a      	lsls	r2, r5, #29
    482c:	d1d9      	bne.n	47e2 <_usb_d_dev_ep_enable+0x132>
		epcfg |= USB_DEVICE_EPCFG_EPTYPE0(ept->flags.bits.eptype);
    482e:	4853      	ldr	r0, [pc, #332]	; (497c <_usb_d_dev_ep_enable+0x2cc>)
    4830:	009e      	lsls	r6, r3, #2
    4832:	18f2      	adds	r2, r6, r3
    4834:	0092      	lsls	r2, r2, #2
    4836:	1882      	adds	r2, r0, r2
    4838:	3280      	adds	r2, #128	; 0x80
    483a:	79d2      	ldrb	r2, [r2, #7]
    483c:	0752      	lsls	r2, r2, #29
    483e:	0f52      	lsrs	r2, r2, #29
    4840:	4315      	orrs	r5, r2
    4842:	4a4d      	ldr	r2, [pc, #308]	; (4978 <_usb_d_dev_ep_enable+0x2c8>)
    4844:	4694      	mov	ip, r2
    4846:	4464      	add	r4, ip
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg = data;
    4848:	2280      	movs	r2, #128	; 0x80
    484a:	0052      	lsls	r2, r2, #1
    484c:	54a5      	strb	r5, [r4, r2]
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    484e:	3060      	adds	r0, #96	; 0x60
    4850:	18f6      	adds	r6, r6, r3
    4852:	00b6      	lsls	r6, r6, #2
    4854:	1980      	adds	r0, r0, r6
    4856:	8c85      	ldrh	r5, [r0, #36]	; 0x24
    4858:	03ab      	lsls	r3, r5, #14
    485a:	4849      	ldr	r0, [pc, #292]	; (4980 <_usb_d_dev_ep_enable+0x2d0>)
    485c:	4018      	ands	r0, r3
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    485e:	3201      	adds	r2, #1
    4860:	32ff      	adds	r2, #255	; 0xff
    4862:	2307      	movs	r3, #7
    4864:	4295      	cmp	r5, r2
    4866:	d814      	bhi.n	4892 <_usb_d_dev_ep_enable+0x1e2>
    4868:	3a01      	subs	r2, #1
    486a:	3aff      	subs	r2, #255	; 0xff
    486c:	3b01      	subs	r3, #1
    486e:	4295      	cmp	r5, r2
    4870:	d80f      	bhi.n	4892 <_usb_d_dev_ep_enable+0x1e2>
    4872:	3b01      	subs	r3, #1
    4874:	2d80      	cmp	r5, #128	; 0x80
    4876:	d80c      	bhi.n	4892 <_usb_d_dev_ep_enable+0x1e2>
    4878:	3b01      	subs	r3, #1
    487a:	2d40      	cmp	r5, #64	; 0x40
    487c:	d809      	bhi.n	4892 <_usb_d_dev_ep_enable+0x1e2>
    487e:	3b01      	subs	r3, #1
    4880:	2d20      	cmp	r5, #32
    4882:	d806      	bhi.n	4892 <_usb_d_dev_ep_enable+0x1e2>
    4884:	3b01      	subs	r3, #1
    4886:	2d10      	cmp	r5, #16
    4888:	d803      	bhi.n	4892 <_usb_d_dev_ep_enable+0x1e2>
    488a:	3af8      	subs	r2, #248	; 0xf8
    488c:	42aa      	cmp	r2, r5
    488e:	4192      	sbcs	r2, r2
    4890:	4253      	negs	r3, r2
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    4892:	071b      	lsls	r3, r3, #28
    4894:	4303      	orrs	r3, r0
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    4896:	607b      	str	r3, [r7, #4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    4898:	2240      	movs	r2, #64	; 0x40
    489a:	2306      	movs	r3, #6
    489c:	33ff      	adds	r3, #255	; 0xff
    489e:	54e2      	strb	r2, [r4, r3]
	bank->STATUS_BK.reg     = 0;
    48a0:	0149      	lsls	r1, r1, #5
    48a2:	4b36      	ldr	r3, [pc, #216]	; (497c <_usb_d_dev_ep_enable+0x2cc>)
    48a4:	1859      	adds	r1, r3, r1
    48a6:	2300      	movs	r3, #0
    48a8:	728b      	strb	r3, [r1, #10]
	return USB_OK;
    48aa:	2000      	movs	r0, #0
}
    48ac:	bc04      	pop	{r2}
    48ae:	4690      	mov	r8, r2
    48b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    48b2:	20e0      	movs	r0, #224	; 0xe0
    48b4:	05c0      	lsls	r0, r0, #23
    48b6:	4305      	orrs	r5, r0
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    48b8:	607d      	str	r5, [r7, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    48ba:	0495      	lsls	r5, r2, #18
    48bc:	0cad      	lsrs	r5, r5, #18
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    48be:	2007      	movs	r0, #7
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    48c0:	0700      	lsls	r0, r0, #28
    48c2:	4328      	orrs	r0, r5
    48c4:	6178      	str	r0, [r7, #20]
    48c6:	2506      	movs	r5, #6
    48c8:	35ff      	adds	r5, #255	; 0xff
    48ca:	2640      	movs	r6, #64	; 0x40
    48cc:	5566      	strb	r6, [r4, r5]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    48ce:	2782      	movs	r7, #130	; 0x82
    48d0:	007f      	lsls	r7, r7, #1
    48d2:	2080      	movs	r0, #128	; 0x80
    48d4:	55e0      	strb	r0, [r4, r7]
	bank->STATUS_BK.reg     = 0;
    48d6:	4829      	ldr	r0, [pc, #164]	; (497c <_usb_d_dev_ep_enable+0x2cc>)
    48d8:	0149      	lsls	r1, r1, #5
    48da:	1841      	adds	r1, r0, r1
    48dc:	2400      	movs	r4, #0
    48de:	728c      	strb	r4, [r1, #10]
    48e0:	768c      	strb	r4, [r1, #26]
	uint8_t epn = USB_EP_GET_N(ept->ep);
    48e2:	340f      	adds	r4, #15
    48e4:	4661      	mov	r1, ip
    48e6:	400c      	ands	r4, r1
	_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    48e8:	0099      	lsls	r1, r3, #2
    48ea:	18c9      	adds	r1, r1, r3
    48ec:	0089      	lsls	r1, r1, #2
    48ee:	1841      	adds	r1, r0, r1
    48f0:	3180      	adds	r1, #128	; 0x80
    48f2:	6809      	ldr	r1, [r1, #0]
	bank->ADDR.reg          = addr;
    48f4:	0163      	lsls	r3, r4, #5
    48f6:	5019      	str	r1, [r3, r0]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = size;
    48f8:	18c0      	adds	r0, r0, r3
    48fa:	6841      	ldr	r1, [r0, #4]
    48fc:	0492      	lsls	r2, r2, #18
    48fe:	0914      	lsrs	r4, r2, #4
    4900:	4a20      	ldr	r2, [pc, #128]	; (4984 <_usb_d_dev_ep_enable+0x2d4>)
    4902:	400a      	ands	r2, r1
    4904:	4322      	orrs	r2, r4
    4906:	6042      	str	r2, [r0, #4]
	bank->PCKSIZE.bit.BYTE_COUNT = count;
    4908:	6842      	ldr	r2, [r0, #4]
    490a:	0b92      	lsrs	r2, r2, #14
    490c:	0392      	lsls	r2, r2, #14
    490e:	6042      	str	r2, [r0, #4]
    4910:	4a19      	ldr	r2, [pc, #100]	; (4978 <_usb_d_dev_ep_enable+0x2c8>)
    4912:	189a      	adds	r2, r3, r2
    4914:	21b0      	movs	r1, #176	; 0xb0
    4916:	55d1      	strb	r1, [r2, r7]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    4918:	5556      	strb	r6, [r2, r5]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    491a:	4a1b      	ldr	r2, [pc, #108]	; (4988 <_usb_d_dev_ep_enable+0x2d8>)
    491c:	4694      	mov	ip, r2
    491e:	4463      	add	r3, ip
    4920:	2210      	movs	r2, #16
    4922:	701a      	strb	r2, [r3, #0]
	return USB_OK;
    4924:	2000      	movs	r0, #0
    4926:	e7c1      	b.n	48ac <_usb_d_dev_ep_enable+0x1fc>
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    4928:	20a0      	movs	r0, #160	; 0xa0
    492a:	05c0      	lsls	r0, r0, #23
    492c:	4305      	orrs	r5, r0
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    492e:	607d      	str	r5, [r7, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    4930:	0495      	lsls	r5, r2, #18
    4932:	0cad      	lsrs	r5, r5, #18
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    4934:	2005      	movs	r0, #5
    4936:	e7c3      	b.n	48c0 <_usb_d_dev_ep_enable+0x210>
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    4938:	20c0      	movs	r0, #192	; 0xc0
    493a:	0580      	lsls	r0, r0, #22
    493c:	4305      	orrs	r5, r0
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    493e:	607d      	str	r5, [r7, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    4940:	0495      	lsls	r5, r2, #18
    4942:	0cad      	lsrs	r5, r5, #18
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    4944:	2003      	movs	r0, #3
    4946:	e7bb      	b.n	48c0 <_usb_d_dev_ep_enable+0x210>
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    4948:	20c0      	movs	r0, #192	; 0xc0
    494a:	05c0      	lsls	r0, r0, #23
    494c:	4305      	orrs	r5, r0
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    494e:	607d      	str	r5, [r7, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    4950:	0495      	lsls	r5, r2, #18
    4952:	0cad      	lsrs	r5, r5, #18
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    4954:	2006      	movs	r0, #6
    4956:	e7b3      	b.n	48c0 <_usb_d_dev_ep_enable+0x210>
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    4958:	2080      	movs	r0, #128	; 0x80
    495a:	05c0      	lsls	r0, r0, #23
    495c:	4305      	orrs	r5, r0
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    495e:	607d      	str	r5, [r7, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    4960:	0495      	lsls	r5, r2, #18
    4962:	0cad      	lsrs	r5, r5, #18
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    4964:	2004      	movs	r0, #4
    4966:	e7ab      	b.n	48c0 <_usb_d_dev_ep_enable+0x210>
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    4968:	2080      	movs	r0, #128	; 0x80
    496a:	0580      	lsls	r0, r0, #22
    496c:	4305      	orrs	r5, r0
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    496e:	607d      	str	r5, [r7, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    4970:	0495      	lsls	r5, r2, #18
    4972:	0cad      	lsrs	r5, r5, #18
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    4974:	2002      	movs	r0, #2
    4976:	e7a3      	b.n	48c0 <_usb_d_dev_ep_enable+0x210>
    4978:	41005000 	.word	0x41005000
    497c:	200001cc 	.word	0x200001cc
    4980:	0fffc000 	.word	0x0fffc000
    4984:	f0003fff 	.word	0xf0003fff
    4988:	41005109 	.word	0x41005109

0000498c <_usb_d_dev_ep_stall>:
{
    498c:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint8_t               epn = USB_EP_GET_N(ep);
    498e:	230f      	movs	r3, #15
    4990:	4003      	ands	r3, r0
    4992:	b240      	sxtb	r0, r0
	bool                  dir = USB_EP_GET_DIR(ep);
    4994:	0fc4      	lsrs	r4, r0, #31
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    4996:	2b00      	cmp	r3, #0
    4998:	d009      	beq.n	49ae <_usb_d_dev_ep_stall+0x22>
    499a:	001a      	movs	r2, r3
    499c:	2800      	cmp	r0, #0
    499e:	db04      	blt.n	49aa <_usb_d_dev_ep_stall+0x1e>
	if (epn > CONF_USB_D_MAX_EP_N) {
    49a0:	2b02      	cmp	r3, #2
    49a2:	d905      	bls.n	49b0 <_usb_d_dev_ep_stall+0x24>
		return -USB_ERR_PARAM;
    49a4:	2012      	movs	r0, #18
    49a6:	4240      	negs	r0, r0
    49a8:	e019      	b.n	49de <_usb_d_dev_ep_stall+0x52>
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    49aa:	1c9a      	adds	r2, r3, #2
    49ac:	e7f8      	b.n	49a0 <_usb_d_dev_ep_stall+0x14>
	return &dev_inst.ep[ep_index];
    49ae:	2200      	movs	r2, #0
	if (USB_EP_STALL_SET == ctrl) {
    49b0:	2901      	cmp	r1, #1
    49b2:	d015      	beq.n	49e0 <_usb_d_dev_ep_stall+0x54>
	} else if (USB_EP_STALL_CLR == ctrl) {
    49b4:	2900      	cmp	r1, #0
    49b6:	d036      	beq.n	4a26 <_usb_d_dev_ep_stall+0x9a>
	uint8_t epn = USB_EP_GET_N(ept->ep);
    49b8:	0093      	lsls	r3, r2, #2
    49ba:	189b      	adds	r3, r3, r2
    49bc:	009b      	lsls	r3, r3, #2
    49be:	4a47      	ldr	r2, [pc, #284]	; (4adc <_usb_d_dev_ep_stall+0x150>)
    49c0:	18d2      	adds	r2, r2, r3
    49c2:	3286      	adds	r2, #134	; 0x86
    49c4:	7812      	ldrb	r2, [r2, #0]
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUS.reg;
    49c6:	230f      	movs	r3, #15
    49c8:	4013      	ands	r3, r2
    49ca:	015b      	lsls	r3, r3, #5
    49cc:	4a44      	ldr	r2, [pc, #272]	; (4ae0 <_usb_d_dev_ep_stall+0x154>)
    49ce:	4694      	mov	ip, r2
    49d0:	4463      	add	r3, ip
    49d2:	7998      	ldrb	r0, [r3, #6]
	return (hri_usbendpoint_read_EPSTATUS_reg(hw, epn) & (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    49d4:	2310      	movs	r3, #16
    49d6:	40a3      	lsls	r3, r4
    49d8:	4018      	ands	r0, r3
	return _usbd_ep_is_stalled(epn, dir);
    49da:	1e43      	subs	r3, r0, #1
    49dc:	4198      	sbcs	r0, r3
}
    49de:	bdf0      	pop	{r4, r5, r6, r7, pc}
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    49e0:	2510      	movs	r5, #16
    49e2:	40a5      	lsls	r5, r4
    49e4:	b2ed      	uxtb	r5, r5
	uint8_t epn = USB_EP_GET_N(ept->ep);
    49e6:	493d      	ldr	r1, [pc, #244]	; (4adc <_usb_d_dev_ep_stall+0x150>)
    49e8:	0090      	lsls	r0, r2, #2
    49ea:	1883      	adds	r3, r0, r2
    49ec:	009b      	lsls	r3, r3, #2
    49ee:	18cb      	adds	r3, r1, r3
    49f0:	3386      	adds	r3, #134	; 0x86
    49f2:	781e      	ldrb	r6, [r3, #0]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    49f4:	230f      	movs	r3, #15
    49f6:	4033      	ands	r3, r6
    49f8:	015e      	lsls	r6, r3, #5
    49fa:	4f39      	ldr	r7, [pc, #228]	; (4ae0 <_usb_d_dev_ep_stall+0x154>)
    49fc:	46bc      	mov	ip, r7
    49fe:	4466      	add	r6, ip
    4a00:	7175      	strb	r5, [r6, #5]
	_usbd_ep_int_en(epn, USB_DEVICE_EPINTFLAG_STALL0 << dir);
    4a02:	2520      	movs	r5, #32
    4a04:	40a5      	lsls	r5, r4
	hri_usbendpoint_set_EPINTEN_reg(USB, epn, flags);
    4a06:	b2ec      	uxtb	r4, r5
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    4a08:	015b      	lsls	r3, r3, #5
    4a0a:	4d36      	ldr	r5, [pc, #216]	; (4ae4 <_usb_d_dev_ep_stall+0x158>)
    4a0c:	46ac      	mov	ip, r5
    4a0e:	4463      	add	r3, ip
    4a10:	701c      	strb	r4, [r3, #0]
	ept->flags.bits.is_stalled = 1;
    4a12:	1882      	adds	r2, r0, r2
    4a14:	0092      	lsls	r2, r2, #2
    4a16:	188a      	adds	r2, r1, r2
    4a18:	3280      	adds	r2, #128	; 0x80
    4a1a:	79d3      	ldrb	r3, [r2, #7]
    4a1c:	2108      	movs	r1, #8
    4a1e:	430b      	orrs	r3, r1
    4a20:	71d3      	strb	r3, [r2, #7]
		rc = _usb_d_dev_ep_stall_set(ept, dir);
    4a22:	2000      	movs	r0, #0
    4a24:	e7db      	b.n	49de <_usb_d_dev_ep_stall+0x52>
	uint8_t epn        = USB_EP_GET_N(ept->ep);
    4a26:	0093      	lsls	r3, r2, #2
    4a28:	189b      	adds	r3, r3, r2
    4a2a:	0099      	lsls	r1, r3, #2
    4a2c:	4b2b      	ldr	r3, [pc, #172]	; (4adc <_usb_d_dev_ep_stall+0x150>)
    4a2e:	185b      	adds	r3, r3, r1
    4a30:	3386      	adds	r3, #134	; 0x86
    4a32:	781b      	ldrb	r3, [r3, #0]
    4a34:	210f      	movs	r1, #15
    4a36:	400b      	ands	r3, r1
    4a38:	015d      	lsls	r5, r3, #5
    4a3a:	492b      	ldr	r1, [pc, #172]	; (4ae8 <_usb_d_dev_ep_stall+0x15c>)
    4a3c:	468c      	mov	ip, r1
    4a3e:	4465      	add	r5, ip
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUS.reg;
    4a40:	2183      	movs	r1, #131	; 0x83
    4a42:	0049      	lsls	r1, r1, #1
    4a44:	5c6e      	ldrb	r6, [r5, r1]
	return (hri_usbendpoint_read_EPSTATUS_reg(hw, epn) & (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    4a46:	39f6      	subs	r1, #246	; 0xf6
    4a48:	40a1      	lsls	r1, r4
		rc = _usb_d_dev_ep_stall_clr(ept, dir);
    4a4a:	2000      	movs	r0, #0
	if (!is_stalled) {
    4a4c:	420e      	tst	r6, r1
    4a4e:	d0c6      	beq.n	49de <_usb_d_dev_ep_stall+0x52>
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    4a50:	b2c9      	uxtb	r1, r1
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    4a52:	3005      	adds	r0, #5
    4a54:	30ff      	adds	r0, #255	; 0xff
    4a56:	5429      	strb	r1, [r5, r0]
	_usbd_ep_int_dis(epn, USB_DEVICE_EPINTFLAG_STALL0 << dir);
    4a58:	2120      	movs	r1, #32
    4a5a:	40a1      	lsls	r1, r4
	hri_usbendpoint_clear_EPINTEN_reg(USB, epn, flags);
    4a5c:	b2c8      	uxtb	r0, r1
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    4a5e:	015b      	lsls	r3, r3, #5
    4a60:	4e22      	ldr	r6, [pc, #136]	; (4aec <_usb_d_dev_ep_stall+0x160>)
    4a62:	46b4      	mov	ip, r6
    4a64:	4463      	add	r3, ip
    4a66:	7018      	strb	r0, [r3, #0]
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg;
    4a68:	2308      	movs	r3, #8
    4a6a:	33ff      	adds	r3, #255	; 0xff
    4a6c:	5ceb      	ldrb	r3, [r5, r3]
	if (_usbd_ep_is_stall_sent(epn, dir)) {
    4a6e:	420b      	tst	r3, r1
    4a70:	d009      	beq.n	4a86 <_usb_d_dev_ep_stall+0xfa>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    4a72:	2308      	movs	r3, #8
    4a74:	33ff      	adds	r3, #255	; 0xff
    4a76:	54e8      	strb	r0, [r5, r3]
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_DTGLOUT << bank_n));
    4a78:	3b07      	subs	r3, #7
    4a7a:	3bff      	subs	r3, #255	; 0xff
    4a7c:	40a3      	lsls	r3, r4
    4a7e:	b2db      	uxtb	r3, r3
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    4a80:	2182      	movs	r1, #130	; 0x82
    4a82:	0049      	lsls	r1, r1, #1
    4a84:	546b      	strb	r3, [r5, r1]
	if (_usb_d_dev_ep_is_ctrl(ept)) {
    4a86:	0093      	lsls	r3, r2, #2
    4a88:	189b      	adds	r3, r3, r2
    4a8a:	0099      	lsls	r1, r3, #2
    4a8c:	4b13      	ldr	r3, [pc, #76]	; (4adc <_usb_d_dev_ep_stall+0x150>)
    4a8e:	185b      	adds	r3, r3, r1
    4a90:	3380      	adds	r3, #128	; 0x80
    4a92:	79d9      	ldrb	r1, [r3, #7]
    4a94:	2307      	movs	r3, #7
    4a96:	400b      	ands	r3, r1
    4a98:	2b01      	cmp	r3, #1
    4a9a:	d00b      	beq.n	4ab4 <_usb_d_dev_ep_stall+0x128>
		ept->flags.bits.is_stalled = 0;
    4a9c:	0093      	lsls	r3, r2, #2
    4a9e:	189a      	adds	r2, r3, r2
    4aa0:	0092      	lsls	r2, r2, #2
    4aa2:	4b0e      	ldr	r3, [pc, #56]	; (4adc <_usb_d_dev_ep_stall+0x150>)
    4aa4:	189b      	adds	r3, r3, r2
    4aa6:	3380      	adds	r3, #128	; 0x80
    4aa8:	79da      	ldrb	r2, [r3, #7]
    4aaa:	2108      	movs	r1, #8
    4aac:	438a      	bics	r2, r1
    4aae:	71da      	strb	r2, [r3, #7]
		rc = _usb_d_dev_ep_stall_clr(ept, dir);
    4ab0:	2000      	movs	r0, #0
    4ab2:	e794      	b.n	49de <_usb_d_dev_ep_stall+0x52>
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUS.reg;
    4ab4:	3306      	adds	r3, #6
    4ab6:	33ff      	adds	r3, #255	; 0xff
    4ab8:	5ce9      	ldrb	r1, [r5, r3]
		if ((hri_usbendpoint_read_EPSTATUS_reg(USB, epn) & USB_DEVICE_EPSTATUS_STALLRQ_Msk) == 0) {
    4aba:	3bd6      	subs	r3, #214	; 0xd6
		rc = _usb_d_dev_ep_stall_clr(ept, dir);
    4abc:	2000      	movs	r0, #0
		if ((hri_usbendpoint_read_EPSTATUS_reg(USB, epn) & USB_DEVICE_EPSTATUS_STALLRQ_Msk) == 0) {
    4abe:	4219      	tst	r1, r3
    4ac0:	d000      	beq.n	4ac4 <_usb_d_dev_ep_stall+0x138>
    4ac2:	e78c      	b.n	49de <_usb_d_dev_ep_stall+0x52>
			ept->flags.bits.is_stalled = 0;
    4ac4:	0093      	lsls	r3, r2, #2
    4ac6:	189a      	adds	r2, r3, r2
    4ac8:	0092      	lsls	r2, r2, #2
    4aca:	4b04      	ldr	r3, [pc, #16]	; (4adc <_usb_d_dev_ep_stall+0x150>)
    4acc:	189b      	adds	r3, r3, r2
    4ace:	3380      	adds	r3, #128	; 0x80
    4ad0:	79da      	ldrb	r2, [r3, #7]
    4ad2:	2108      	movs	r1, #8
    4ad4:	438a      	bics	r2, r1
    4ad6:	71da      	strb	r2, [r3, #7]
    4ad8:	e781      	b.n	49de <_usb_d_dev_ep_stall+0x52>
    4ada:	46c0      	nop			; (mov r8, r8)
    4adc:	200001cc 	.word	0x200001cc
    4ae0:	41005100 	.word	0x41005100
    4ae4:	41005109 	.word	0x41005109
    4ae8:	41005000 	.word	0x41005000
    4aec:	41005108 	.word	0x41005108

00004af0 <_usb_d_dev_ep_read_req>:

int32_t _usb_d_dev_ep_read_req(const uint8_t ep, uint8_t *req_buf)
{
    4af0:	b570      	push	{r4, r5, r6, lr}
    4af2:	000d      	movs	r5, r1
	uint8_t            epn   = USB_EP_GET_N(ep);
    4af4:	230f      	movs	r3, #15
    4af6:	4018      	ands	r0, r3
    4af8:	0144      	lsls	r4, r0, #5
	UsbDeviceDescBank *bank  = prvt_inst.desc_table[epn].DeviceDescBank;
    4afa:	4b16      	ldr	r3, [pc, #88]	; (4b54 <_usb_d_dev_ep_read_req+0x64>)
    4afc:	191b      	adds	r3, r3, r4
	uint32_t           addr  = bank[0].ADDR.reg;
    4afe:	6819      	ldr	r1, [r3, #0]
	uint16_t           bytes = bank[0].PCKSIZE.bit.BYTE_COUNT;
    4b00:	685b      	ldr	r3, [r3, #4]
    4b02:	049b      	lsls	r3, r3, #18
    4b04:	0c9e      	lsrs	r6, r3, #18

	if (epn > CONF_USB_D_MAX_EP_N || !req_buf) {
    4b06:	2802      	cmp	r0, #2
    4b08:	d81a      	bhi.n	4b40 <_usb_d_dev_ep_read_req+0x50>
    4b0a:	2d00      	cmp	r5, #0
    4b0c:	d01b      	beq.n	4b46 <_usb_d_dev_ep_read_req+0x56>
    4b0e:	4b12      	ldr	r3, [pc, #72]	; (4b58 <_usb_d_dev_ep_read_req+0x68>)
    4b10:	469c      	mov	ip, r3
    4b12:	4464      	add	r4, ip
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    4b14:	2380      	movs	r3, #128	; 0x80
    4b16:	005b      	lsls	r3, r3, #1
    4b18:	5ce3      	ldrb	r3, [r4, r3]
		return -USB_ERR_PARAM;
	}
	if (!_usbd_ep_is_ctrl(epn)) {
    4b1a:	2b11      	cmp	r3, #17
    4b1c:	d116      	bne.n	4b4c <_usb_d_dev_ep_read_req+0x5c>
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg;
    4b1e:	2308      	movs	r3, #8
    4b20:	33ff      	adds	r3, #255	; 0xff
    4b22:	5ce3      	ldrb	r3, [r4, r3]
		return -USB_ERR_FUNC;
	}
	if (!_usbd_ep_is_setup(epn)) {
		return ERR_NONE;
    4b24:	2000      	movs	r0, #0
	if (!_usbd_ep_is_setup(epn)) {
    4b26:	06db      	lsls	r3, r3, #27
    4b28:	d400      	bmi.n	4b2c <_usb_d_dev_ep_read_req+0x3c>
	}
	memcpy(req_buf, (void *)addr, 8);
	_usbd_ep_ack_setup(epn);

	return bytes;
}
    4b2a:	bd70      	pop	{r4, r5, r6, pc}
	memcpy(req_buf, (void *)addr, 8);
    4b2c:	2208      	movs	r2, #8
    4b2e:	0028      	movs	r0, r5
    4b30:	4b0a      	ldr	r3, [pc, #40]	; (4b5c <_usb_d_dev_ep_read_req+0x6c>)
    4b32:	4798      	blx	r3
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    4b34:	2210      	movs	r2, #16
    4b36:	2308      	movs	r3, #8
    4b38:	33ff      	adds	r3, #255	; 0xff
    4b3a:	54e2      	strb	r2, [r4, r3]
	return bytes;
    4b3c:	0030      	movs	r0, r6
    4b3e:	e7f4      	b.n	4b2a <_usb_d_dev_ep_read_req+0x3a>
		return -USB_ERR_PARAM;
    4b40:	2012      	movs	r0, #18
    4b42:	4240      	negs	r0, r0
    4b44:	e7f1      	b.n	4b2a <_usb_d_dev_ep_read_req+0x3a>
    4b46:	2012      	movs	r0, #18
    4b48:	4240      	negs	r0, r0
    4b4a:	e7ee      	b.n	4b2a <_usb_d_dev_ep_read_req+0x3a>
		return -USB_ERR_FUNC;
    4b4c:	2013      	movs	r0, #19
    4b4e:	4240      	negs	r0, r0
    4b50:	e7eb      	b.n	4b2a <_usb_d_dev_ep_read_req+0x3a>
    4b52:	46c0      	nop			; (mov r8, r8)
    4b54:	200001cc 	.word	0x200001cc
    4b58:	41005000 	.word	0x41005000
    4b5c:	000092e1 	.word	0x000092e1

00004b60 <_usb_d_dev_ep_trans>:

int32_t _usb_d_dev_ep_trans(const struct usb_d_transfer *trans)
{
    4b60:	b5f0      	push	{r4, r5, r6, r7, lr}
    4b62:	46de      	mov	lr, fp
    4b64:	4657      	mov	r7, sl
    4b66:	464e      	mov	r6, r9
    4b68:	4645      	mov	r5, r8
    4b6a:	b5e0      	push	{r5, r6, r7, lr}
    4b6c:	b085      	sub	sp, #20
    4b6e:	4680      	mov	r8, r0
	uint8_t               epn = USB_EP_GET_N(trans->ep);
    4b70:	7a06      	ldrb	r6, [r0, #8]
    4b72:	230f      	movs	r3, #15
    4b74:	4033      	ands	r3, r6
    4b76:	b276      	sxtb	r6, r6
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    4b78:	2b00      	cmp	r3, #0
    4b7a:	d100      	bne.n	4b7e <_usb_d_dev_ep_trans+0x1e>
    4b7c:	e0d3      	b.n	4d26 <_usb_d_dev_ep_trans+0x1c6>
    4b7e:	0018      	movs	r0, r3
    4b80:	2e00      	cmp	r6, #0
    4b82:	db39      	blt.n	4bf8 <_usb_d_dev_ep_trans+0x98>
	return &dev_inst.ep[ep_index];
    4b84:	0004      	movs	r4, r0
    4b86:	4a73      	ldr	r2, [pc, #460]	; (4d54 <_usb_d_dev_ep_trans+0x1f4>)
    4b88:	3260      	adds	r2, #96	; 0x60
    4b8a:	1c41      	adds	r1, r0, #1
    4b8c:	008d      	lsls	r5, r1, #2
    4b8e:	186d      	adds	r5, r5, r1
    4b90:	00ad      	lsls	r5, r5, #2
    4b92:	1955      	adds	r5, r2, r5
	bool                  dir = USB_EP_GET_DIR(trans->ep);
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);

	uint16_t size_mask      = (ept->size == 1023) ? 1023 : (ept->size - 1);
    4b94:	0081      	lsls	r1, r0, #2
    4b96:	1809      	adds	r1, r1, r0
    4b98:	0089      	lsls	r1, r1, #2
    4b9a:	1852      	adds	r2, r2, r1
    4b9c:	8c91      	ldrh	r1, [r2, #36]	; 0x24
    4b9e:	4a6e      	ldr	r2, [pc, #440]	; (4d58 <_usb_d_dev_ep_trans+0x1f8>)
    4ba0:	4291      	cmp	r1, r2
    4ba2:	d02b      	beq.n	4bfc <_usb_d_dev_ep_trans+0x9c>
    4ba4:	1e4f      	subs	r7, r1, #1
    4ba6:	b2bf      	uxth	r7, r7
	bool     size_n_aligned = (trans->size & size_mask);
    4ba8:	4642      	mov	r2, r8
    4baa:	6852      	ldr	r2, [r2, #4]
    4bac:	4017      	ands	r7, r2

	bool use_cache = false;

	volatile hal_atomic_t flags;

	if (epn > CONF_USB_D_MAX_EP_N) {
    4bae:	2b02      	cmp	r3, #2
    4bb0:	d900      	bls.n	4bb4 <_usb_d_dev_ep_trans+0x54>
    4bb2:	e0a4      	b.n	4cfe <_usb_d_dev_ep_trans+0x19e>
	 * 1. Buffer not in RAM (cache all).
	 * 2. IN/OUT with unaligned buffer (cache all).
	 * 3. OUT with unaligned packet size (cache last packet).
	 * 4. OUT size < 8 (sub-case for 3).
	 */
	if (!_usb_is_addr4dma(trans->buf, trans->size) || (!_usb_is_aligned(trans->buf))
    4bb4:	4643      	mov	r3, r8
    4bb6:	681b      	ldr	r3, [r3, #0]
    4bb8:	4868      	ldr	r0, [pc, #416]	; (4d5c <_usb_d_dev_ep_trans+0x1fc>)
    4bba:	4283      	cmp	r3, r0
    4bbc:	d920      	bls.n	4c00 <_usb_d_dev_ep_trans+0xa0>
    4bbe:	1898      	adds	r0, r3, r2
    4bc0:	9001      	str	r0, [sp, #4]
    4bc2:	4867      	ldr	r0, [pc, #412]	; (4d60 <_usb_d_dev_ep_trans+0x200>)
    4bc4:	4684      	mov	ip, r0
    4bc6:	9801      	ldr	r0, [sp, #4]
    4bc8:	4560      	cmp	r0, ip
    4bca:	d819      	bhi.n	4c00 <_usb_d_dev_ep_trans+0xa0>
    4bcc:	079b      	lsls	r3, r3, #30
    4bce:	d117      	bne.n	4c00 <_usb_d_dev_ep_trans+0xa0>
	    || (!dir && (trans->size < ept->size))) {
    4bd0:	2e00      	cmp	r6, #0
    4bd2:	db32      	blt.n	4c3a <_usb_d_dev_ep_trans+0xda>
    4bd4:	4291      	cmp	r1, r2
    4bd6:	d900      	bls.n	4bda <_usb_d_dev_ep_trans+0x7a>
    4bd8:	e0af      	b.n	4d3a <_usb_d_dev_ep_trans+0x1da>
			return -USB_ERR_FUNC;
		}
		/* Use cache all the time. */
		use_cache = true;
	}
	if (!dir && size_n_aligned) {
    4bda:	2f00      	cmp	r7, #0
    4bdc:	d030      	beq.n	4c40 <_usb_d_dev_ep_trans+0xe0>
		if (!ept->cache) {
    4bde:	00a3      	lsls	r3, r4, #2
    4be0:	191b      	adds	r3, r3, r4
    4be2:	009a      	lsls	r2, r3, #2
    4be4:	4b5b      	ldr	r3, [pc, #364]	; (4d54 <_usb_d_dev_ep_trans+0x1f4>)
    4be6:	189b      	adds	r3, r3, r2
    4be8:	3380      	adds	r3, #128	; 0x80
    4bea:	681b      	ldr	r3, [r3, #0]
    4bec:	2b00      	cmp	r3, #0
    4bee:	d100      	bne.n	4bf2 <_usb_d_dev_ep_trans+0x92>
    4bf0:	e08b      	b.n	4d0a <_usb_d_dev_ep_trans+0x1aa>
	bool use_cache = false;
    4bf2:	2300      	movs	r3, #0
    4bf4:	4699      	mov	r9, r3
    4bf6:	e00f      	b.n	4c18 <_usb_d_dev_ep_trans+0xb8>
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    4bf8:	1c98      	adds	r0, r3, #2
    4bfa:	e7c3      	b.n	4b84 <_usb_d_dev_ep_trans+0x24>
	uint16_t size_mask      = (ept->size == 1023) ? 1023 : (ept->size - 1);
    4bfc:	000f      	movs	r7, r1
    4bfe:	e7d3      	b.n	4ba8 <_usb_d_dev_ep_trans+0x48>
		if (!ept->cache) {
    4c00:	00a3      	lsls	r3, r4, #2
    4c02:	191b      	adds	r3, r3, r4
    4c04:	009a      	lsls	r2, r3, #2
    4c06:	4b53      	ldr	r3, [pc, #332]	; (4d54 <_usb_d_dev_ep_trans+0x1f4>)
    4c08:	189b      	adds	r3, r3, r2
    4c0a:	3380      	adds	r3, #128	; 0x80
    4c0c:	681b      	ldr	r3, [r3, #0]
    4c0e:	2b00      	cmp	r3, #0
    4c10:	d100      	bne.n	4c14 <_usb_d_dev_ep_trans+0xb4>
    4c12:	e077      	b.n	4d04 <_usb_d_dev_ep_trans+0x1a4>
		use_cache = true;
    4c14:	2301      	movs	r3, #1
    4c16:	4699      	mov	r9, r3
		}
		/* Set 'use_cache' on last packet. */
	}

	/* Check halt */
	if (ept->flags.bits.is_stalled) {
    4c18:	00a3      	lsls	r3, r4, #2
    4c1a:	191b      	adds	r3, r3, r4
    4c1c:	009a      	lsls	r2, r3, #2
    4c1e:	4b4d      	ldr	r3, [pc, #308]	; (4d54 <_usb_d_dev_ep_trans+0x1f4>)
    4c20:	189b      	adds	r3, r3, r2
    4c22:	3380      	adds	r3, #128	; 0x80
    4c24:	79db      	ldrb	r3, [r3, #7]
		return USB_HALTED;
    4c26:	2002      	movs	r0, #2
	if (ept->flags.bits.is_stalled) {
    4c28:	071b      	lsls	r3, r3, #28
    4c2a:	d50c      	bpl.n	4c46 <_usb_d_dev_ep_trans+0xe6>
	} else {
		_usb_d_dev_out_next(ept, false);
	}

	return ERR_NONE;
}
    4c2c:	b005      	add	sp, #20
    4c2e:	bc3c      	pop	{r2, r3, r4, r5}
    4c30:	4690      	mov	r8, r2
    4c32:	4699      	mov	r9, r3
    4c34:	46a2      	mov	sl, r4
    4c36:	46ab      	mov	fp, r5
    4c38:	bdf0      	pop	{r4, r5, r6, r7, pc}
	bool use_cache = false;
    4c3a:	2300      	movs	r3, #0
    4c3c:	4699      	mov	r9, r3
    4c3e:	e7eb      	b.n	4c18 <_usb_d_dev_ep_trans+0xb8>
    4c40:	2300      	movs	r3, #0
    4c42:	4699      	mov	r9, r3
    4c44:	e7e8      	b.n	4c18 <_usb_d_dev_ep_trans+0xb8>
	atomic_enter_critical(&flags);
    4c46:	a803      	add	r0, sp, #12
    4c48:	4b46      	ldr	r3, [pc, #280]	; (4d64 <_usb_d_dev_ep_trans+0x204>)
    4c4a:	4798      	blx	r3
	if (_usb_d_dev_ep_is_busy(ept)) {
    4c4c:	00a3      	lsls	r3, r4, #2
    4c4e:	191b      	adds	r3, r3, r4
    4c50:	009a      	lsls	r2, r3, #2
    4c52:	4b40      	ldr	r3, [pc, #256]	; (4d54 <_usb_d_dev_ep_trans+0x1f4>)
    4c54:	189b      	adds	r3, r3, r2
    4c56:	3380      	adds	r3, #128	; 0x80
    4c58:	79db      	ldrb	r3, [r3, #7]
    4c5a:	065b      	lsls	r3, r3, #25
    4c5c:	d444      	bmi.n	4ce8 <_usb_d_dev_ep_trans+0x188>
	ept->flags.bits.is_busy = 1;
    4c5e:	00a3      	lsls	r3, r4, #2
    4c60:	191b      	adds	r3, r3, r4
    4c62:	009b      	lsls	r3, r3, #2
    4c64:	4a3b      	ldr	r2, [pc, #236]	; (4d54 <_usb_d_dev_ep_trans+0x1f4>)
    4c66:	4693      	mov	fp, r2
    4c68:	449b      	add	fp, r3
    4c6a:	2380      	movs	r3, #128	; 0x80
    4c6c:	445b      	add	r3, fp
    4c6e:	469a      	mov	sl, r3
    4c70:	79db      	ldrb	r3, [r3, #7]
    4c72:	2240      	movs	r2, #64	; 0x40
    4c74:	4313      	orrs	r3, r2
    4c76:	4652      	mov	r2, sl
    4c78:	71d3      	strb	r3, [r2, #7]
	atomic_leave_critical(&flags);
    4c7a:	a803      	add	r0, sp, #12
    4c7c:	4b3a      	ldr	r3, [pc, #232]	; (4d68 <_usb_d_dev_ep_trans+0x208>)
    4c7e:	4798      	blx	r3
	ept->trans_buf   = trans->buf;
    4c80:	465b      	mov	r3, fp
    4c82:	4642      	mov	r2, r8
    4c84:	6812      	ldr	r2, [r2, #0]
    4c86:	675a      	str	r2, [r3, #116]	; 0x74
	ept->trans_size  = trans->size;
    4c88:	4642      	mov	r2, r8
    4c8a:	6852      	ldr	r2, [r2, #4]
    4c8c:	679a      	str	r2, [r3, #120]	; 0x78
	ept->trans_count = 0;
    4c8e:	2300      	movs	r3, #0
    4c90:	465a      	mov	r2, fp
    4c92:	67d3      	str	r3, [r2, #124]	; 0x7c
	bool                  dir = USB_EP_GET_DIR(trans->ep);
    4c94:	0ff2      	lsrs	r2, r6, #31
	ept->flags.bits.dir       = dir;
    4c96:	01d2      	lsls	r2, r2, #7
    4c98:	4653      	mov	r3, sl
    4c9a:	79d9      	ldrb	r1, [r3, #7]
    4c9c:	237f      	movs	r3, #127	; 0x7f
    4c9e:	400b      	ands	r3, r1
	ept->flags.bits.use_cache = use_cache;
    4ca0:	4649      	mov	r1, r9
    4ca2:	0149      	lsls	r1, r1, #5
    4ca4:	4313      	orrs	r3, r2
    4ca6:	2220      	movs	r2, #32
    4ca8:	4393      	bics	r3, r2
    4caa:	430b      	orrs	r3, r1
    4cac:	4652      	mov	r2, sl
    4cae:	71d3      	strb	r3, [r2, #7]
	ept->flags.bits.need_zlp  = (trans->zlp && (!size_n_aligned));
    4cb0:	4643      	mov	r3, r8
    4cb2:	7a5b      	ldrb	r3, [r3, #9]
    4cb4:	2200      	movs	r2, #0
    4cb6:	2b00      	cmp	r3, #0
    4cb8:	d002      	beq.n	4cc0 <_usb_d_dev_ep_trans+0x160>
    4cba:	427a      	negs	r2, r7
    4cbc:	417a      	adcs	r2, r7
    4cbe:	b2d2      	uxtb	r2, r2
    4cc0:	00a3      	lsls	r3, r4, #2
    4cc2:	191c      	adds	r4, r3, r4
    4cc4:	00a4      	lsls	r4, r4, #2
    4cc6:	4b23      	ldr	r3, [pc, #140]	; (4d54 <_usb_d_dev_ep_trans+0x1f4>)
    4cc8:	191b      	adds	r3, r3, r4
    4cca:	3380      	adds	r3, #128	; 0x80
    4ccc:	0112      	lsls	r2, r2, #4
    4cce:	79df      	ldrb	r7, [r3, #7]
    4cd0:	2110      	movs	r1, #16
    4cd2:	438f      	bics	r7, r1
    4cd4:	4317      	orrs	r7, r2
    4cd6:	71df      	strb	r7, [r3, #7]
	if (dir) {
    4cd8:	2e00      	cmp	r6, #0
    4cda:	db0a      	blt.n	4cf2 <_usb_d_dev_ep_trans+0x192>
		_usb_d_dev_out_next(ept, false);
    4cdc:	2100      	movs	r1, #0
    4cde:	0028      	movs	r0, r5
    4ce0:	4b22      	ldr	r3, [pc, #136]	; (4d6c <_usb_d_dev_ep_trans+0x20c>)
    4ce2:	4798      	blx	r3
	return ERR_NONE;
    4ce4:	2000      	movs	r0, #0
    4ce6:	e7a1      	b.n	4c2c <_usb_d_dev_ep_trans+0xcc>
		atomic_leave_critical(&flags);
    4ce8:	a803      	add	r0, sp, #12
    4cea:	4b1f      	ldr	r3, [pc, #124]	; (4d68 <_usb_d_dev_ep_trans+0x208>)
    4cec:	4798      	blx	r3
		return USB_BUSY;
    4cee:	2001      	movs	r0, #1
    4cf0:	e79c      	b.n	4c2c <_usb_d_dev_ep_trans+0xcc>
		_usb_d_dev_in_next(ept, false);
    4cf2:	2100      	movs	r1, #0
    4cf4:	0028      	movs	r0, r5
    4cf6:	4b1e      	ldr	r3, [pc, #120]	; (4d70 <_usb_d_dev_ep_trans+0x210>)
    4cf8:	4798      	blx	r3
	return ERR_NONE;
    4cfa:	2000      	movs	r0, #0
    4cfc:	e796      	b.n	4c2c <_usb_d_dev_ep_trans+0xcc>
		return -USB_ERR_PARAM;
    4cfe:	2012      	movs	r0, #18
    4d00:	4240      	negs	r0, r0
    4d02:	e793      	b.n	4c2c <_usb_d_dev_ep_trans+0xcc>
			return -USB_ERR_FUNC;
    4d04:	2013      	movs	r0, #19
    4d06:	4240      	negs	r0, r0
    4d08:	e790      	b.n	4c2c <_usb_d_dev_ep_trans+0xcc>
			return -USB_ERR_PARAM;
    4d0a:	2012      	movs	r0, #18
    4d0c:	4240      	negs	r0, r0
    4d0e:	e78d      	b.n	4c2c <_usb_d_dev_ep_trans+0xcc>
			return -USB_ERR_FUNC;
    4d10:	2013      	movs	r0, #19
    4d12:	4240      	negs	r0, r0
    4d14:	e78a      	b.n	4c2c <_usb_d_dev_ep_trans+0xcc>
	bool     size_n_aligned = (trans->size & size_mask);
    4d16:	4643      	mov	r3, r8
    4d18:	685a      	ldr	r2, [r3, #4]
    4d1a:	0597      	lsls	r7, r2, #22
    4d1c:	0dbf      	lsrs	r7, r7, #22
	return &dev_inst.ep[ep_index];
    4d1e:	4d0d      	ldr	r5, [pc, #52]	; (4d54 <_usb_d_dev_ep_trans+0x1f4>)
    4d20:	3574      	adds	r5, #116	; 0x74
    4d22:	2400      	movs	r4, #0
    4d24:	e746      	b.n	4bb4 <_usb_d_dev_ep_trans+0x54>
	uint16_t size_mask      = (ept->size == 1023) ? 1023 : (ept->size - 1);
    4d26:	4a0b      	ldr	r2, [pc, #44]	; (4d54 <_usb_d_dev_ep_trans+0x1f4>)
    4d28:	3260      	adds	r2, #96	; 0x60
    4d2a:	8c91      	ldrh	r1, [r2, #36]	; 0x24
    4d2c:	4a0a      	ldr	r2, [pc, #40]	; (4d58 <_usb_d_dev_ep_trans+0x1f8>)
    4d2e:	4291      	cmp	r1, r2
    4d30:	d0f1      	beq.n	4d16 <_usb_d_dev_ep_trans+0x1b6>
	return &dev_inst.ep[ep_index];
    4d32:	4d08      	ldr	r5, [pc, #32]	; (4d54 <_usb_d_dev_ep_trans+0x1f4>)
    4d34:	3574      	adds	r5, #116	; 0x74
    4d36:	2400      	movs	r4, #0
    4d38:	e734      	b.n	4ba4 <_usb_d_dev_ep_trans+0x44>
		if (!ept->cache) {
    4d3a:	00a3      	lsls	r3, r4, #2
    4d3c:	191b      	adds	r3, r3, r4
    4d3e:	009a      	lsls	r2, r3, #2
    4d40:	4b04      	ldr	r3, [pc, #16]	; (4d54 <_usb_d_dev_ep_trans+0x1f4>)
    4d42:	189b      	adds	r3, r3, r2
    4d44:	3380      	adds	r3, #128	; 0x80
    4d46:	681b      	ldr	r3, [r3, #0]
    4d48:	2b00      	cmp	r3, #0
    4d4a:	d0e1      	beq.n	4d10 <_usb_d_dev_ep_trans+0x1b0>
    4d4c:	2301      	movs	r3, #1
    4d4e:	4699      	mov	r9, r3
    4d50:	e762      	b.n	4c18 <_usb_d_dev_ep_trans+0xb8>
    4d52:	46c0      	nop			; (mov r8, r8)
    4d54:	200001cc 	.word	0x200001cc
    4d58:	000003ff 	.word	0x000003ff
    4d5c:	1fffffff 	.word	0x1fffffff
    4d60:	20007fff 	.word	0x20007fff
    4d64:	00002731 	.word	0x00002731
    4d68:	0000273f 	.word	0x0000273f
    4d6c:	00004149 	.word	0x00004149
    4d70:	00003fa1 	.word	0x00003fa1

00004d74 <_usb_d_dev_register_callback>:
	return USB_OK;
}

void _usb_d_dev_register_callback(const enum usb_d_cb_type type, const FUNC_PTR func)
{
	FUNC_PTR f = (func == NULL) ? (FUNC_PTR)_dummy_func_no_return : (FUNC_PTR)func;
    4d74:	1e0b      	subs	r3, r1, #0
    4d76:	d006      	beq.n	4d86 <_usb_d_dev_register_callback+0x12>
	if (type == USB_D_CB_EVENT) {
    4d78:	2801      	cmp	r0, #1
    4d7a:	d006      	beq.n	4d8a <_usb_d_dev_register_callback+0x16>
		dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)f;
	} else if (type == USB_D_CB_SOF) {
    4d7c:	2800      	cmp	r0, #0
    4d7e:	d101      	bne.n	4d84 <_usb_d_dev_register_callback+0x10>
		dev_inst.callbacks.sof = (_usb_d_dev_sof_cb_t)f;
    4d80:	4a03      	ldr	r2, [pc, #12]	; (4d90 <_usb_d_dev_register_callback+0x1c>)
    4d82:	6613      	str	r3, [r2, #96]	; 0x60
	}
}
    4d84:	4770      	bx	lr
	FUNC_PTR f = (func == NULL) ? (FUNC_PTR)_dummy_func_no_return : (FUNC_PTR)func;
    4d86:	4b03      	ldr	r3, [pc, #12]	; (4d94 <_usb_d_dev_register_callback+0x20>)
    4d88:	e7f6      	b.n	4d78 <_usb_d_dev_register_callback+0x4>
		dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)f;
    4d8a:	4a01      	ldr	r2, [pc, #4]	; (4d90 <_usb_d_dev_register_callback+0x1c>)
    4d8c:	6653      	str	r3, [r2, #100]	; 0x64
    4d8e:	e7f9      	b.n	4d84 <_usb_d_dev_register_callback+0x10>
    4d90:	200001cc 	.word	0x200001cc
    4d94:	00003d09 	.word	0x00003d09

00004d98 <_usb_d_dev_register_ep_callback>:

void _usb_d_dev_register_ep_callback(const enum usb_d_dev_ep_cb_type type, const FUNC_PTR func)
{
	FUNC_PTR f = (func == NULL) ? (FUNC_PTR)_dummy_func_no_return : (FUNC_PTR)func;
    4d98:	1e0b      	subs	r3, r1, #0
    4d9a:	d008      	beq.n	4dae <_usb_d_dev_register_ep_callback+0x16>
	if (type == USB_D_DEV_EP_CB_SETUP) {
    4d9c:	2800      	cmp	r0, #0
    4d9e:	d008      	beq.n	4db2 <_usb_d_dev_register_ep_callback+0x1a>
		dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)f;
	} else if (type == USB_D_DEV_EP_CB_MORE) {
    4da0:	2801      	cmp	r0, #1
    4da2:	d009      	beq.n	4db8 <_usb_d_dev_register_ep_callback+0x20>
		dev_inst.ep_callbacks.more = (_usb_d_dev_ep_cb_more_t)f;
	} else if (type == USB_D_DEV_EP_CB_DONE) {
    4da4:	2802      	cmp	r0, #2
    4da6:	d106      	bne.n	4db6 <_usb_d_dev_register_ep_callback+0x1e>
		dev_inst.ep_callbacks.done = (_usb_d_dev_ep_cb_done_t)f;
    4da8:	4a05      	ldr	r2, [pc, #20]	; (4dc0 <_usb_d_dev_register_ep_callback+0x28>)
    4daa:	6713      	str	r3, [r2, #112]	; 0x70
	}
}
    4dac:	e003      	b.n	4db6 <_usb_d_dev_register_ep_callback+0x1e>
	FUNC_PTR f = (func == NULL) ? (FUNC_PTR)_dummy_func_no_return : (FUNC_PTR)func;
    4dae:	4b05      	ldr	r3, [pc, #20]	; (4dc4 <_usb_d_dev_register_ep_callback+0x2c>)
    4db0:	e7f4      	b.n	4d9c <_usb_d_dev_register_ep_callback+0x4>
		dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)f;
    4db2:	4a03      	ldr	r2, [pc, #12]	; (4dc0 <_usb_d_dev_register_ep_callback+0x28>)
    4db4:	6693      	str	r3, [r2, #104]	; 0x68
}
    4db6:	4770      	bx	lr
		dev_inst.ep_callbacks.more = (_usb_d_dev_ep_cb_more_t)f;
    4db8:	4a01      	ldr	r2, [pc, #4]	; (4dc0 <_usb_d_dev_register_ep_callback+0x28>)
    4dba:	66d3      	str	r3, [r2, #108]	; 0x6c
    4dbc:	e7fb      	b.n	4db6 <_usb_d_dev_register_ep_callback+0x1e>
    4dbe:	46c0      	nop			; (mov r8, r8)
    4dc0:	200001cc 	.word	0x200001cc
    4dc4:	00003d09 	.word	0x00003d09

00004dc8 <USB_Handler>:

/**
* \brief USB interrupt handler
*/
void USB_Handler(void)
{
    4dc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint16_t epint = hw->DEVICE.EPINTSMRY.reg;
    4dca:	4b82      	ldr	r3, [pc, #520]	; (4fd4 <USB_Handler+0x20c>)
    4dcc:	8c1e      	ldrh	r6, [r3, #32]
    4dce:	b2b6      	uxth	r6, r6
	if (0 == epint) {
    4dd0:	2e00      	cmp	r6, #0
    4dd2:	d003      	beq.n	4ddc <USB_Handler+0x14>
    4dd4:	4c80      	ldr	r4, [pc, #512]	; (4fd8 <USB_Handler+0x210>)
    4dd6:	3474      	adds	r4, #116	; 0x74
	uint32_t lpm_variable = 0;
    4dd8:	2500      	movs	r5, #0
    4dda:	e0b9      	b.n	4f50 <USB_Handler+0x188>
	return ((Usb *)hw)->DEVICE.INTFLAG.reg;
    4ddc:	8b99      	ldrh	r1, [r3, #28]
	return ((Usb *)hw)->DEVICE.INTENSET.reg;
    4dde:	8b1b      	ldrh	r3, [r3, #24]
	flags &= hri_usbdevice_read_INTEN_reg(USB);
    4de0:	400b      	ands	r3, r1
	if (flags & USB_DEVICE_INTFLAG_SOF) {
    4de2:	075a      	lsls	r2, r3, #29
    4de4:	d417      	bmi.n	4e16 <USB_Handler+0x4e>
	if (flags & USB_DEVICE_INTFLAG_LPMSUSP) {
    4de6:	059a      	lsls	r2, r3, #22
    4de8:	d41c      	bmi.n	4e24 <USB_Handler+0x5c>
	} else if (flags & USB_DEVICE_INTFLAG_RAMACER) {
    4dea:	061a      	lsls	r2, r3, #24
    4dec:	d43e      	bmi.n	4e6c <USB_Handler+0xa4>
	} else if (flags & USB_D_WAKEUP_INT_FLAGS) {
    4dee:	2270      	movs	r2, #112	; 0x70
    4df0:	421a      	tst	r2, r3
    4df2:	d144      	bne.n	4e7e <USB_Handler+0xb6>
	} else if (flags & USB_DEVICE_INTFLAG_EORST) {
    4df4:	071a      	lsls	r2, r3, #28
    4df6:	d45e      	bmi.n	4eb6 <USB_Handler+0xee>
	} else if (flags & USB_DEVICE_INTFLAG_SUSPEND) {
    4df8:	07db      	lsls	r3, r3, #31
    4dfa:	d5eb      	bpl.n	4dd4 <USB_Handler+0xc>
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    4dfc:	4b75      	ldr	r3, [pc, #468]	; (4fd4 <USB_Handler+0x20c>)
    4dfe:	4a77      	ldr	r2, [pc, #476]	; (4fdc <USB_Handler+0x214>)
    4e00:	839a      	strh	r2, [r3, #28]
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    4e02:	829a      	strh	r2, [r3, #20]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    4e04:	3a92      	subs	r2, #146	; 0x92
    4e06:	3aff      	subs	r2, #255	; 0xff
    4e08:	831a      	strh	r2, [r3, #24]
	dev_inst.callbacks.event(USB_EV_SUSPEND, 0);
    4e0a:	4b73      	ldr	r3, [pc, #460]	; (4fd8 <USB_Handler+0x210>)
    4e0c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    4e0e:	2100      	movs	r1, #0
    4e10:	2004      	movs	r0, #4
    4e12:	4798      	blx	r3
    4e14:	e005      	b.n	4e22 <USB_Handler+0x5a>
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    4e16:	2204      	movs	r2, #4
    4e18:	4b6e      	ldr	r3, [pc, #440]	; (4fd4 <USB_Handler+0x20c>)
    4e1a:	839a      	strh	r2, [r3, #28]
	dev_inst.callbacks.sof();
    4e1c:	4b6e      	ldr	r3, [pc, #440]	; (4fd8 <USB_Handler+0x210>)
    4e1e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
    4e20:	4798      	blx	r3

	_usb_d_dev_handler();
}
    4e22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4e24:	4b6b      	ldr	r3, [pc, #428]	; (4fd4 <USB_Handler+0x20c>)
    4e26:	4a6d      	ldr	r2, [pc, #436]	; (4fdc <USB_Handler+0x214>)
    4e28:	839a      	strh	r2, [r3, #28]
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    4e2a:	829a      	strh	r2, [r3, #20]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    4e2c:	3a92      	subs	r2, #146	; 0x92
    4e2e:	3aff      	subs	r2, #255	; 0xff
    4e30:	831a      	strh	r2, [r3, #24]
		if (bank->EXTREG.bit.SUBPID == 0x3) {
    4e32:	4b69      	ldr	r3, [pc, #420]	; (4fd8 <USB_Handler+0x210>)
    4e34:	891b      	ldrh	r3, [r3, #8]
    4e36:	071b      	lsls	r3, r3, #28
    4e38:	0f1b      	lsrs	r3, r3, #28
    4e3a:	2b03      	cmp	r3, #3
    4e3c:	d00c      	beq.n	4e58 <USB_Handler+0x90>
    4e3e:	4b66      	ldr	r3, [pc, #408]	; (4fd8 <USB_Handler+0x210>)
    4e40:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    4e42:	071b      	lsls	r3, r3, #28
    4e44:	0f1b      	lsrs	r3, r3, #28
	uint32_t lpm_variable = 0;
    4e46:	2100      	movs	r1, #0
		UsbDeviceDescBank *bank = &prvt_inst.desc_table[i].DeviceDescBank[0];
    4e48:	3a6f      	subs	r2, #111	; 0x6f
		if (bank->EXTREG.bit.SUBPID == 0x3) {
    4e4a:	2b03      	cmp	r3, #3
    4e4c:	d005      	beq.n	4e5a <USB_Handler+0x92>
	dev_inst.callbacks.event(USB_EV_LPM_SUSPEND, lpm_variable);
    4e4e:	4b62      	ldr	r3, [pc, #392]	; (4fd8 <USB_Handler+0x210>)
    4e50:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    4e52:	2003      	movs	r0, #3
    4e54:	4798      	blx	r3
    4e56:	e7e4      	b.n	4e22 <USB_Handler+0x5a>
		UsbDeviceDescBank *bank = &prvt_inst.desc_table[i].DeviceDescBank[0];
    4e58:	2200      	movs	r2, #0
			lpm_variable = bank->EXTREG.bit.VARIABLE;
    4e5a:	0152      	lsls	r2, r2, #5
    4e5c:	4b5e      	ldr	r3, [pc, #376]	; (4fd8 <USB_Handler+0x210>)
    4e5e:	189b      	adds	r3, r3, r2
    4e60:	8919      	ldrh	r1, [r3, #8]
    4e62:	0449      	lsls	r1, r1, #17
    4e64:	0d49      	lsrs	r1, r1, #21
			bank->EXTREG.reg = 0;
    4e66:	2200      	movs	r2, #0
    4e68:	811a      	strh	r2, [r3, #8]
    4e6a:	e7f0      	b.n	4e4e <USB_Handler+0x86>
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    4e6c:	2280      	movs	r2, #128	; 0x80
    4e6e:	4b59      	ldr	r3, [pc, #356]	; (4fd4 <USB_Handler+0x20c>)
    4e70:	839a      	strh	r2, [r3, #28]
	dev_inst.callbacks.event(USB_EV_ERROR, 0);
    4e72:	4b59      	ldr	r3, [pc, #356]	; (4fd8 <USB_Handler+0x210>)
    4e74:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    4e76:	2100      	movs	r1, #0
    4e78:	2005      	movs	r0, #5
    4e7a:	4798      	blx	r3
    4e7c:	e7d1      	b.n	4e22 <USB_Handler+0x5a>
    4e7e:	4b55      	ldr	r3, [pc, #340]	; (4fd4 <USB_Handler+0x20c>)
    4e80:	839a      	strh	r2, [r3, #28]
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    4e82:	829a      	strh	r2, [r3, #20]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    4e84:	4a55      	ldr	r2, [pc, #340]	; (4fdc <USB_Handler+0x214>)
    4e86:	831a      	strh	r2, [r3, #24]
	if (!(SYSCTRL->DFLLCTRL.reg & SYSCTRL_DFLLCTRL_USBCRM)) {
    4e88:	4b55      	ldr	r3, [pc, #340]	; (4fe0 <USB_Handler+0x218>)
    4e8a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
    4e8c:	069b      	lsls	r3, r3, #26
    4e8e:	d40c      	bmi.n	4eaa <USB_Handler+0xe2>
	tmp = ((Sysctrl *)hw)->PCLKSR.reg;
    4e90:	4953      	ldr	r1, [pc, #332]	; (4fe0 <USB_Handler+0x218>)
	tmp &= mask;
    4e92:	3a32      	subs	r2, #50	; 0x32
    4e94:	3aff      	subs	r2, #255	; 0xff
	tmp = ((Sysctrl *)hw)->PCLKSR.reg;
    4e96:	68cb      	ldr	r3, [r1, #12]
	tmp &= mask;
    4e98:	4013      	ands	r3, r2
		while (hri_sysctrl_get_PCLKSR_reg(SYSCTRL, DFLL_READY_FLAG) != DFLL_READY_FLAG)
    4e9a:	2bd0      	cmp	r3, #208	; 0xd0
    4e9c:	d1fb      	bne.n	4e96 <USB_Handler+0xce>
	dev_inst.callbacks.event(USB_EV_WAKEUP, 0);
    4e9e:	4b4e      	ldr	r3, [pc, #312]	; (4fd8 <USB_Handler+0x210>)
    4ea0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    4ea2:	2100      	movs	r1, #0
    4ea4:	2002      	movs	r0, #2
    4ea6:	4798      	blx	r3
    4ea8:	e7bb      	b.n	4e22 <USB_Handler+0x5a>
	tmp = ((Sysctrl *)hw)->PCLKSR.reg;
    4eaa:	494d      	ldr	r1, [pc, #308]	; (4fe0 <USB_Handler+0x218>)
	tmp &= mask;
    4eac:	2210      	movs	r2, #16
	tmp = ((Sysctrl *)hw)->PCLKSR.reg;
    4eae:	68cb      	ldr	r3, [r1, #12]
		while (hri_sysctrl_get_PCLKSR_reg(SYSCTRL, SYSCTRL_PCLKSR_DFLLRDY) != SYSCTRL_PCLKSR_DFLLRDY)
    4eb0:	421a      	tst	r2, r3
    4eb2:	d0fc      	beq.n	4eae <USB_Handler+0xe6>
    4eb4:	e7f3      	b.n	4e9e <USB_Handler+0xd6>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg = data;
    4eb6:	4b47      	ldr	r3, [pc, #284]	; (4fd4 <USB_Handler+0x20c>)
    4eb8:	2100      	movs	r1, #0
    4eba:	2280      	movs	r2, #128	; 0x80
    4ebc:	0052      	lsls	r2, r2, #1
    4ebe:	5499      	strb	r1, [r3, r2]
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    4ec0:	3af8      	subs	r2, #248	; 0xf8
    4ec2:	839a      	strh	r2, [r3, #28]
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    4ec4:	3268      	adds	r2, #104	; 0x68
    4ec6:	829a      	strh	r2, [r3, #20]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    4ec8:	4a44      	ldr	r2, [pc, #272]	; (4fdc <USB_Handler+0x214>)
    4eca:	831a      	strh	r2, [r3, #24]
	_usb_d_dev_reset_epts();
    4ecc:	4b45      	ldr	r3, [pc, #276]	; (4fe4 <USB_Handler+0x21c>)
    4ece:	4798      	blx	r3
	dev_inst.callbacks.event(USB_EV_RESET, 0);
    4ed0:	4b41      	ldr	r3, [pc, #260]	; (4fd8 <USB_Handler+0x210>)
    4ed2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    4ed4:	2100      	movs	r1, #0
    4ed6:	2001      	movs	r0, #1
    4ed8:	4798      	blx	r3
    4eda:	e7a2      	b.n	4e22 <USB_Handler+0x5a>
	if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    4edc:	06cb      	lsls	r3, r1, #27
    4ede:	d407      	bmi.n	4ef0 <USB_Handler+0x128>
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL1) {
    4ee0:	064b      	lsls	r3, r1, #25
    4ee2:	d408      	bmi.n	4ef6 <USB_Handler+0x12e>
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL0) {
    4ee4:	068b      	lsls	r3, r1, #26
    4ee6:	d52e      	bpl.n	4f46 <USB_Handler+0x17e>
		_usb_d_dev_handle_stall(ept, 0);
    4ee8:	2100      	movs	r1, #0
    4eea:	4b3f      	ldr	r3, [pc, #252]	; (4fe8 <USB_Handler+0x220>)
    4eec:	4798      	blx	r3
    4eee:	e02a      	b.n	4f46 <USB_Handler+0x17e>
		_usb_d_dev_handle_setup(ept);
    4ef0:	4b3e      	ldr	r3, [pc, #248]	; (4fec <USB_Handler+0x224>)
    4ef2:	4798      	blx	r3
    4ef4:	e027      	b.n	4f46 <USB_Handler+0x17e>
		_usb_d_dev_handle_stall(ept, 1);
    4ef6:	2101      	movs	r1, #1
    4ef8:	4b3b      	ldr	r3, [pc, #236]	; (4fe8 <USB_Handler+0x220>)
    4efa:	4798      	blx	r3
    4efc:	e023      	b.n	4f46 <USB_Handler+0x17e>
	if (flags & USB_DEVICE_EPINTFLAG_STALL1) {
    4efe:	064b      	lsls	r3, r1, #25
    4f00:	d40e      	bmi.n	4f20 <USB_Handler+0x158>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRFAIL1) {
    4f02:	070b      	lsls	r3, r1, #28
    4f04:	d410      	bmi.n	4f28 <USB_Handler+0x160>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRCPT1) {
    4f06:	078b      	lsls	r3, r1, #30
    4f08:	d412      	bmi.n	4f30 <USB_Handler+0x168>
	} else if (_usb_d_dev_ep_is_ctrl(ept)) {
    4f0a:	2307      	movs	r3, #7
    4f0c:	401a      	ands	r2, r3
    4f0e:	2a01      	cmp	r2, #1
    4f10:	d119      	bne.n	4f46 <USB_Handler+0x17e>
		if (flags & USB_DEVICE_EPINTFLAG_TRFAIL0) {
    4f12:	074b      	lsls	r3, r1, #29
    4f14:	d410      	bmi.n	4f38 <USB_Handler+0x170>
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    4f16:	06cb      	lsls	r3, r1, #27
    4f18:	d515      	bpl.n	4f46 <USB_Handler+0x17e>
			_usb_d_dev_handle_setup(ept);
    4f1a:	4b34      	ldr	r3, [pc, #208]	; (4fec <USB_Handler+0x224>)
    4f1c:	4798      	blx	r3
    4f1e:	e012      	b.n	4f46 <USB_Handler+0x17e>
		_usb_d_dev_handle_stall(ept, 1);
    4f20:	2101      	movs	r1, #1
    4f22:	4b31      	ldr	r3, [pc, #196]	; (4fe8 <USB_Handler+0x220>)
    4f24:	4798      	blx	r3
    4f26:	e00e      	b.n	4f46 <USB_Handler+0x17e>
		_usb_d_dev_handle_trfail(ept, 1);
    4f28:	2101      	movs	r1, #1
    4f2a:	4b31      	ldr	r3, [pc, #196]	; (4ff0 <USB_Handler+0x228>)
    4f2c:	4798      	blx	r3
    4f2e:	e00a      	b.n	4f46 <USB_Handler+0x17e>
		_usb_d_dev_in_next(ept, true);
    4f30:	2101      	movs	r1, #1
    4f32:	4b30      	ldr	r3, [pc, #192]	; (4ff4 <USB_Handler+0x22c>)
    4f34:	4798      	blx	r3
    4f36:	e006      	b.n	4f46 <USB_Handler+0x17e>
			_usb_d_dev_handle_trfail(ept, 0);
    4f38:	2100      	movs	r1, #0
    4f3a:	4b2d      	ldr	r3, [pc, #180]	; (4ff0 <USB_Handler+0x228>)
    4f3c:	4798      	blx	r3
    4f3e:	e002      	b.n	4f46 <USB_Handler+0x17e>
		_usb_d_dev_handle_stall(ept, 0);
    4f40:	2100      	movs	r1, #0
    4f42:	4b29      	ldr	r3, [pc, #164]	; (4fe8 <USB_Handler+0x220>)
    4f44:	4798      	blx	r3
    4f46:	3501      	adds	r5, #1
    4f48:	3414      	adds	r4, #20
	for (i = 0; i < USB_D_N_EP; i++) {
    4f4a:	2d09      	cmp	r5, #9
    4f4c:	d100      	bne.n	4f50 <USB_Handler+0x188>
    4f4e:	e768      	b.n	4e22 <USB_Handler+0x5a>
    4f50:	0020      	movs	r0, r4
		if (ept->ep == 0xFF) {
    4f52:	7ca1      	ldrb	r1, [r4, #18]
    4f54:	29ff      	cmp	r1, #255	; 0xff
    4f56:	d0f6      	beq.n	4f46 <USB_Handler+0x17e>
	if (!(epint & (1u << epn))) {
    4f58:	230f      	movs	r3, #15
    4f5a:	400b      	ands	r3, r1
    4f5c:	2101      	movs	r1, #1
    4f5e:	4099      	lsls	r1, r3
    4f60:	420e      	tst	r6, r1
    4f62:	d0f0      	beq.n	4f46 <USB_Handler+0x17e>
	flags = hw->DEVICE.DeviceEndpoint[epn].EPINTFLAG.reg;
    4f64:	0159      	lsls	r1, r3, #5
    4f66:	4f24      	ldr	r7, [pc, #144]	; (4ff8 <USB_Handler+0x230>)
    4f68:	46bc      	mov	ip, r7
    4f6a:	4461      	add	r1, ip
    4f6c:	79c9      	ldrb	r1, [r1, #7]
	mask  = hw->DEVICE.DeviceEndpoint[epn].EPINTENSET.reg;
    4f6e:	015b      	lsls	r3, r3, #5
    4f70:	4f22      	ldr	r7, [pc, #136]	; (4ffc <USB_Handler+0x234>)
    4f72:	46bc      	mov	ip, r7
    4f74:	4463      	add	r3, ip
    4f76:	781b      	ldrb	r3, [r3, #0]
	flags &= mask;
    4f78:	4019      	ands	r1, r3
	if (flags) {
    4f7a:	d0e4      	beq.n	4f46 <USB_Handler+0x17e>
		if ((ept->flags.bits.eptype == 0x1) && !_usb_d_dev_ep_is_busy(ept)) {
    4f7c:	00ab      	lsls	r3, r5, #2
    4f7e:	195a      	adds	r2, r3, r5
    4f80:	0092      	lsls	r2, r2, #2
    4f82:	4b15      	ldr	r3, [pc, #84]	; (4fd8 <USB_Handler+0x210>)
    4f84:	469c      	mov	ip, r3
    4f86:	4462      	add	r2, ip
    4f88:	3270      	adds	r2, #112	; 0x70
    4f8a:	7dd2      	ldrb	r2, [r2, #23]
    4f8c:	2347      	movs	r3, #71	; 0x47
    4f8e:	4013      	ands	r3, r2
    4f90:	2b01      	cmp	r3, #1
    4f92:	d0a3      	beq.n	4edc <USB_Handler+0x114>
		} else if (_usb_d_dev_ep_is_in(ept)) {
    4f94:	b253      	sxtb	r3, r2
    4f96:	2b00      	cmp	r3, #0
    4f98:	dbb1      	blt.n	4efe <USB_Handler+0x136>
	if (flags & USB_DEVICE_EPINTFLAG_STALL0) {
    4f9a:	068b      	lsls	r3, r1, #26
    4f9c:	d4d0      	bmi.n	4f40 <USB_Handler+0x178>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRFAIL0) {
    4f9e:	074b      	lsls	r3, r1, #29
    4fa0:	d40c      	bmi.n	4fbc <USB_Handler+0x1f4>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRCPT0) {
    4fa2:	07cb      	lsls	r3, r1, #31
    4fa4:	d40e      	bmi.n	4fc4 <USB_Handler+0x1fc>
	} else if (_usb_d_dev_ep_is_ctrl(ept)) {
    4fa6:	2307      	movs	r3, #7
    4fa8:	401a      	ands	r2, r3
    4faa:	2a01      	cmp	r2, #1
    4fac:	d1cb      	bne.n	4f46 <USB_Handler+0x17e>
		if (flags & USB_DEVICE_EPINTFLAG_TRFAIL1) {
    4fae:	070b      	lsls	r3, r1, #28
    4fb0:	d40c      	bmi.n	4fcc <USB_Handler+0x204>
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    4fb2:	06cb      	lsls	r3, r1, #27
    4fb4:	d5c7      	bpl.n	4f46 <USB_Handler+0x17e>
			_usb_d_dev_handle_setup(ept);
    4fb6:	4b0d      	ldr	r3, [pc, #52]	; (4fec <USB_Handler+0x224>)
    4fb8:	4798      	blx	r3
    4fba:	e7c4      	b.n	4f46 <USB_Handler+0x17e>
		_usb_d_dev_handle_trfail(ept, 0);
    4fbc:	2100      	movs	r1, #0
    4fbe:	4b0c      	ldr	r3, [pc, #48]	; (4ff0 <USB_Handler+0x228>)
    4fc0:	4798      	blx	r3
    4fc2:	e7c0      	b.n	4f46 <USB_Handler+0x17e>
		_usb_d_dev_out_next(ept, true);
    4fc4:	2101      	movs	r1, #1
    4fc6:	4b0e      	ldr	r3, [pc, #56]	; (5000 <USB_Handler+0x238>)
    4fc8:	4798      	blx	r3
    4fca:	e7bc      	b.n	4f46 <USB_Handler+0x17e>
			_usb_d_dev_handle_trfail(ept, 1);
    4fcc:	2101      	movs	r1, #1
    4fce:	4b08      	ldr	r3, [pc, #32]	; (4ff0 <USB_Handler+0x228>)
    4fd0:	4798      	blx	r3
    4fd2:	e7b8      	b.n	4f46 <USB_Handler+0x17e>
    4fd4:	41005000 	.word	0x41005000
    4fd8:	200001cc 	.word	0x200001cc
    4fdc:	00000201 	.word	0x00000201
    4fe0:	40000800 	.word	0x40000800
    4fe4:	00003f5d 	.word	0x00003f5d
    4fe8:	00003d99 	.word	0x00003d99
    4fec:	00003d0d 	.word	0x00003d0d
    4ff0:	00003e5d 	.word	0x00003e5d
    4ff4:	00003fa1 	.word	0x00003fa1
    4ff8:	41005100 	.word	0x41005100
    4ffc:	41005109 	.word	0x41005109
    5000:	00004149 	.word	0x00004149

00005004 <main>:
#include "max44009.h"

#define STRING_SIZE		(30)

int main(void)
{
    5004:	b5f0      	push	{r4, r5, r6, r7, lr}
    5006:	46c6      	mov	lr, r8
    5008:	b500      	push	{lr}
    500a:	b088      	sub	sp, #32
	char  output[STRING_SIZE];
	float lightLevel = 9.0;
//	uint16_t lux;
	
	/* Initializes MCU, drivers and middleware */
	atmel_start_init();
    500c:	4b19      	ldr	r3, [pc, #100]	; (5074 <main+0x70>)
    500e:	4798      	blx	r3
	max44009_init(&wire, LIGHT_ADD_GND);
    5010:	214a      	movs	r1, #74	; 0x4a
    5012:	4819      	ldr	r0, [pc, #100]	; (5078 <main+0x74>)
    5014:	4b19      	ldr	r3, [pc, #100]	; (507c <main+0x78>)
    5016:	4798      	blx	r3
		
	while (1) {
		/* Turn on LED if the DTR signal is set (serial terminal open on host) */
		gpio_set_pin_level(LED_BUILTIN, usb_dtr());
    5018:	4b19      	ldr	r3, [pc, #100]	; (5080 <main+0x7c>)
    501a:	4698      	mov	r8, r3
		
		/* Read the light sensor and output it to the serial USB */
		lightLevel = max44009_read_float();
    501c:	4f19      	ldr	r7, [pc, #100]	; (5084 <main+0x80>)
//		lux = max44009_read_uint16();
		sprintf(output, "Light Level: %0lX lux\n", (uint32_t)lightLevel);
    501e:	4e1a      	ldr	r6, [pc, #104]	; (5088 <main+0x84>)
    5020:	e01f      	b.n	5062 <main+0x5e>
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    5022:	2280      	movs	r2, #128	; 0x80
    5024:	0292      	lsls	r2, r2, #10
    5026:	23c0      	movs	r3, #192	; 0xc0
    5028:	05db      	lsls	r3, r3, #23
    502a:	615a      	str	r2, [r3, #20]
		lightLevel = max44009_read_float();
    502c:	47b8      	blx	r7
		sprintf(output, "Light Level: %0lX lux\n", (uint32_t)lightLevel);
    502e:	47b0      	blx	r6
    5030:	0002      	movs	r2, r0
    5032:	4916      	ldr	r1, [pc, #88]	; (508c <main+0x88>)
    5034:	4668      	mov	r0, sp
    5036:	4b16      	ldr	r3, [pc, #88]	; (5090 <main+0x8c>)
    5038:	4798      	blx	r3
		
		if(usb_dtr()) {
    503a:	4b11      	ldr	r3, [pc, #68]	; (5080 <main+0x7c>)
    503c:	4798      	blx	r3
    503e:	2800      	cmp	r0, #0
    5040:	d00c      	beq.n	505c <main+0x58>
			char* c = output;
			while(*c != '\0') {
    5042:	466b      	mov	r3, sp
    5044:	7818      	ldrb	r0, [r3, #0]
    5046:	2800      	cmp	r0, #0
    5048:	d006      	beq.n	5058 <main+0x54>
    504a:	466c      	mov	r4, sp
				usb_put(*c);
    504c:	4d11      	ldr	r5, [pc, #68]	; (5094 <main+0x90>)
    504e:	47a8      	blx	r5
				c++;
    5050:	3401      	adds	r4, #1
			while(*c != '\0') {
    5052:	7820      	ldrb	r0, [r4, #0]
    5054:	2800      	cmp	r0, #0
    5056:	d1fa      	bne.n	504e <main+0x4a>
			}
			usb_flush();
    5058:	4b0f      	ldr	r3, [pc, #60]	; (5098 <main+0x94>)
    505a:	4798      	blx	r3
		}
		delay_ms(100);
    505c:	2064      	movs	r0, #100	; 0x64
    505e:	4b0f      	ldr	r3, [pc, #60]	; (509c <main+0x98>)
    5060:	4798      	blx	r3
		gpio_set_pin_level(LED_BUILTIN, usb_dtr());
    5062:	47c0      	blx	r8
/**
 * \brief Set output level on port with mask
 */
static inline void _gpio_set_level(const enum gpio_port port, const uint32_t mask, const bool level)
{
	if (level) {
    5064:	2800      	cmp	r0, #0
    5066:	d0dc      	beq.n	5022 <main+0x1e>
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    5068:	2280      	movs	r2, #128	; 0x80
    506a:	0292      	lsls	r2, r2, #10
    506c:	23c0      	movs	r3, #192	; 0xc0
    506e:	05db      	lsls	r3, r3, #23
    5070:	619a      	str	r2, [r3, #24]
    5072:	e7db      	b.n	502c <main+0x28>
    5074:	000021e9 	.word	0x000021e9
    5078:	20000528 	.word	0x20000528
    507c:	00002149 	.word	0x00002149
    5080:	00005d75 	.word	0x00005d75
    5084:	0000217d 	.word	0x0000217d
    5088:	000070e9 	.word	0x000070e9
    508c:	00009c7c 	.word	0x00009c7c
    5090:	00009305 	.word	0x00009305
    5094:	00005d49 	.word	0x00005d49
    5098:	00005d09 	.word	0x00005d09
    509c:	00002795 	.word	0x00002795

000050a0 <ring_buffer_init>:
 * @file
 * Implementation of ring buffer functions.
 */

void ring_buffer_init(ring_buffer_t *buffer) {
  buffer->tail_index = 0;
    50a0:	2300      	movs	r3, #0
    50a2:	2280      	movs	r2, #128	; 0x80
    50a4:	5483      	strb	r3, [r0, r2]
  buffer->head_index = 0;
    50a6:	3201      	adds	r2, #1
    50a8:	5483      	strb	r3, [r0, r2]
}
    50aa:	4770      	bx	lr

000050ac <cdcdf_acm_req>:
 * \param[in] ep Endpoint address.
 * \param[in] req Pointer to the request.
 * \return Operation status.
 */
static int32_t cdcdf_acm_req(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    50ac:	b5f0      	push	{r4, r5, r6, r7, lr}
    50ae:	b083      	sub	sp, #12
    50b0:	0006      	movs	r6, r0
    50b2:	000c      	movs	r4, r1
    50b4:	0015      	movs	r5, r2
	if (0x01 != ((req->bmRequestType >> 5) & 0x03)) { // class request
    50b6:	780a      	ldrb	r2, [r1, #0]
    50b8:	0653      	lsls	r3, r2, #25
    50ba:	0f9b      	lsrs	r3, r3, #30
    50bc:	2b01      	cmp	r3, #1
    50be:	d000      	beq.n	50c2 <cdcdf_acm_req+0x16>
    50c0:	e06c      	b.n	519c <cdcdf_acm_req+0xf0>
		return ERR_NOT_FOUND;
	}
	if ((req->wIndex == _cdcdf_acm_funcd.func_iface[0]) || (req->wIndex == _cdcdf_acm_funcd.func_iface[1])) {
    50c2:	7909      	ldrb	r1, [r1, #4]
    50c4:	7963      	ldrb	r3, [r4, #5]
    50c6:	021b      	lsls	r3, r3, #8
    50c8:	430b      	orrs	r3, r1
    50ca:	493b      	ldr	r1, [pc, #236]	; (51b8 <cdcdf_acm_req+0x10c>)
    50cc:	7809      	ldrb	r1, [r1, #0]
    50ce:	4299      	cmp	r1, r3
    50d0:	d003      	beq.n	50da <cdcdf_acm_req+0x2e>
    50d2:	4939      	ldr	r1, [pc, #228]	; (51b8 <cdcdf_acm_req+0x10c>)
    50d4:	7849      	ldrb	r1, [r1, #1]
    50d6:	4299      	cmp	r1, r3
    50d8:	d163      	bne.n	51a2 <cdcdf_acm_req+0xf6>
		if (req->bmRequestType & USB_EP_DIR_IN) {
    50da:	b252      	sxtb	r2, r2
    50dc:	2a00      	cmp	r2, #0
    50de:	db0e      	blt.n	50fe <cdcdf_acm_req+0x52>
	uint16_t                   len      = req->wLength;
    50e0:	79a7      	ldrb	r7, [r4, #6]
    50e2:	79e3      	ldrb	r3, [r4, #7]
    50e4:	021b      	lsls	r3, r3, #8
    50e6:	431f      	orrs	r7, r3
	uint8_t *                  ctrl_buf = usbdc_get_ctrl_buffer();
    50e8:	4b34      	ldr	r3, [pc, #208]	; (51bc <cdcdf_acm_req+0x110>)
    50ea:	4798      	blx	r3
	switch (req->bRequest) {
    50ec:	7863      	ldrb	r3, [r4, #1]
    50ee:	2b20      	cmp	r3, #32
    50f0:	d018      	beq.n	5124 <cdcdf_acm_req+0x78>
    50f2:	2b22      	cmp	r3, #34	; 0x22
    50f4:	d03c      	beq.n	5170 <cdcdf_acm_req+0xc4>
		return ERR_INVALID_ARG;
    50f6:	200d      	movs	r0, #13
    50f8:	4240      	negs	r0, r0
			return cdcdf_acm_set_req(ep, req, stage);
		}
	} else {
		return ERR_NOT_FOUND;
	}
}
    50fa:	b003      	add	sp, #12
    50fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (USB_DATA_STAGE == stage) {
    50fe:	2d01      	cmp	r5, #1
    5100:	d052      	beq.n	51a8 <cdcdf_acm_req+0xfc>
	switch (req->bRequest) {
    5102:	7863      	ldrb	r3, [r4, #1]
    5104:	2b21      	cmp	r3, #33	; 0x21
    5106:	d151      	bne.n	51ac <cdcdf_acm_req+0x100>
	uint16_t len = req->wLength;
    5108:	79a2      	ldrb	r2, [r4, #6]
    510a:	79e3      	ldrb	r3, [r4, #7]
    510c:	021b      	lsls	r3, r3, #8
		if (sizeof(struct usb_cdc_line_coding) != len) {
    510e:	4313      	orrs	r3, r2
    5110:	2b07      	cmp	r3, #7
    5112:	d14e      	bne.n	51b2 <cdcdf_acm_req+0x106>
		return usbdc_xfer(ep, (uint8_t *)&usbd_cdc_line_coding, len, false);
    5114:	2300      	movs	r3, #0
    5116:	2207      	movs	r2, #7
    5118:	4927      	ldr	r1, [pc, #156]	; (51b8 <cdcdf_acm_req+0x10c>)
    511a:	3108      	adds	r1, #8
    511c:	0030      	movs	r0, r6
    511e:	4c28      	ldr	r4, [pc, #160]	; (51c0 <cdcdf_acm_req+0x114>)
    5120:	47a0      	blx	r4
    5122:	e7ea      	b.n	50fa <cdcdf_acm_req+0x4e>
		if (sizeof(struct usb_cdc_line_coding) != len) {
    5124:	2f07      	cmp	r7, #7
    5126:	d134      	bne.n	5192 <cdcdf_acm_req+0xe6>
		if (USB_SETUP_STAGE == stage) {
    5128:	2d00      	cmp	r5, #0
    512a:	d01a      	beq.n	5162 <cdcdf_acm_req+0xb6>
			memcpy(&line_coding_tmp, ctrl_buf, sizeof(struct usb_cdc_line_coding));
    512c:	2207      	movs	r2, #7
    512e:	0001      	movs	r1, r0
    5130:	4668      	mov	r0, sp
    5132:	4b24      	ldr	r3, [pc, #144]	; (51c4 <cdcdf_acm_req+0x118>)
    5134:	4798      	blx	r3
			if ((NULL == cdcdf_acm_set_line_coding) || (true == cdcdf_acm_set_line_coding(&line_coding_tmp))) {
    5136:	4b20      	ldr	r3, [pc, #128]	; (51b8 <cdcdf_acm_req+0x10c>)
    5138:	691b      	ldr	r3, [r3, #16]
    513a:	2b00      	cmp	r3, #0
    513c:	d005      	beq.n	514a <cdcdf_acm_req+0x9e>
    513e:	4668      	mov	r0, sp
    5140:	4798      	blx	r3
    5142:	0003      	movs	r3, r0
			return ERR_NONE;
    5144:	2000      	movs	r0, #0
			if ((NULL == cdcdf_acm_set_line_coding) || (true == cdcdf_acm_set_line_coding(&line_coding_tmp))) {
    5146:	2b00      	cmp	r3, #0
    5148:	d0d7      	beq.n	50fa <cdcdf_acm_req+0x4e>
				usbd_cdc_line_coding = line_coding_tmp;
    514a:	4a1b      	ldr	r2, [pc, #108]	; (51b8 <cdcdf_acm_req+0x10c>)
    514c:	0013      	movs	r3, r2
    514e:	9900      	ldr	r1, [sp, #0]
    5150:	6091      	str	r1, [r2, #8]
    5152:	466a      	mov	r2, sp
    5154:	8892      	ldrh	r2, [r2, #4]
    5156:	819a      	strh	r2, [r3, #12]
    5158:	466a      	mov	r2, sp
    515a:	7992      	ldrb	r2, [r2, #6]
    515c:	739a      	strb	r2, [r3, #14]
			return ERR_NONE;
    515e:	2000      	movs	r0, #0
    5160:	e7cb      	b.n	50fa <cdcdf_acm_req+0x4e>
			return usbdc_xfer(ep, ctrl_buf, len, false);
    5162:	2300      	movs	r3, #0
    5164:	2207      	movs	r2, #7
    5166:	0001      	movs	r1, r0
    5168:	0030      	movs	r0, r6
    516a:	4c15      	ldr	r4, [pc, #84]	; (51c0 <cdcdf_acm_req+0x114>)
    516c:	47a0      	blx	r4
    516e:	e7c4      	b.n	50fa <cdcdf_acm_req+0x4e>
		usbdc_xfer(0, NULL, 0, 0);
    5170:	2300      	movs	r3, #0
    5172:	2200      	movs	r2, #0
    5174:	2100      	movs	r1, #0
    5176:	2000      	movs	r0, #0
    5178:	4d11      	ldr	r5, [pc, #68]	; (51c0 <cdcdf_acm_req+0x114>)
    517a:	47a8      	blx	r5
		if (NULL != cdcdf_acm_notify_state) {
    517c:	4b0e      	ldr	r3, [pc, #56]	; (51b8 <cdcdf_acm_req+0x10c>)
    517e:	695b      	ldr	r3, [r3, #20]
    5180:	2b00      	cmp	r3, #0
    5182:	d009      	beq.n	5198 <cdcdf_acm_req+0xec>
			cdcdf_acm_notify_state(req->wValue);
    5184:	78a2      	ldrb	r2, [r4, #2]
    5186:	78e0      	ldrb	r0, [r4, #3]
    5188:	0200      	lsls	r0, r0, #8
    518a:	4310      	orrs	r0, r2
    518c:	4798      	blx	r3
		return ERR_NONE;
    518e:	2000      	movs	r0, #0
    5190:	e7b3      	b.n	50fa <cdcdf_acm_req+0x4e>
			return ERR_INVALID_DATA;
    5192:	2001      	movs	r0, #1
    5194:	4240      	negs	r0, r0
    5196:	e7b0      	b.n	50fa <cdcdf_acm_req+0x4e>
		return ERR_NONE;
    5198:	2000      	movs	r0, #0
			return cdcdf_acm_set_req(ep, req, stage);
    519a:	e7ae      	b.n	50fa <cdcdf_acm_req+0x4e>
		return ERR_NOT_FOUND;
    519c:	200a      	movs	r0, #10
    519e:	4240      	negs	r0, r0
    51a0:	e7ab      	b.n	50fa <cdcdf_acm_req+0x4e>
		return ERR_NOT_FOUND;
    51a2:	200a      	movs	r0, #10
    51a4:	4240      	negs	r0, r0
    51a6:	e7a8      	b.n	50fa <cdcdf_acm_req+0x4e>
		return ERR_NONE;
    51a8:	2000      	movs	r0, #0
    51aa:	e7a6      	b.n	50fa <cdcdf_acm_req+0x4e>
		return ERR_INVALID_ARG;
    51ac:	200d      	movs	r0, #13
    51ae:	4240      	negs	r0, r0
    51b0:	e7a3      	b.n	50fa <cdcdf_acm_req+0x4e>
			return ERR_INVALID_DATA;
    51b2:	2001      	movs	r0, #1
    51b4:	4240      	negs	r0, r0
    51b6:	e7a0      	b.n	50fa <cdcdf_acm_req+0x4e>
    51b8:	200003b4 	.word	0x200003b4
    51bc:	00005b05 	.word	0x00005b05
    51c0:	000055b5 	.word	0x000055b5
    51c4:	000092e1 	.word	0x000092e1

000051c8 <cdcdf_acm_ctrl>:
{
    51c8:	b5f0      	push	{r4, r5, r6, r7, lr}
    51ca:	46de      	mov	lr, fp
    51cc:	4657      	mov	r7, sl
    51ce:	464e      	mov	r6, r9
    51d0:	4645      	mov	r5, r8
    51d2:	b5e0      	push	{r5, r6, r7, lr}
    51d4:	b083      	sub	sp, #12
    51d6:	0016      	movs	r6, r2
	switch (ctrl) {
    51d8:	2901      	cmp	r1, #1
    51da:	d068      	beq.n	52ae <cdcdf_acm_ctrl+0xe6>
    51dc:	2900      	cmp	r1, #0
    51de:	d00b      	beq.n	51f8 <cdcdf_acm_ctrl+0x30>
    51e0:	2902      	cmp	r1, #2
    51e2:	d100      	bne.n	51e6 <cdcdf_acm_ctrl+0x1e>
    51e4:	e093      	b.n	530e <cdcdf_acm_ctrl+0x146>
		return ERR_INVALID_ARG;
    51e6:	200d      	movs	r0, #13
    51e8:	4240      	negs	r0, r0
}
    51ea:	b003      	add	sp, #12
    51ec:	bc3c      	pop	{r2, r3, r4, r5}
    51ee:	4690      	mov	r8, r2
    51f0:	4699      	mov	r9, r3
    51f2:	46a2      	mov	sl, r4
    51f4:	46ab      	mov	fp, r5
    51f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	struct cdcdf_acm_func_data *func_data = (struct cdcdf_acm_func_data *)(drv->func_data);
    51f8:	6883      	ldr	r3, [r0, #8]
    51fa:	4698      	mov	r8, r3
	ifc = desc->sod;
    51fc:	6810      	ldr	r0, [r2, #0]
		if (NULL == ifc) {
    51fe:	2800      	cmp	r0, #0
    5200:	d100      	bne.n	5204 <cdcdf_acm_ctrl+0x3c>
    5202:	e087      	b.n	5314 <cdcdf_acm_ctrl+0x14c>
    5204:	9301      	str	r3, [sp, #4]
    5206:	2301      	movs	r3, #1
    5208:	4443      	add	r3, r8
    520a:	469b      	mov	fp, r3
			if (usb_d_ep_init(ep_desc.bEndpointAddress, ep_desc.bmAttributes, ep_desc.wMaxPacketSize)) {
    520c:	4f47      	ldr	r7, [pc, #284]	; (532c <cdcdf_acm_ctrl+0x164>)
				usb_d_ep_enable(func_data->func_ep_out);
    520e:	4b48      	ldr	r3, [pc, #288]	; (5330 <cdcdf_acm_ctrl+0x168>)
    5210:	4699      	mov	r9, r3
		ifc_desc.bInterfaceNumber = ifc[2];
    5212:	7882      	ldrb	r2, [r0, #2]
		if ((CDC_CLASS_COMM == ifc_desc.bInterfaceClass) || (CDC_CLASS_DATA == ifc_desc.bInterfaceClass)) {
    5214:	7943      	ldrb	r3, [r0, #5]
    5216:	2108      	movs	r1, #8
    5218:	438b      	bics	r3, r1
    521a:	2b02      	cmp	r3, #2
    521c:	d002      	beq.n	5224 <cdcdf_acm_ctrl+0x5c>
			return ERR_NOT_FOUND;
    521e:	200a      	movs	r0, #10
    5220:	4240      	negs	r0, r0
    5222:	e7e2      	b.n	51ea <cdcdf_acm_ctrl+0x22>
    5224:	9901      	ldr	r1, [sp, #4]
    5226:	468a      	mov	sl, r1
			if (func_data->func_iface[i] == ifc_desc.bInterfaceNumber) { // Initialized
    5228:	780b      	ldrb	r3, [r1, #0]
    522a:	429a      	cmp	r2, r3
    522c:	d075      	beq.n	531a <cdcdf_acm_ctrl+0x152>
			} else if (func_data->func_iface[i] != 0xFF) { // Occupied
    522e:	2bff      	cmp	r3, #255	; 0xff
    5230:	d176      	bne.n	5320 <cdcdf_acm_ctrl+0x158>
				func_data->func_iface[i] = ifc_desc.bInterfaceNumber;
    5232:	700a      	strb	r2, [r1, #0]
		ep = usb_find_desc(ifc, desc->eod, USB_DT_ENDPOINT);
    5234:	2205      	movs	r2, #5
    5236:	6871      	ldr	r1, [r6, #4]
    5238:	4b3e      	ldr	r3, [pc, #248]	; (5334 <cdcdf_acm_ctrl+0x16c>)
    523a:	4798      	blx	r3
    523c:	1e04      	subs	r4, r0, #0
		while (NULL != ep) {
    523e:	d11e      	bne.n	527e <cdcdf_acm_ctrl+0xb6>
		ifc = usb_find_desc(usb_desc_next(desc->sod), desc->eod, USB_DT_INTERFACE);
    5240:	6830      	ldr	r0, [r6, #0]
 *  \param[in] desc Byte pointer to the descriptor start address
 *  \return Byte pointer to the next descriptor
 */
static inline uint8_t *usb_desc_next(uint8_t *desc)
{
	return (desc + usb_desc_len(desc));
    5242:	7803      	ldrb	r3, [r0, #0]
    5244:	18c0      	adds	r0, r0, r3
    5246:	2204      	movs	r2, #4
    5248:	6871      	ldr	r1, [r6, #4]
    524a:	4b3a      	ldr	r3, [pc, #232]	; (5334 <cdcdf_acm_ctrl+0x16c>)
    524c:	4798      	blx	r3
	for (i = 0; i < 2; i++) {
    524e:	9b01      	ldr	r3, [sp, #4]
    5250:	455b      	cmp	r3, fp
    5252:	d027      	beq.n	52a4 <cdcdf_acm_ctrl+0xdc>
    5254:	9b01      	ldr	r3, [sp, #4]
    5256:	3301      	adds	r3, #1
    5258:	9301      	str	r3, [sp, #4]
		if (NULL == ifc) {
    525a:	2800      	cmp	r0, #0
    525c:	d1d9      	bne.n	5212 <cdcdf_acm_ctrl+0x4a>
			return ERR_NOT_FOUND;
    525e:	200a      	movs	r0, #10
    5260:	4240      	negs	r0, r0
    5262:	e7c2      	b.n	51ea <cdcdf_acm_ctrl+0x22>
				func_data->func_ep_in[i] = ep_desc.bEndpointAddress;
    5264:	4653      	mov	r3, sl
    5266:	709d      	strb	r5, [r3, #2]
				usb_d_ep_enable(func_data->func_ep_in[i]);
    5268:	0028      	movs	r0, r5
    526a:	4b31      	ldr	r3, [pc, #196]	; (5330 <cdcdf_acm_ctrl+0x168>)
    526c:	4798      	blx	r3
			desc->sod = ep;
    526e:	6034      	str	r4, [r6, #0]
    5270:	7820      	ldrb	r0, [r4, #0]
    5272:	1820      	adds	r0, r4, r0
			ep        = usb_find_ep_desc(usb_desc_next(desc->sod), desc->eod);
    5274:	6871      	ldr	r1, [r6, #4]
    5276:	4b30      	ldr	r3, [pc, #192]	; (5338 <cdcdf_acm_ctrl+0x170>)
    5278:	4798      	blx	r3
    527a:	1e04      	subs	r4, r0, #0
		while (NULL != ep) {
    527c:	d0e0      	beq.n	5240 <cdcdf_acm_ctrl+0x78>
			ep_desc.bEndpointAddress = ep[2];
    527e:	78a5      	ldrb	r5, [r4, #2]
	return (ptr[0] + (ptr[1] << 8));
    5280:	7963      	ldrb	r3, [r4, #5]
    5282:	021b      	lsls	r3, r3, #8
    5284:	7922      	ldrb	r2, [r4, #4]
    5286:	18d2      	adds	r2, r2, r3
			if (usb_d_ep_init(ep_desc.bEndpointAddress, ep_desc.bmAttributes, ep_desc.wMaxPacketSize)) {
    5288:	b292      	uxth	r2, r2
    528a:	78e1      	ldrb	r1, [r4, #3]
    528c:	0028      	movs	r0, r5
    528e:	47b8      	blx	r7
    5290:	2800      	cmp	r0, #0
    5292:	d148      	bne.n	5326 <cdcdf_acm_ctrl+0x15e>
			if (ep_desc.bEndpointAddress & USB_EP_DIR_IN) {
    5294:	b26b      	sxtb	r3, r5
    5296:	2b00      	cmp	r3, #0
    5298:	dbe4      	blt.n	5264 <cdcdf_acm_ctrl+0x9c>
				func_data->func_ep_out = ep_desc.bEndpointAddress;
    529a:	4643      	mov	r3, r8
    529c:	711d      	strb	r5, [r3, #4]
				usb_d_ep_enable(func_data->func_ep_out);
    529e:	0028      	movs	r0, r5
    52a0:	47c8      	blx	r9
    52a2:	e7e4      	b.n	526e <cdcdf_acm_ctrl+0xa6>
	_cdcdf_acm_funcd.enabled = true;
    52a4:	2201      	movs	r2, #1
    52a6:	4b25      	ldr	r3, [pc, #148]	; (533c <cdcdf_acm_ctrl+0x174>)
    52a8:	715a      	strb	r2, [r3, #5]
	return ERR_NONE;
    52aa:	2000      	movs	r0, #0
    52ac:	e79d      	b.n	51ea <cdcdf_acm_ctrl+0x22>
	struct cdcdf_acm_func_data *func_data = (struct cdcdf_acm_func_data *)(drv->func_data);
    52ae:	6884      	ldr	r4, [r0, #8]
	if (desc) {
    52b0:	2a00      	cmp	r2, #0
    52b2:	d008      	beq.n	52c6 <cdcdf_acm_ctrl+0xfe>
		ifc_desc.bInterfaceClass = desc->sod[5];
    52b4:	6813      	ldr	r3, [r2, #0]
		if ((ifc_desc.bInterfaceClass != CDC_CLASS_COMM) && (ifc_desc.bInterfaceClass != CDC_CLASS_DATA)) {
    52b6:	795b      	ldrb	r3, [r3, #5]
    52b8:	2208      	movs	r2, #8
    52ba:	4393      	bics	r3, r2
    52bc:	2b02      	cmp	r3, #2
    52be:	d002      	beq.n	52c6 <cdcdf_acm_ctrl+0xfe>
			return ERR_NOT_FOUND;
    52c0:	200a      	movs	r0, #10
    52c2:	4240      	negs	r0, r0
    52c4:	e791      	b.n	51ea <cdcdf_acm_ctrl+0x22>
		if (func_data->func_iface[i] == 0xFF) {
    52c6:	7823      	ldrb	r3, [r4, #0]
    52c8:	2bff      	cmp	r3, #255	; 0xff
    52ca:	d008      	beq.n	52de <cdcdf_acm_ctrl+0x116>
			func_data->func_iface[i] = 0xFF;
    52cc:	23ff      	movs	r3, #255	; 0xff
    52ce:	7023      	strb	r3, [r4, #0]
			if (func_data->func_ep_in[i] != 0xFF) {
    52d0:	78a0      	ldrb	r0, [r4, #2]
    52d2:	28ff      	cmp	r0, #255	; 0xff
    52d4:	d003      	beq.n	52de <cdcdf_acm_ctrl+0x116>
				usb_d_ep_deinit(func_data->func_ep_in[i]);
    52d6:	4b1a      	ldr	r3, [pc, #104]	; (5340 <cdcdf_acm_ctrl+0x178>)
    52d8:	4798      	blx	r3
				func_data->func_ep_in[i] = 0xFF;
    52da:	23ff      	movs	r3, #255	; 0xff
    52dc:	70a3      	strb	r3, [r4, #2]
		if (func_data->func_iface[i] == 0xFF) {
    52de:	7863      	ldrb	r3, [r4, #1]
    52e0:	2bff      	cmp	r3, #255	; 0xff
    52e2:	d008      	beq.n	52f6 <cdcdf_acm_ctrl+0x12e>
			func_data->func_iface[i] = 0xFF;
    52e4:	23ff      	movs	r3, #255	; 0xff
    52e6:	7063      	strb	r3, [r4, #1]
			if (func_data->func_ep_in[i] != 0xFF) {
    52e8:	78e0      	ldrb	r0, [r4, #3]
    52ea:	28ff      	cmp	r0, #255	; 0xff
    52ec:	d003      	beq.n	52f6 <cdcdf_acm_ctrl+0x12e>
				usb_d_ep_deinit(func_data->func_ep_in[i]);
    52ee:	4b14      	ldr	r3, [pc, #80]	; (5340 <cdcdf_acm_ctrl+0x178>)
    52f0:	4798      	blx	r3
				func_data->func_ep_in[i] = 0xFF;
    52f2:	23ff      	movs	r3, #255	; 0xff
    52f4:	70e3      	strb	r3, [r4, #3]
	if (func_data->func_ep_out != 0xFF) {
    52f6:	7920      	ldrb	r0, [r4, #4]
    52f8:	28ff      	cmp	r0, #255	; 0xff
    52fa:	d003      	beq.n	5304 <cdcdf_acm_ctrl+0x13c>
		usb_d_ep_deinit(func_data->func_ep_out);
    52fc:	4b10      	ldr	r3, [pc, #64]	; (5340 <cdcdf_acm_ctrl+0x178>)
    52fe:	4798      	blx	r3
		func_data->func_ep_out = 0xFF;
    5300:	23ff      	movs	r3, #255	; 0xff
    5302:	7123      	strb	r3, [r4, #4]
	_cdcdf_acm_funcd.enabled = false;
    5304:	2200      	movs	r2, #0
    5306:	4b0d      	ldr	r3, [pc, #52]	; (533c <cdcdf_acm_ctrl+0x174>)
    5308:	715a      	strb	r2, [r3, #5]
	return ERR_NONE;
    530a:	2000      	movs	r0, #0
    530c:	e76d      	b.n	51ea <cdcdf_acm_ctrl+0x22>
		return ERR_UNSUPPORTED_OP;
    530e:	201b      	movs	r0, #27
    5310:	4240      	negs	r0, r0
    5312:	e76a      	b.n	51ea <cdcdf_acm_ctrl+0x22>
			return ERR_NOT_FOUND;
    5314:	200a      	movs	r0, #10
    5316:	4240      	negs	r0, r0
    5318:	e767      	b.n	51ea <cdcdf_acm_ctrl+0x22>
				return ERR_ALREADY_INITIALIZED;
    531a:	2012      	movs	r0, #18
    531c:	4240      	negs	r0, r0
    531e:	e764      	b.n	51ea <cdcdf_acm_ctrl+0x22>
				return ERR_NO_RESOURCE;
    5320:	201c      	movs	r0, #28
    5322:	4240      	negs	r0, r0
    5324:	e761      	b.n	51ea <cdcdf_acm_ctrl+0x22>
				return ERR_NOT_INITIALIZED;
    5326:	2014      	movs	r0, #20
    5328:	4240      	negs	r0, r0
    532a:	e75e      	b.n	51ea <cdcdf_acm_ctrl+0x22>
    532c:	00002cfd 	.word	0x00002cfd
    5330:	00002d91 	.word	0x00002d91
    5334:	00005b21 	.word	0x00005b21
    5338:	00005b57 	.word	0x00005b57
    533c:	200003b4 	.word	0x200003b4
    5340:	00002d65 	.word	0x00002d65

00005344 <cdcdf_acm_init>:

/**
 * \brief Initialize the USB CDC ACM Function Driver
 */
int32_t cdcdf_acm_init(void)
{
    5344:	b510      	push	{r4, lr}
	if (usbdc_get_state() > USBD_S_POWER) {
    5346:	4b0a      	ldr	r3, [pc, #40]	; (5370 <cdcdf_acm_init+0x2c>)
    5348:	4798      	blx	r3
    534a:	2801      	cmp	r0, #1
    534c:	d80c      	bhi.n	5368 <cdcdf_acm_init+0x24>
		return ERR_DENIED;
	}

	_cdcdf_acm.ctrl      = cdcdf_acm_ctrl;
    534e:	4809      	ldr	r0, [pc, #36]	; (5374 <cdcdf_acm_init+0x30>)
    5350:	4b09      	ldr	r3, [pc, #36]	; (5378 <cdcdf_acm_init+0x34>)
    5352:	61c3      	str	r3, [r0, #28]
	_cdcdf_acm.func_data = &_cdcdf_acm_funcd;
    5354:	6200      	str	r0, [r0, #32]

	usbdc_register_function(&_cdcdf_acm);
    5356:	3018      	adds	r0, #24
    5358:	4b08      	ldr	r3, [pc, #32]	; (537c <cdcdf_acm_init+0x38>)
    535a:	4798      	blx	r3
	usbdc_register_handler(USBDC_HDL_REQ, &cdcdf_acm_req_h);
    535c:	4908      	ldr	r1, [pc, #32]	; (5380 <cdcdf_acm_init+0x3c>)
    535e:	2001      	movs	r0, #1
    5360:	4b08      	ldr	r3, [pc, #32]	; (5384 <cdcdf_acm_init+0x40>)
    5362:	4798      	blx	r3
	return ERR_NONE;
    5364:	2000      	movs	r0, #0
}
    5366:	bd10      	pop	{r4, pc}
		return ERR_DENIED;
    5368:	2011      	movs	r0, #17
    536a:	4240      	negs	r0, r0
    536c:	e7fb      	b.n	5366 <cdcdf_acm_init+0x22>
    536e:	46c0      	nop			; (mov r8, r8)
    5370:	00005b11 	.word	0x00005b11
    5374:	200003b4 	.word	0x200003b4
    5378:	000051c9 	.word	0x000051c9
    537c:	00005aa9 	.word	0x00005aa9
    5380:	20000000 	.word	0x20000000
    5384:	00005a11 	.word	0x00005a11

00005388 <cdcdf_acm_write>:

/**
 * \brief USB CDC ACM Function Write Data
 */
int32_t cdcdf_acm_write(uint8_t *buf, uint32_t size)
{
    5388:	b510      	push	{r4, lr}
    538a:	0004      	movs	r4, r0
/**
 * \brief Check whether CDC ACM Function is enabled
 */
bool cdcdf_acm_is_enabled(void)
{
	return _cdcdf_acm_funcd.enabled;
    538c:	4b07      	ldr	r3, [pc, #28]	; (53ac <cdcdf_acm_write+0x24>)
	if (!cdcdf_acm_is_enabled()) {
    538e:	795b      	ldrb	r3, [r3, #5]
    5390:	2b00      	cmp	r3, #0
    5392:	d007      	beq.n	53a4 <cdcdf_acm_write+0x1c>
	return usbdc_xfer(_cdcdf_acm_funcd.func_ep_in[CDCDF_ACM_DATA_EP_INDEX], buf, size, true);
    5394:	4b05      	ldr	r3, [pc, #20]	; (53ac <cdcdf_acm_write+0x24>)
    5396:	78d8      	ldrb	r0, [r3, #3]
    5398:	2301      	movs	r3, #1
    539a:	000a      	movs	r2, r1
    539c:	0021      	movs	r1, r4
    539e:	4c04      	ldr	r4, [pc, #16]	; (53b0 <cdcdf_acm_write+0x28>)
    53a0:	47a0      	blx	r4
}
    53a2:	bd10      	pop	{r4, pc}
		return ERR_DENIED;
    53a4:	2011      	movs	r0, #17
    53a6:	4240      	negs	r0, r0
    53a8:	e7fb      	b.n	53a2 <cdcdf_acm_write+0x1a>
    53aa:	46c0      	nop			; (mov r8, r8)
    53ac:	200003b4 	.word	0x200003b4
    53b0:	000055b5 	.word	0x000055b5

000053b4 <cdcdf_acm_register_callback>:
{
    53b4:	b510      	push	{r4, lr}
	switch (cb_type) {
    53b6:	2801      	cmp	r0, #1
    53b8:	d010      	beq.n	53dc <cdcdf_acm_register_callback+0x28>
    53ba:	2800      	cmp	r0, #0
    53bc:	d006      	beq.n	53cc <cdcdf_acm_register_callback+0x18>
    53be:	2802      	cmp	r0, #2
    53c0:	d014      	beq.n	53ec <cdcdf_acm_register_callback+0x38>
    53c2:	2803      	cmp	r0, #3
    53c4:	d016      	beq.n	53f4 <cdcdf_acm_register_callback+0x40>
		return ERR_INVALID_ARG;
    53c6:	200d      	movs	r0, #13
    53c8:	4240      	negs	r0, r0
    53ca:	e006      	b.n	53da <cdcdf_acm_register_callback+0x26>
		usb_d_ep_register_callback(_cdcdf_acm_funcd.func_ep_out, USB_D_EP_CB_XFER, func);
    53cc:	4b0b      	ldr	r3, [pc, #44]	; (53fc <cdcdf_acm_register_callback+0x48>)
    53ce:	7918      	ldrb	r0, [r3, #4]
    53d0:	000a      	movs	r2, r1
    53d2:	2102      	movs	r1, #2
    53d4:	4b0a      	ldr	r3, [pc, #40]	; (5400 <cdcdf_acm_register_callback+0x4c>)
    53d6:	4798      	blx	r3
	return ERR_NONE;
    53d8:	2000      	movs	r0, #0
}
    53da:	bd10      	pop	{r4, pc}
		usb_d_ep_register_callback(_cdcdf_acm_funcd.func_ep_in[CDCDF_ACM_DATA_EP_INDEX], USB_D_EP_CB_XFER, func);
    53dc:	4b07      	ldr	r3, [pc, #28]	; (53fc <cdcdf_acm_register_callback+0x48>)
    53de:	78d8      	ldrb	r0, [r3, #3]
    53e0:	000a      	movs	r2, r1
    53e2:	2102      	movs	r1, #2
    53e4:	4b06      	ldr	r3, [pc, #24]	; (5400 <cdcdf_acm_register_callback+0x4c>)
    53e6:	4798      	blx	r3
	return ERR_NONE;
    53e8:	2000      	movs	r0, #0
		break;
    53ea:	e7f6      	b.n	53da <cdcdf_acm_register_callback+0x26>
		cdcdf_acm_set_line_coding = (cdcdf_acm_set_line_coding_t)func;
    53ec:	4b03      	ldr	r3, [pc, #12]	; (53fc <cdcdf_acm_register_callback+0x48>)
    53ee:	6119      	str	r1, [r3, #16]
	return ERR_NONE;
    53f0:	2000      	movs	r0, #0
		break;
    53f2:	e7f2      	b.n	53da <cdcdf_acm_register_callback+0x26>
		cdcdf_acm_notify_state = (cdcdf_acm_notify_state_t)func;
    53f4:	4b01      	ldr	r3, [pc, #4]	; (53fc <cdcdf_acm_register_callback+0x48>)
    53f6:	6159      	str	r1, [r3, #20]
	return ERR_NONE;
    53f8:	2000      	movs	r0, #0
		break;
    53fa:	e7ee      	b.n	53da <cdcdf_acm_register_callback+0x26>
    53fc:	200003b4 	.word	0x200003b4
    5400:	00002f6d 	.word	0x00002f6d

00005404 <cdcdf_acm_is_enabled>:
	return _cdcdf_acm_funcd.enabled;
    5404:	4b01      	ldr	r3, [pc, #4]	; (540c <cdcdf_acm_is_enabled+0x8>)
    5406:	7958      	ldrb	r0, [r3, #5]
}
    5408:	4770      	bx	lr
    540a:	46c0      	nop			; (mov r8, r8)
    540c:	200003b4 	.word	0x200003b4

00005410 <usbdc_unconfig>:

/**
 * \brief Unconfig, close all interfaces
 */
static void usbdc_unconfig(void)
{
    5410:	b510      	push	{r4, lr}
	struct usbdf_driver *func = (struct usbdf_driver *)usbdc.func_list.head;
    5412:	4b06      	ldr	r3, [pc, #24]	; (542c <usbdc_unconfig+0x1c>)
    5414:	691c      	ldr	r4, [r3, #16]
	while (NULL != func) {
    5416:	2c00      	cmp	r4, #0
    5418:	d007      	beq.n	542a <usbdc_unconfig+0x1a>
		func->ctrl(func, USBDF_DISABLE, NULL);
    541a:	2200      	movs	r2, #0
    541c:	2101      	movs	r1, #1
    541e:	0020      	movs	r0, r4
    5420:	6863      	ldr	r3, [r4, #4]
    5422:	4798      	blx	r3
		func = func->next;
    5424:	6824      	ldr	r4, [r4, #0]
	while (NULL != func) {
    5426:	2c00      	cmp	r4, #0
    5428:	d1f7      	bne.n	541a <usbdc_unconfig+0xa>
	}
}
    542a:	bd10      	pop	{r4, pc}
    542c:	200003d8 	.word	0x200003d8

00005430 <usbdc_change_notify>:
	}
}

/** Invoke all registered Change notification callbacks. */
static void usbdc_change_notify(enum usbdc_change_type change, uint32_t value)
{
    5430:	b570      	push	{r4, r5, r6, lr}
    5432:	0006      	movs	r6, r0
    5434:	000d      	movs	r5, r1
	struct usbdc_change_handler *cg = (struct usbdc_change_handler *)usbdc.handlers.change_list.head;
    5436:	4b07      	ldr	r3, [pc, #28]	; (5454 <usbdc_change_notify+0x24>)
    5438:	68dc      	ldr	r4, [r3, #12]

	while (cg != NULL) {
    543a:	2c00      	cmp	r4, #0
    543c:	d103      	bne.n	5446 <usbdc_change_notify+0x16>
		if (NULL != cg->cb) {
			cg->cb(change, value);
		}
		cg = cg->next;
	}
}
    543e:	bd70      	pop	{r4, r5, r6, pc}
		cg = cg->next;
    5440:	6824      	ldr	r4, [r4, #0]
	while (cg != NULL) {
    5442:	2c00      	cmp	r4, #0
    5444:	d0fb      	beq.n	543e <usbdc_change_notify+0xe>
		if (NULL != cg->cb) {
    5446:	6863      	ldr	r3, [r4, #4]
    5448:	2b00      	cmp	r3, #0
    544a:	d0f9      	beq.n	5440 <usbdc_change_notify+0x10>
			cg->cb(change, value);
    544c:	0029      	movs	r1, r5
    544e:	0030      	movs	r0, r6
    5450:	4798      	blx	r3
    5452:	e7f5      	b.n	5440 <usbdc_change_notify+0x10>
    5454:	200003d8 	.word	0x200003d8

00005458 <usbdc_request_handler>:

/** Invoke all registered request callbacks until request handled. */
static int32_t usbdc_request_handler(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    5458:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    545a:	0007      	movs	r7, r0
    545c:	000e      	movs	r6, r1
    545e:	0015      	movs	r5, r2
	struct usbdc_req_handler *h = (struct usbdc_req_handler *)usbdc.handlers.req_list.head;
    5460:	4b0d      	ldr	r3, [pc, #52]	; (5498 <usbdc_request_handler+0x40>)
    5462:	689c      	ldr	r4, [r3, #8]
	int32_t                   rc;

	while (h != NULL) {
    5464:	2c00      	cmp	r4, #0
    5466:	d104      	bne.n	5472 <usbdc_request_handler+0x1a>
				return -1;
			}
		}
		h = h->next;
	}
	return false;
    5468:	2000      	movs	r0, #0
    546a:	e011      	b.n	5490 <usbdc_request_handler+0x38>
		h = h->next;
    546c:	6824      	ldr	r4, [r4, #0]
	while (h != NULL) {
    546e:	2c00      	cmp	r4, #0
    5470:	d00d      	beq.n	548e <usbdc_request_handler+0x36>
		if (NULL != h->cb) {
    5472:	6863      	ldr	r3, [r4, #4]
    5474:	2b00      	cmp	r3, #0
    5476:	d0f9      	beq.n	546c <usbdc_request_handler+0x14>
			rc = h->cb(ep, req, stage);
    5478:	002a      	movs	r2, r5
    547a:	0031      	movs	r1, r6
    547c:	0038      	movs	r0, r7
    547e:	4798      	blx	r3
			if (0 == rc) {
    5480:	2800      	cmp	r0, #0
    5482:	d006      	beq.n	5492 <usbdc_request_handler+0x3a>
			} else if (ERR_NOT_FOUND != rc) {
    5484:	300a      	adds	r0, #10
    5486:	d0f1      	beq.n	546c <usbdc_request_handler+0x14>
				return -1;
    5488:	2001      	movs	r0, #1
    548a:	4240      	negs	r0, r0
    548c:	e000      	b.n	5490 <usbdc_request_handler+0x38>
	return false;
    548e:	2000      	movs	r0, #0
}
    5490:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				return true;
    5492:	2001      	movs	r0, #1
    5494:	e7fc      	b.n	5490 <usbdc_request_handler+0x38>
    5496:	46c0      	nop			; (mov r8, r8)
    5498:	200003d8 	.word	0x200003d8

0000549c <usbd_sof_cb>:

/**
 * \brief Callback invoked on USB device SOF
 */
static void usbd_sof_cb(void)
{
    549c:	b510      	push	{r4, lr}
	struct usbdc_sof_handler *sof = (struct usbdc_sof_handler *)usbdc.handlers.sof_list.head;
    549e:	4b06      	ldr	r3, [pc, #24]	; (54b8 <usbd_sof_cb+0x1c>)
    54a0:	685c      	ldr	r4, [r3, #4]
	while (sof != NULL) {
    54a2:	2c00      	cmp	r4, #0
    54a4:	d103      	bne.n	54ae <usbd_sof_cb+0x12>
	usbdc_sof_notify();
}
    54a6:	bd10      	pop	{r4, pc}
		sof = sof->next;
    54a8:	6824      	ldr	r4, [r4, #0]
	while (sof != NULL) {
    54aa:	2c00      	cmp	r4, #0
    54ac:	d0fb      	beq.n	54a6 <usbd_sof_cb+0xa>
		if (NULL != sof->cb) {
    54ae:	6863      	ldr	r3, [r4, #4]
    54b0:	2b00      	cmp	r3, #0
    54b2:	d0f9      	beq.n	54a8 <usbd_sof_cb+0xc>
			sof->cb();
    54b4:	4798      	blx	r3
    54b6:	e7f7      	b.n	54a8 <usbd_sof_cb+0xc>
    54b8:	200003d8 	.word	0x200003d8

000054bc <usbdc_cb_ctl_done>:
 * \return Data has error or not.
 * \retval true There is data error, protocol error.
 * \retval false There is no data error.
 */
static bool usbdc_cb_ctl_done(const uint8_t ep, const enum usb_xfer_code code, struct usb_req *req)
{
    54bc:	b510      	push	{r4, lr}
    54be:	0014      	movs	r4, r2
	(void)ep;

	switch (code) {
    54c0:	2900      	cmp	r1, #0
    54c2:	d003      	beq.n	54cc <usbdc_cb_ctl_done+0x10>
    54c4:	2901      	cmp	r1, #1
    54c6:	d029      	beq.n	551c <usbdc_cb_ctl_done+0x60>
		return usbdc_ctrl_data_end(req);
	default:
		break;
	}
	return false;
}
    54c8:	2000      	movs	r0, #0
    54ca:	bd10      	pop	{r4, pc}
	if (req->bmRequestType != USB_REQT_TYPE_STANDARD) {
    54cc:	7813      	ldrb	r3, [r2, #0]
    54ce:	2b00      	cmp	r3, #0
    54d0:	d1fa      	bne.n	54c8 <usbdc_cb_ctl_done+0xc>
	switch (req->bRequest) {
    54d2:	7853      	ldrb	r3, [r2, #1]
    54d4:	2b05      	cmp	r3, #5
    54d6:	d011      	beq.n	54fc <usbdc_cb_ctl_done+0x40>
    54d8:	2b09      	cmp	r3, #9
    54da:	d1f5      	bne.n	54c8 <usbdc_cb_ctl_done+0xc>
		usbdc.cfg_value = req->wValue;
    54dc:	7892      	ldrb	r2, [r2, #2]
    54de:	4b12      	ldr	r3, [pc, #72]	; (5528 <usbdc_cb_ctl_done+0x6c>)
    54e0:	76da      	strb	r2, [r3, #27]
		usbdc.state     = req->wValue ? USBD_S_CONFIG : USBD_S_ADDRESS;
    54e2:	78a3      	ldrb	r3, [r4, #2]
    54e4:	78e1      	ldrb	r1, [r4, #3]
    54e6:	0209      	lsls	r1, r1, #8
    54e8:	4319      	orrs	r1, r3
    54ea:	1e4b      	subs	r3, r1, #1
    54ec:	4199      	sbcs	r1, r3
    54ee:	3103      	adds	r1, #3
    54f0:	4b0d      	ldr	r3, [pc, #52]	; (5528 <usbdc_cb_ctl_done+0x6c>)
    54f2:	7699      	strb	r1, [r3, #26]
		usbdc_change_notify(USBDC_C_STATE, usbdc.state);
    54f4:	2001      	movs	r0, #1
    54f6:	4b0d      	ldr	r3, [pc, #52]	; (552c <usbdc_cb_ctl_done+0x70>)
    54f8:	4798      	blx	r3
    54fa:	e7e5      	b.n	54c8 <usbdc_cb_ctl_done+0xc>
	usb_d_set_address(addr);
    54fc:	7890      	ldrb	r0, [r2, #2]
    54fe:	4b0c      	ldr	r3, [pc, #48]	; (5530 <usbdc_cb_ctl_done+0x74>)
    5500:	4798      	blx	r3
		usbdc.state = req->wValue ? USBD_S_ADDRESS : USBD_S_DEFAULT;
    5502:	78a3      	ldrb	r3, [r4, #2]
    5504:	78e1      	ldrb	r1, [r4, #3]
    5506:	0209      	lsls	r1, r1, #8
    5508:	4319      	orrs	r1, r3
    550a:	1e4b      	subs	r3, r1, #1
    550c:	4199      	sbcs	r1, r3
    550e:	3102      	adds	r1, #2
    5510:	4b05      	ldr	r3, [pc, #20]	; (5528 <usbdc_cb_ctl_done+0x6c>)
    5512:	7699      	strb	r1, [r3, #26]
		usbdc_change_notify(USBDC_C_STATE, usbdc.state);
    5514:	2001      	movs	r0, #1
    5516:	4b05      	ldr	r3, [pc, #20]	; (552c <usbdc_cb_ctl_done+0x70>)
    5518:	4798      	blx	r3
    551a:	e7d5      	b.n	54c8 <usbdc_cb_ctl_done+0xc>
	usbdc_request_handler(0, req, USB_DATA_STAGE);
    551c:	2201      	movs	r2, #1
    551e:	0021      	movs	r1, r4
    5520:	2000      	movs	r0, #0
    5522:	4b04      	ldr	r3, [pc, #16]	; (5534 <usbdc_cb_ctl_done+0x78>)
    5524:	4798      	blx	r3
		return usbdc_ctrl_data_end(req);
    5526:	e7cf      	b.n	54c8 <usbdc_cb_ctl_done+0xc>
    5528:	200003d8 	.word	0x200003d8
    552c:	00005431 	.word	0x00005431
    5530:	00002cf1 	.word	0x00002cf1
    5534:	00005459 	.word	0x00005459

00005538 <usbdc_reset>:

/**
 * \brief USB Device Core Reset
 */
void usbdc_reset(void)
{
    5538:	b510      	push	{r4, lr}
	usbdc_unconfig();
    553a:	4b0d      	ldr	r3, [pc, #52]	; (5570 <usbdc_reset+0x38>)
    553c:	4798      	blx	r3

	usbdc.state       = USBD_S_DEFAULT;
    553e:	4c0d      	ldr	r4, [pc, #52]	; (5574 <usbdc_reset+0x3c>)
    5540:	2302      	movs	r3, #2
    5542:	76a3      	strb	r3, [r4, #26]
	usbdc.cfg_value   = 0;
    5544:	2300      	movs	r3, #0
    5546:	76e3      	strb	r3, [r4, #27]
	usbdc.ifc_alt_map = 0;
    5548:	7763      	strb	r3, [r4, #29]

	// Setup EP0
	usb_d_ep_deinit(0);
    554a:	2000      	movs	r0, #0
    554c:	4b0a      	ldr	r3, [pc, #40]	; (5578 <usbdc_reset+0x40>)
    554e:	4798      	blx	r3
	usb_d_ep0_init(usbdc.ctrl_size);
    5550:	7f20      	ldrb	r0, [r4, #28]
    5552:	4b0a      	ldr	r3, [pc, #40]	; (557c <usbdc_reset+0x44>)
    5554:	4798      	blx	r3
	usb_d_ep_register_callback(0, USB_D_EP_CB_SETUP, (FUNC_PTR)usbdc_cb_ctl_req);
    5556:	4a0a      	ldr	r2, [pc, #40]	; (5580 <usbdc_reset+0x48>)
    5558:	2100      	movs	r1, #0
    555a:	2000      	movs	r0, #0
    555c:	4c09      	ldr	r4, [pc, #36]	; (5584 <usbdc_reset+0x4c>)
    555e:	47a0      	blx	r4
	usb_d_ep_register_callback(0, USB_D_EP_CB_XFER, (FUNC_PTR)usbdc_cb_ctl_done);
    5560:	4a09      	ldr	r2, [pc, #36]	; (5588 <usbdc_reset+0x50>)
    5562:	2102      	movs	r1, #2
    5564:	2000      	movs	r0, #0
    5566:	47a0      	blx	r4
	usb_d_ep_enable(0);
    5568:	2000      	movs	r0, #0
    556a:	4b08      	ldr	r3, [pc, #32]	; (558c <usbdc_reset+0x54>)
    556c:	4798      	blx	r3
}
    556e:	bd10      	pop	{r4, pc}
    5570:	00005411 	.word	0x00005411
    5574:	200003d8 	.word	0x200003d8
    5578:	00002d65 	.word	0x00002d65
    557c:	00002d51 	.word	0x00002d51
    5580:	000055d1 	.word	0x000055d1
    5584:	00002f6d 	.word	0x00002f6d
    5588:	000054bd 	.word	0x000054bd
    558c:	00002d91 	.word	0x00002d91

00005590 <usbd_event_cb>:
 * \brief Callback invoked on USB device events
 * \param[in] ev Event code.
 * \param[in] param Event parameter for event handling.
 */
static void usbd_event_cb(const enum usb_event ev, const uint32_t param)
{
    5590:	b510      	push	{r4, lr}
	(void)param;

	switch (ev) {
    5592:	2800      	cmp	r0, #0
    5594:	d002      	beq.n	559c <usbd_event_cb+0xc>
    5596:	2801      	cmp	r0, #1
    5598:	d004      	beq.n	55a4 <usbd_event_cb+0x14>
		break;

	default:
		break;
	}
}
    559a:	bd10      	pop	{r4, pc}
		usbdc_change_notify(USBDC_C_CONN, param);
    559c:	2000      	movs	r0, #0
    559e:	4b03      	ldr	r3, [pc, #12]	; (55ac <usbd_event_cb+0x1c>)
    55a0:	4798      	blx	r3
		break;
    55a2:	e7fa      	b.n	559a <usbd_event_cb+0xa>
		usbdc_reset();
    55a4:	4b02      	ldr	r3, [pc, #8]	; (55b0 <usbd_event_cb+0x20>)
    55a6:	4798      	blx	r3
}
    55a8:	e7f7      	b.n	559a <usbd_event_cb+0xa>
    55aa:	46c0      	nop			; (mov r8, r8)
    55ac:	00005431 	.word	0x00005431
    55b0:	00005539 	.word	0x00005539

000055b4 <usbdc_xfer>:

/**
 * \brief Issue USB device transfer
 */
int32_t usbdc_xfer(uint8_t ep, uint8_t *buf, uint32_t size, bool zlp)
{
    55b4:	b510      	push	{r4, lr}
    55b6:	b084      	sub	sp, #16
	struct usb_d_transfer xfer = {(uint8_t *)buf, size, ep, zlp};
    55b8:	ac01      	add	r4, sp, #4
    55ba:	9101      	str	r1, [sp, #4]
    55bc:	9202      	str	r2, [sp, #8]
    55be:	7220      	strb	r0, [r4, #8]
    55c0:	7263      	strb	r3, [r4, #9]
	return usb_d_ep_transfer(&xfer);
    55c2:	0020      	movs	r0, r4
    55c4:	4b01      	ldr	r3, [pc, #4]	; (55cc <usbdc_xfer+0x18>)
    55c6:	4798      	blx	r3
}
    55c8:	b004      	add	sp, #16
    55ca:	bd10      	pop	{r4, pc}
    55cc:	00002ddd 	.word	0x00002ddd

000055d0 <usbdc_cb_ctl_req>:
{
    55d0:	b5f0      	push	{r4, r5, r6, r7, lr}
    55d2:	46c6      	mov	lr, r8
    55d4:	b500      	push	{lr}
    55d6:	b084      	sub	sp, #16
    55d8:	0005      	movs	r5, r0
    55da:	000c      	movs	r4, r1
	switch (usbdc_request_handler(ep, req, USB_SETUP_STAGE)) {
    55dc:	2200      	movs	r2, #0
    55de:	4bb5      	ldr	r3, [pc, #724]	; (58b4 <usbdc_cb_ctl_req+0x2e4>)
    55e0:	4798      	blx	r3
    55e2:	1c43      	adds	r3, r0, #1
    55e4:	d00d      	beq.n	5602 <usbdc_cb_ctl_req+0x32>
		return true;
    55e6:	2301      	movs	r3, #1
	switch (usbdc_request_handler(ep, req, USB_SETUP_STAGE)) {
    55e8:	2801      	cmp	r0, #1
    55ea:	d00b      	beq.n	5604 <usbdc_cb_ctl_req+0x34>
	switch (req->bmRequestType & (USB_REQT_TYPE_MASK | USB_REQT_DIR_IN)) {
    55ec:	7822      	ldrb	r2, [r4, #0]
    55ee:	231f      	movs	r3, #31
    55f0:	0011      	movs	r1, r2
    55f2:	4399      	bics	r1, r3
    55f4:	d00b      	beq.n	560e <usbdc_cb_ctl_req+0x3e>
    55f6:	b2cb      	uxtb	r3, r1
    55f8:	2b80      	cmp	r3, #128	; 0x80
    55fa:	d100      	bne.n	55fe <usbdc_cb_ctl_req+0x2e>
    55fc:	e0f8      	b.n	57f0 <usbdc_cb_ctl_req+0x220>
		return false;
    55fe:	2300      	movs	r3, #0
    5600:	e000      	b.n	5604 <usbdc_cb_ctl_req+0x34>
		return false;
    5602:	2300      	movs	r3, #0
}
    5604:	0018      	movs	r0, r3
    5606:	b004      	add	sp, #16
    5608:	bc04      	pop	{r2}
    560a:	4690      	mov	r8, r2
    560c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	switch (req->bRequest) {
    560e:	7863      	ldrb	r3, [r4, #1]
    5610:	2b0b      	cmp	r3, #11
    5612:	d900      	bls.n	5616 <usbdc_cb_ctl_req+0x46>
    5614:	e1e4      	b.n	59e0 <usbdc_cb_ctl_req+0x410>
    5616:	009b      	lsls	r3, r3, #2
    5618:	49a7      	ldr	r1, [pc, #668]	; (58b8 <usbdc_cb_ctl_req+0x2e8>)
    561a:	58cb      	ldr	r3, [r1, r3]
    561c:	469f      	mov	pc, r3
		return (ERR_NONE == usbdc_xfer(ep, NULL, 0, true));
    561e:	2301      	movs	r3, #1
    5620:	2200      	movs	r2, #0
    5622:	2100      	movs	r1, #0
    5624:	0028      	movs	r0, r5
    5626:	4ca5      	ldr	r4, [pc, #660]	; (58bc <usbdc_cb_ctl_req+0x2ec>)
    5628:	47a0      	blx	r4
    562a:	4243      	negs	r3, r0
    562c:	4143      	adcs	r3, r0
    562e:	b2db      	uxtb	r3, r3
    5630:	e7e8      	b.n	5604 <usbdc_cb_ctl_req+0x34>
		if (!usbdc_set_config(req->wValue)) {
    5632:	78a2      	ldrb	r2, [r4, #2]
	if (cfg_value == 0) {
    5634:	2a00      	cmp	r2, #0
    5636:	d01a      	beq.n	566e <usbdc_cb_ctl_req+0x9e>
		cfg_desc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, cfg_value);
    5638:	4ba1      	ldr	r3, [pc, #644]	; (58c0 <usbdc_cb_ctl_req+0x2f0>)
    563a:	681b      	ldr	r3, [r3, #0]
    563c:	6859      	ldr	r1, [r3, #4]
    563e:	6818      	ldr	r0, [r3, #0]
    5640:	4ba0      	ldr	r3, [pc, #640]	; (58c4 <usbdc_cb_ctl_req+0x2f4>)
    5642:	4798      	blx	r3
	if (NULL == cfg_desc) {
    5644:	2800      	cmp	r0, #0
    5646:	d100      	bne.n	564a <usbdc_cb_ctl_req+0x7a>
    5648:	e1d4      	b.n	59f4 <usbdc_cb_ctl_req+0x424>
    564a:	78c3      	ldrb	r3, [r0, #3]
    564c:	021b      	lsls	r3, r3, #8
    564e:	7881      	ldrb	r1, [r0, #2]
    5650:	18c9      	adds	r1, r1, r3
	desc.eod  = cfg_desc + total_len;
    5652:	b289      	uxth	r1, r1
    5654:	1841      	adds	r1, r0, r1
    5656:	9103      	str	r1, [sp, #12]
	desc.sod  = usb_find_desc(cfg_desc, desc.eod, USB_DT_INTERFACE);
    5658:	2204      	movs	r2, #4
    565a:	4b9b      	ldr	r3, [pc, #620]	; (58c8 <usbdc_cb_ctl_req+0x2f8>)
    565c:	4798      	blx	r3
    565e:	9002      	str	r0, [sp, #8]
	while (NULL != desc.sod) {
    5660:	2800      	cmp	r0, #0
    5662:	d006      	beq.n	5672 <usbdc_cb_ctl_req+0xa2>
    5664:	24ff      	movs	r4, #255	; 0xff
			func       = (struct usbdf_driver *)usbdc.func_list.head;
    5666:	4f96      	ldr	r7, [pc, #600]	; (58c0 <usbdc_cb_ctl_req+0x2f0>)
		desc.sod = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    5668:	4b97      	ldr	r3, [pc, #604]	; (58c8 <usbdc_cb_ctl_req+0x2f8>)
    566a:	4698      	mov	r8, r3
    566c:	e01a      	b.n	56a4 <usbdc_cb_ctl_req+0xd4>
		usbdc_unconfig();
    566e:	4b97      	ldr	r3, [pc, #604]	; (58cc <usbdc_cb_ctl_req+0x2fc>)
    5670:	4798      	blx	r3
		return (ERR_NONE == usbdc_xfer(ep, NULL, 0, true));
    5672:	2301      	movs	r3, #1
    5674:	2200      	movs	r2, #0
    5676:	2100      	movs	r1, #0
    5678:	0028      	movs	r0, r5
    567a:	4c90      	ldr	r4, [pc, #576]	; (58bc <usbdc_cb_ctl_req+0x2ec>)
    567c:	47a0      	blx	r4
    567e:	4243      	negs	r3, r0
    5680:	4143      	adcs	r3, r0
    5682:	b2db      	uxtb	r3, r3
    5684:	e7be      	b.n	5604 <usbdc_cb_ctl_req+0x34>
			last_iface = desc.sod[2];
    5686:	0034      	movs	r4, r6
    5688:	e000      	b.n	568c <usbdc_cb_ctl_req+0xbc>
    568a:	0034      	movs	r4, r6
		desc.sod = usb_desc_next(desc.sod);
    568c:	9802      	ldr	r0, [sp, #8]
	return (desc + usb_desc_len(desc));
    568e:	7803      	ldrb	r3, [r0, #0]
    5690:	18c0      	adds	r0, r0, r3
    5692:	9002      	str	r0, [sp, #8]
		desc.sod = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    5694:	9b03      	ldr	r3, [sp, #12]
    5696:	9301      	str	r3, [sp, #4]
    5698:	2204      	movs	r2, #4
    569a:	0019      	movs	r1, r3
    569c:	47c0      	blx	r8
    569e:	9002      	str	r0, [sp, #8]
	while (NULL != desc.sod) {
    56a0:	2800      	cmp	r0, #0
    56a2:	d0e6      	beq.n	5672 <usbdc_cb_ctl_req+0xa2>
		if (last_iface != desc.sod[2] /* bInterfaceNumber */) {
    56a4:	7886      	ldrb	r6, [r0, #2]
    56a6:	42a6      	cmp	r6, r4
    56a8:	d0f0      	beq.n	568c <usbdc_cb_ctl_req+0xbc>
			func       = (struct usbdf_driver *)usbdc.func_list.head;
    56aa:	693c      	ldr	r4, [r7, #16]
			while (NULL != func) {
    56ac:	2c00      	cmp	r4, #0
    56ae:	d0ea      	beq.n	5686 <usbdc_cb_ctl_req+0xb6>
				if (func->ctrl(func, USBDF_ENABLE, &desc)) {
    56b0:	aa02      	add	r2, sp, #8
    56b2:	2100      	movs	r1, #0
    56b4:	0020      	movs	r0, r4
    56b6:	6863      	ldr	r3, [r4, #4]
    56b8:	4798      	blx	r3
    56ba:	2800      	cmp	r0, #0
    56bc:	d0e5      	beq.n	568a <usbdc_cb_ctl_req+0xba>
					func = func->next;
    56be:	6824      	ldr	r4, [r4, #0]
			while (NULL != func) {
    56c0:	2c00      	cmp	r4, #0
    56c2:	d1f5      	bne.n	56b0 <usbdc_cb_ctl_req+0xe0>
			last_iface = desc.sod[2];
    56c4:	0034      	movs	r4, r6
    56c6:	e7e1      	b.n	568c <usbdc_cb_ctl_req+0xbc>
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    56c8:	231f      	movs	r3, #31
    56ca:	401a      	ands	r2, r3
		return false;
    56cc:	2300      	movs	r3, #0
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    56ce:	2a02      	cmp	r2, #2
    56d0:	d198      	bne.n	5604 <usbdc_cb_ctl_req+0x34>
		if (req->wLength != 0) {
    56d2:	79a3      	ldrb	r3, [r4, #6]
    56d4:	79e2      	ldrb	r2, [r4, #7]
    56d6:	0212      	lsls	r2, r2, #8
    56d8:	431a      	orrs	r2, r3
			return false;
    56da:	2300      	movs	r3, #0
		if (req->wLength != 0) {
    56dc:	2a00      	cmp	r2, #0
    56de:	d000      	beq.n	56e2 <usbdc_cb_ctl_req+0x112>
    56e0:	e790      	b.n	5604 <usbdc_cb_ctl_req+0x34>
		usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_CLR);
    56e2:	7920      	ldrb	r0, [r4, #4]
    56e4:	2100      	movs	r1, #0
    56e6:	4b7a      	ldr	r3, [pc, #488]	; (58d0 <usbdc_cb_ctl_req+0x300>)
    56e8:	4798      	blx	r3
		usbdc_xfer(ep, NULL, 0, true);
    56ea:	2301      	movs	r3, #1
    56ec:	2200      	movs	r2, #0
    56ee:	2100      	movs	r1, #0
    56f0:	0028      	movs	r0, r5
    56f2:	4c72      	ldr	r4, [pc, #456]	; (58bc <usbdc_cb_ctl_req+0x2ec>)
    56f4:	47a0      	blx	r4
		return true;
    56f6:	2301      	movs	r3, #1
    56f8:	e784      	b.n	5604 <usbdc_cb_ctl_req+0x34>
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    56fa:	231f      	movs	r3, #31
    56fc:	401a      	ands	r2, r3
		return false;
    56fe:	2300      	movs	r3, #0
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    5700:	2a02      	cmp	r2, #2
    5702:	d000      	beq.n	5706 <usbdc_cb_ctl_req+0x136>
    5704:	e77e      	b.n	5604 <usbdc_cb_ctl_req+0x34>
		if (req->wLength != 0) {
    5706:	79a3      	ldrb	r3, [r4, #6]
    5708:	79e2      	ldrb	r2, [r4, #7]
    570a:	0212      	lsls	r2, r2, #8
    570c:	431a      	orrs	r2, r3
			return false;
    570e:	2300      	movs	r3, #0
		if (req->wLength != 0) {
    5710:	2a00      	cmp	r2, #0
    5712:	d000      	beq.n	5716 <usbdc_cb_ctl_req+0x146>
    5714:	e776      	b.n	5604 <usbdc_cb_ctl_req+0x34>
		usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_SET);
    5716:	7920      	ldrb	r0, [r4, #4]
    5718:	2101      	movs	r1, #1
    571a:	4b6d      	ldr	r3, [pc, #436]	; (58d0 <usbdc_cb_ctl_req+0x300>)
    571c:	4798      	blx	r3
		usbdc_xfer(ep, NULL, 0, true);
    571e:	2301      	movs	r3, #1
    5720:	2200      	movs	r2, #0
    5722:	2100      	movs	r1, #0
    5724:	0028      	movs	r0, r5
    5726:	4c65      	ldr	r4, [pc, #404]	; (58bc <usbdc_cb_ctl_req+0x2ec>)
    5728:	47a0      	blx	r4
		return true;
    572a:	2301      	movs	r3, #1
    572c:	e76a      	b.n	5604 <usbdc_cb_ctl_req+0x34>
		return usbdc_set_interface(req->wValue, req->wIndex);
    572e:	78a3      	ldrb	r3, [r4, #2]
    5730:	78e5      	ldrb	r5, [r4, #3]
    5732:	022d      	lsls	r5, r5, #8
    5734:	431d      	orrs	r5, r3
    5736:	7923      	ldrb	r3, [r4, #4]
    5738:	7964      	ldrb	r4, [r4, #5]
    573a:	0224      	lsls	r4, r4, #8
    573c:	431c      	orrs	r4, r3
		ifc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, usbdc.cfg_value);
    573e:	4a60      	ldr	r2, [pc, #384]	; (58c0 <usbdc_cb_ctl_req+0x2f0>)
    5740:	6813      	ldr	r3, [r2, #0]
    5742:	7ed2      	ldrb	r2, [r2, #27]
    5744:	6859      	ldr	r1, [r3, #4]
    5746:	6818      	ldr	r0, [r3, #0]
    5748:	4b5e      	ldr	r3, [pc, #376]	; (58c4 <usbdc_cb_ctl_req+0x2f4>)
    574a:	4798      	blx	r3
	if (NULL == ifc) {
    574c:	2800      	cmp	r0, #0
    574e:	d047      	beq.n	57e0 <usbdc_cb_ctl_req+0x210>
	desc.sod = ifc;
    5750:	9002      	str	r0, [sp, #8]
	return (ptr[0] + (ptr[1] << 8));
    5752:	78c3      	ldrb	r3, [r0, #3]
    5754:	021b      	lsls	r3, r3, #8
    5756:	7881      	ldrb	r1, [r0, #2]
    5758:	18c9      	adds	r1, r1, r3
	desc.eod = ifc + usb_cfg_desc_total_len(ifc);
    575a:	b289      	uxth	r1, r1
    575c:	1841      	adds	r1, r0, r1
    575e:	9103      	str	r1, [sp, #12]
	if (NULL == (ifc = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE))) {
    5760:	2204      	movs	r2, #4
    5762:	4b59      	ldr	r3, [pc, #356]	; (58c8 <usbdc_cb_ctl_req+0x2f8>)
    5764:	4798      	blx	r3
    5766:	2800      	cmp	r0, #0
    5768:	d03c      	beq.n	57e4 <usbdc_cb_ctl_req+0x214>
		ifc      = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    576a:	4e57      	ldr	r6, [pc, #348]	; (58c8 <usbdc_cb_ctl_req+0x2f8>)
    576c:	e008      	b.n	5780 <usbdc_cb_ctl_req+0x1b0>
		desc.sod = usb_desc_next(desc.sod);
    576e:	9802      	ldr	r0, [sp, #8]
	return (desc + usb_desc_len(desc));
    5770:	7803      	ldrb	r3, [r0, #0]
    5772:	18c0      	adds	r0, r0, r3
    5774:	9002      	str	r0, [sp, #8]
		ifc      = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    5776:	2204      	movs	r2, #4
    5778:	9903      	ldr	r1, [sp, #12]
    577a:	47b0      	blx	r6
		if (NULL == ifc) {
    577c:	2800      	cmp	r0, #0
    577e:	d033      	beq.n	57e8 <usbdc_cb_ctl_req+0x218>
	while (ifc[2] != ifc_id || ifc[3] != alt_set) {
    5780:	7883      	ldrb	r3, [r0, #2]
    5782:	42a3      	cmp	r3, r4
    5784:	d1f3      	bne.n	576e <usbdc_cb_ctl_req+0x19e>
    5786:	78c3      	ldrb	r3, [r0, #3]
    5788:	42ab      	cmp	r3, r5
    578a:	d1f0      	bne.n	576e <usbdc_cb_ctl_req+0x19e>
	desc.sod = ifc;
    578c:	9002      	str	r0, [sp, #8]
	func     = (struct usbdf_driver *)usbdc.func_list.head;
    578e:	4b4c      	ldr	r3, [pc, #304]	; (58c0 <usbdc_cb_ctl_req+0x2f0>)
    5790:	691e      	ldr	r6, [r3, #16]
	while (NULL != func) {
    5792:	2e00      	cmp	r6, #0
    5794:	d02a      	beq.n	57ec <usbdc_cb_ctl_req+0x21c>
		if (func->ctrl(func, USBDF_DISABLE, &desc)) {
    5796:	aa02      	add	r2, sp, #8
    5798:	2101      	movs	r1, #1
    579a:	0030      	movs	r0, r6
    579c:	6873      	ldr	r3, [r6, #4]
    579e:	4798      	blx	r3
    57a0:	2800      	cmp	r0, #0
    57a2:	d004      	beq.n	57ae <usbdc_cb_ctl_req+0x1de>
			func = func->next;
    57a4:	6836      	ldr	r6, [r6, #0]
	while (NULL != func) {
    57a6:	2e00      	cmp	r6, #0
    57a8:	d1f5      	bne.n	5796 <usbdc_cb_ctl_req+0x1c6>
	return false;
    57aa:	2300      	movs	r3, #0
    57ac:	e72a      	b.n	5604 <usbdc_cb_ctl_req+0x34>
		} else if (ERR_NONE == func->ctrl(func, USBDF_ENABLE, &desc)) {
    57ae:	6873      	ldr	r3, [r6, #4]
    57b0:	aa02      	add	r2, sp, #8
    57b2:	2100      	movs	r1, #0
    57b4:	0030      	movs	r0, r6
    57b6:	4798      	blx	r3
			return false;
    57b8:	2300      	movs	r3, #0
		} else if (ERR_NONE == func->ctrl(func, USBDF_ENABLE, &desc)) {
    57ba:	2800      	cmp	r0, #0
    57bc:	d000      	beq.n	57c0 <usbdc_cb_ctl_req+0x1f0>
    57be:	e721      	b.n	5604 <usbdc_cb_ctl_req+0x34>
			if (alt_set) {
    57c0:	2d00      	cmp	r5, #0
    57c2:	d005      	beq.n	57d0 <usbdc_cb_ctl_req+0x200>
				usbdc.ifc_alt_map |= 1 << ifc_id;
    57c4:	493e      	ldr	r1, [pc, #248]	; (58c0 <usbdc_cb_ctl_req+0x2f0>)
    57c6:	2201      	movs	r2, #1
    57c8:	40a2      	lsls	r2, r4
    57ca:	7f4b      	ldrb	r3, [r1, #29]
    57cc:	4313      	orrs	r3, r2
    57ce:	774b      	strb	r3, [r1, #29]
			usbdc_xfer(0, NULL, 0, 0);
    57d0:	2300      	movs	r3, #0
    57d2:	2200      	movs	r2, #0
    57d4:	2100      	movs	r1, #0
    57d6:	2000      	movs	r0, #0
    57d8:	4c38      	ldr	r4, [pc, #224]	; (58bc <usbdc_cb_ctl_req+0x2ec>)
    57da:	47a0      	blx	r4
			return true;
    57dc:	2301      	movs	r3, #1
    57de:	e711      	b.n	5604 <usbdc_cb_ctl_req+0x34>
		return false;
    57e0:	2300      	movs	r3, #0
    57e2:	e70f      	b.n	5604 <usbdc_cb_ctl_req+0x34>
		return false;
    57e4:	2300      	movs	r3, #0
    57e6:	e70d      	b.n	5604 <usbdc_cb_ctl_req+0x34>
			return false;
    57e8:	2300      	movs	r3, #0
    57ea:	e70b      	b.n	5604 <usbdc_cb_ctl_req+0x34>
	return false;
    57ec:	2300      	movs	r3, #0
    57ee:	e709      	b.n	5604 <usbdc_cb_ctl_req+0x34>
	switch (req->bRequest) {
    57f0:	7863      	ldrb	r3, [r4, #1]
    57f2:	2b06      	cmp	r3, #6
    57f4:	d033      	beq.n	585e <usbdc_cb_ctl_req+0x28e>
    57f6:	b2d9      	uxtb	r1, r3
    57f8:	2906      	cmp	r1, #6
    57fa:	d922      	bls.n	5842 <usbdc_cb_ctl_req+0x272>
    57fc:	2b08      	cmp	r3, #8
    57fe:	d100      	bne.n	5802 <usbdc_cb_ctl_req+0x232>
    5800:	e0af      	b.n	5962 <usbdc_cb_ctl_req+0x392>
    5802:	2b0a      	cmp	r3, #10
    5804:	d000      	beq.n	5808 <usbdc_cb_ctl_req+0x238>
    5806:	e0ed      	b.n	59e4 <usbdc_cb_ctl_req+0x414>
	if (!(usbdc.ifc_alt_map & (1 << req->wIndex))) {
    5808:	4b2d      	ldr	r3, [pc, #180]	; (58c0 <usbdc_cb_ctl_req+0x2f0>)
    580a:	7f5a      	ldrb	r2, [r3, #29]
    580c:	7921      	ldrb	r1, [r4, #4]
    580e:	7963      	ldrb	r3, [r4, #5]
    5810:	021b      	lsls	r3, r3, #8
    5812:	430b      	orrs	r3, r1
    5814:	411a      	asrs	r2, r3
    5816:	07d3      	lsls	r3, r2, #31
    5818:	d400      	bmi.n	581c <usbdc_cb_ctl_req+0x24c>
    581a:	e0ca      	b.n	59b2 <usbdc_cb_ctl_req+0x3e2>
	struct usbdf_driver *func = (struct usbdf_driver *)usbdc.func_list.head;
    581c:	4b28      	ldr	r3, [pc, #160]	; (58c0 <usbdc_cb_ctl_req+0x2f0>)
    581e:	691d      	ldr	r5, [r3, #16]
	return false;
    5820:	2300      	movs	r3, #0
	while (NULL != func) {
    5822:	2d00      	cmp	r5, #0
    5824:	d100      	bne.n	5828 <usbdc_cb_ctl_req+0x258>
    5826:	e6ed      	b.n	5604 <usbdc_cb_ctl_req+0x34>
		if (0 > (rc = func->ctrl(func, USBDF_GET_IFACE, req))) {
    5828:	0022      	movs	r2, r4
    582a:	2102      	movs	r1, #2
    582c:	0028      	movs	r0, r5
    582e:	686b      	ldr	r3, [r5, #4]
    5830:	4798      	blx	r3
    5832:	2800      	cmp	r0, #0
    5834:	db00      	blt.n	5838 <usbdc_cb_ctl_req+0x268>
    5836:	e0c8      	b.n	59ca <usbdc_cb_ctl_req+0x3fa>
			func = func->next;
    5838:	682d      	ldr	r5, [r5, #0]
	while (NULL != func) {
    583a:	2d00      	cmp	r5, #0
    583c:	d1f4      	bne.n	5828 <usbdc_cb_ctl_req+0x258>
	return false;
    583e:	2300      	movs	r3, #0
    5840:	e6e0      	b.n	5604 <usbdc_cb_ctl_req+0x34>
	switch (req->bRequest) {
    5842:	2b00      	cmp	r3, #0
    5844:	d000      	beq.n	5848 <usbdc_cb_ctl_req+0x278>
    5846:	e0cd      	b.n	59e4 <usbdc_cb_ctl_req+0x414>
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    5848:	231f      	movs	r3, #31
    584a:	401a      	ands	r2, r3
    584c:	b2d3      	uxtb	r3, r2
    584e:	2b01      	cmp	r3, #1
    5850:	d800      	bhi.n	5854 <usbdc_cb_ctl_req+0x284>
    5852:	e092      	b.n	597a <usbdc_cb_ctl_req+0x3aa>
    5854:	2a02      	cmp	r2, #2
    5856:	d100      	bne.n	585a <usbdc_cb_ctl_req+0x28a>
    5858:	e09f      	b.n	599a <usbdc_cb_ctl_req+0x3ca>
		return false;
    585a:	2300      	movs	r3, #0
    585c:	e6d2      	b.n	5604 <usbdc_cb_ctl_req+0x34>
	uint8_t type = (uint8_t)(req->wValue >> 8);
    585e:	78a3      	ldrb	r3, [r4, #2]
    5860:	78e2      	ldrb	r2, [r4, #3]
    5862:	0212      	lsls	r2, r2, #8
    5864:	431a      	orrs	r2, r3
    5866:	0a13      	lsrs	r3, r2, #8
	switch (type) {
    5868:	2b02      	cmp	r3, #2
    586a:	d033      	beq.n	58d4 <usbdc_cb_ctl_req+0x304>
    586c:	2b03      	cmp	r3, #3
    586e:	d056      	beq.n	591e <usbdc_cb_ctl_req+0x34e>
    5870:	2b01      	cmp	r3, #1
    5872:	d001      	beq.n	5878 <usbdc_cb_ctl_req+0x2a8>
	return false;
    5874:	2300      	movs	r3, #0
    5876:	e6c5      	b.n	5604 <usbdc_cb_ctl_req+0x34>
	uint16_t length   = req->wLength;
    5878:	79a2      	ldrb	r2, [r4, #6]
    587a:	79e3      	ldrb	r3, [r4, #7]
    587c:	021b      	lsls	r3, r3, #8
    587e:	4313      	orrs	r3, r2
    5880:	1c1a      	adds	r2, r3, #0
    5882:	2b12      	cmp	r3, #18
    5884:	d900      	bls.n	5888 <usbdc_cb_ctl_req+0x2b8>
    5886:	2212      	movs	r2, #18
    5888:	b294      	uxth	r4, r2
		dev_desc = usb_find_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, USB_DT_DEVICE);
    588a:	4b0d      	ldr	r3, [pc, #52]	; (58c0 <usbdc_cb_ctl_req+0x2f0>)
    588c:	681b      	ldr	r3, [r3, #0]
    588e:	6859      	ldr	r1, [r3, #4]
    5890:	6818      	ldr	r0, [r3, #0]
    5892:	2201      	movs	r2, #1
    5894:	4b0c      	ldr	r3, [pc, #48]	; (58c8 <usbdc_cb_ctl_req+0x2f8>)
    5896:	4798      	blx	r3
	if (!dev_desc) {
    5898:	2800      	cmp	r0, #0
    589a:	d100      	bne.n	589e <usbdc_cb_ctl_req+0x2ce>
    589c:	e0a4      	b.n	59e8 <usbdc_cb_ctl_req+0x418>
	if (ERR_NONE != usbdc_xfer(ep, dev_desc, length, false)) {
    589e:	2300      	movs	r3, #0
    58a0:	0022      	movs	r2, r4
    58a2:	0001      	movs	r1, r0
    58a4:	0028      	movs	r0, r5
    58a6:	4c05      	ldr	r4, [pc, #20]	; (58bc <usbdc_cb_ctl_req+0x2ec>)
    58a8:	47a0      	blx	r4
    58aa:	4243      	negs	r3, r0
    58ac:	4143      	adcs	r3, r0
    58ae:	b2db      	uxtb	r3, r3
    58b0:	e6a8      	b.n	5604 <usbdc_cb_ctl_req+0x34>
    58b2:	46c0      	nop			; (mov r8, r8)
    58b4:	00005459 	.word	0x00005459
    58b8:	00009c94 	.word	0x00009c94
    58bc:	000055b5 	.word	0x000055b5
    58c0:	200003d8 	.word	0x200003d8
    58c4:	00005b9d 	.word	0x00005b9d
    58c8:	00005b21 	.word	0x00005b21
    58cc:	00005411 	.word	0x00005411
    58d0:	00002f05 	.word	0x00002f05
	uint16_t length   = req->wLength;
    58d4:	79a3      	ldrb	r3, [r4, #6]
    58d6:	79e6      	ldrb	r6, [r4, #7]
    58d8:	0236      	lsls	r6, r6, #8
    58da:	431e      	orrs	r6, r3
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    58dc:	4b46      	ldr	r3, [pc, #280]	; (59f8 <usbdc_cb_ctl_req+0x428>)
    58de:	7f1f      	ldrb	r7, [r3, #28]
		cfg_desc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, index + 1);
    58e0:	681b      	ldr	r3, [r3, #0]
    58e2:	3201      	adds	r2, #1
    58e4:	b2d2      	uxtb	r2, r2
    58e6:	6859      	ldr	r1, [r3, #4]
    58e8:	6818      	ldr	r0, [r3, #0]
    58ea:	4b44      	ldr	r3, [pc, #272]	; (59fc <usbdc_cb_ctl_req+0x42c>)
    58ec:	4798      	blx	r3
    58ee:	1e01      	subs	r1, r0, #0
	if (NULL == cfg_desc) {
    58f0:	d07c      	beq.n	59ec <usbdc_cb_ctl_req+0x41c>
	return (ptr[0] + (ptr[1] << 8));
    58f2:	78c3      	ldrb	r3, [r0, #3]
    58f4:	021b      	lsls	r3, r3, #8
    58f6:	7884      	ldrb	r4, [r0, #2]
    58f8:	18e4      	adds	r4, r4, r3
    58fa:	b2a4      	uxth	r4, r4
		need_zlp = false;
    58fc:	2300      	movs	r3, #0
	if (length <= total_len) {
    58fe:	42a6      	cmp	r6, r4
    5900:	d905      	bls.n	590e <usbdc_cb_ctl_req+0x33e>
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    5902:	3f01      	subs	r7, #1
    5904:	403e      	ands	r6, r7
    5906:	4273      	negs	r3, r6
    5908:	4173      	adcs	r3, r6
    590a:	b2db      	uxtb	r3, r3
		length = total_len;
    590c:	0026      	movs	r6, r4
	if (ERR_NONE != usbdc_xfer(ep, cfg_desc, length, need_zlp)) {
    590e:	0032      	movs	r2, r6
    5910:	0028      	movs	r0, r5
    5912:	4c3b      	ldr	r4, [pc, #236]	; (5a00 <usbdc_cb_ctl_req+0x430>)
    5914:	47a0      	blx	r4
    5916:	4243      	negs	r3, r0
    5918:	4143      	adcs	r3, r0
    591a:	b2db      	uxtb	r3, r3
    591c:	e672      	b.n	5604 <usbdc_cb_ctl_req+0x34>
	uint16_t length   = req->wLength;
    591e:	79a3      	ldrb	r3, [r4, #6]
    5920:	79e1      	ldrb	r1, [r4, #7]
    5922:	0209      	lsls	r1, r1, #8
    5924:	4319      	orrs	r1, r3
    5926:	000c      	movs	r4, r1
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    5928:	4b33      	ldr	r3, [pc, #204]	; (59f8 <usbdc_cb_ctl_req+0x428>)
    592a:	7f1e      	ldrb	r6, [r3, #28]
	str_desc = usb_find_str_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, index);
    592c:	681b      	ldr	r3, [r3, #0]
    592e:	b2d2      	uxtb	r2, r2
    5930:	6859      	ldr	r1, [r3, #4]
    5932:	6818      	ldr	r0, [r3, #0]
    5934:	4b33      	ldr	r3, [pc, #204]	; (5a04 <usbdc_cb_ctl_req+0x434>)
    5936:	4798      	blx	r3
    5938:	1e01      	subs	r1, r0, #0
	if (NULL == str_desc) {
    593a:	d059      	beq.n	59f0 <usbdc_cb_ctl_req+0x420>
	if (length <= str_desc[0]) {
    593c:	7802      	ldrb	r2, [r0, #0]
		need_zlp = false;
    593e:	2300      	movs	r3, #0
	if (length <= str_desc[0]) {
    5940:	4294      	cmp	r4, r2
    5942:	d906      	bls.n	5952 <usbdc_cb_ctl_req+0x382>
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    5944:	1e73      	subs	r3, r6, #1
    5946:	4023      	ands	r3, r4
    5948:	0018      	movs	r0, r3
    594a:	4243      	negs	r3, r0
    594c:	4143      	adcs	r3, r0
    594e:	b2db      	uxtb	r3, r3
		length = str_desc[0];
    5950:	0014      	movs	r4, r2
	if (ERR_NONE != usbdc_xfer(ep, str_desc, length, need_zlp)) {
    5952:	0022      	movs	r2, r4
    5954:	0028      	movs	r0, r5
    5956:	4c2a      	ldr	r4, [pc, #168]	; (5a00 <usbdc_cb_ctl_req+0x430>)
    5958:	47a0      	blx	r4
    595a:	4243      	negs	r3, r0
    595c:	4143      	adcs	r3, r0
    595e:	b2db      	uxtb	r3, r3
    5960:	e650      	b.n	5604 <usbdc_cb_ctl_req+0x34>
		*(uint8_t *)usbdc.ctrl_buf = usbdc.cfg_value;
    5962:	4b25      	ldr	r3, [pc, #148]	; (59f8 <usbdc_cb_ctl_req+0x428>)
    5964:	7eda      	ldrb	r2, [r3, #27]
    5966:	6959      	ldr	r1, [r3, #20]
    5968:	700a      	strb	r2, [r1, #0]
		usbdc_xfer(ep, usbdc.ctrl_buf, 1, false);
    596a:	6959      	ldr	r1, [r3, #20]
    596c:	2300      	movs	r3, #0
    596e:	2201      	movs	r2, #1
    5970:	0028      	movs	r0, r5
    5972:	4c23      	ldr	r4, [pc, #140]	; (5a00 <usbdc_cb_ctl_req+0x430>)
    5974:	47a0      	blx	r4
		return true;
    5976:	2301      	movs	r3, #1
    5978:	e644      	b.n	5604 <usbdc_cb_ctl_req+0x34>
		st = 0;
    597a:	2300      	movs	r3, #0
    597c:	9302      	str	r3, [sp, #8]
	memcpy(usbdc.ctrl_buf, &st, 2);
    597e:	4c1e      	ldr	r4, [pc, #120]	; (59f8 <usbdc_cb_ctl_req+0x428>)
    5980:	2202      	movs	r2, #2
    5982:	a902      	add	r1, sp, #8
    5984:	6960      	ldr	r0, [r4, #20]
    5986:	4b20      	ldr	r3, [pc, #128]	; (5a08 <usbdc_cb_ctl_req+0x438>)
    5988:	4798      	blx	r3
	usbdc_xfer(ep, usbdc.ctrl_buf, 2, false);
    598a:	6961      	ldr	r1, [r4, #20]
    598c:	2300      	movs	r3, #0
    598e:	2202      	movs	r2, #2
    5990:	0028      	movs	r0, r5
    5992:	4c1b      	ldr	r4, [pc, #108]	; (5a00 <usbdc_cb_ctl_req+0x430>)
    5994:	47a0      	blx	r4
	return true;
    5996:	2301      	movs	r3, #1
    5998:	e634      	b.n	5604 <usbdc_cb_ctl_req+0x34>
		st = usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_GET);
    599a:	7920      	ldrb	r0, [r4, #4]
    599c:	2102      	movs	r1, #2
    599e:	4b1b      	ldr	r3, [pc, #108]	; (5a0c <usbdc_cb_ctl_req+0x43c>)
    59a0:	4798      	blx	r3
		if (st < 0) {
    59a2:	2800      	cmp	r0, #0
    59a4:	db03      	blt.n	59ae <usbdc_cb_ctl_req+0x3de>
		st = st & 0x1;
    59a6:	2301      	movs	r3, #1
    59a8:	4018      	ands	r0, r3
    59aa:	9002      	str	r0, [sp, #8]
    59ac:	e7e7      	b.n	597e <usbdc_cb_ctl_req+0x3ae>
			return false;
    59ae:	2300      	movs	r3, #0
    59b0:	e628      	b.n	5604 <usbdc_cb_ctl_req+0x34>
		usbdc.ctrl_buf[0] = 0;
    59b2:	4b11      	ldr	r3, [pc, #68]	; (59f8 <usbdc_cb_ctl_req+0x428>)
    59b4:	2200      	movs	r2, #0
    59b6:	6959      	ldr	r1, [r3, #20]
    59b8:	700a      	strb	r2, [r1, #0]
		usbdc_xfer(0, usbdc.ctrl_buf, 1, false);
    59ba:	6959      	ldr	r1, [r3, #20]
    59bc:	2300      	movs	r3, #0
    59be:	3201      	adds	r2, #1
    59c0:	2000      	movs	r0, #0
    59c2:	4c0f      	ldr	r4, [pc, #60]	; (5a00 <usbdc_cb_ctl_req+0x430>)
    59c4:	47a0      	blx	r4
		return true;
    59c6:	2301      	movs	r3, #1
    59c8:	e61c      	b.n	5604 <usbdc_cb_ctl_req+0x34>
			usbdc.ctrl_buf[0] = (uint8_t)rc;
    59ca:	4b0b      	ldr	r3, [pc, #44]	; (59f8 <usbdc_cb_ctl_req+0x428>)
    59cc:	695a      	ldr	r2, [r3, #20]
    59ce:	7010      	strb	r0, [r2, #0]
			usbdc_xfer(0, usbdc.ctrl_buf, 1, false);
    59d0:	6959      	ldr	r1, [r3, #20]
    59d2:	2300      	movs	r3, #0
    59d4:	2201      	movs	r2, #1
    59d6:	2000      	movs	r0, #0
    59d8:	4c09      	ldr	r4, [pc, #36]	; (5a00 <usbdc_cb_ctl_req+0x430>)
    59da:	47a0      	blx	r4
			return true;
    59dc:	2301      	movs	r3, #1
    59de:	e611      	b.n	5604 <usbdc_cb_ctl_req+0x34>
		return false;
    59e0:	2300      	movs	r3, #0
    59e2:	e60f      	b.n	5604 <usbdc_cb_ctl_req+0x34>
		return false;
    59e4:	2300      	movs	r3, #0
    59e6:	e60d      	b.n	5604 <usbdc_cb_ctl_req+0x34>
		return false;
    59e8:	2300      	movs	r3, #0
    59ea:	e60b      	b.n	5604 <usbdc_cb_ctl_req+0x34>
		return false;
    59ec:	2300      	movs	r3, #0
    59ee:	e609      	b.n	5604 <usbdc_cb_ctl_req+0x34>
		return false;
    59f0:	2300      	movs	r3, #0
    59f2:	e607      	b.n	5604 <usbdc_cb_ctl_req+0x34>
			return false;
    59f4:	2300      	movs	r3, #0
    59f6:	e605      	b.n	5604 <usbdc_cb_ctl_req+0x34>
    59f8:	200003d8 	.word	0x200003d8
    59fc:	00005b9d 	.word	0x00005b9d
    5a00:	000055b5 	.word	0x000055b5
    5a04:	00005c05 	.word	0x00005c05
    5a08:	000092e1 	.word	0x000092e1
    5a0c:	00002f05 	.word	0x00002f05

00005a10 <usbdc_register_handler>:

/**
 * \brief Register the handler
 */
void usbdc_register_handler(enum usbdc_handler_type type, const struct usbdc_handler *h)
{
    5a10:	b510      	push	{r4, lr}
	switch (type) {
    5a12:	2801      	cmp	r0, #1
    5a14:	d009      	beq.n	5a2a <usbdc_register_handler+0x1a>
    5a16:	2800      	cmp	r0, #0
    5a18:	d002      	beq.n	5a20 <usbdc_register_handler+0x10>
    5a1a:	2802      	cmp	r0, #2
    5a1c:	d00a      	beq.n	5a34 <usbdc_register_handler+0x24>
		list_insert_at_end(&usbdc.handlers.change_list, (void *)h);
		break;
	default:
		break;
	}
}
    5a1e:	bd10      	pop	{r4, pc}
		list_insert_at_end(&usbdc.handlers.sof_list, (void *)h);
    5a20:	4807      	ldr	r0, [pc, #28]	; (5a40 <usbdc_register_handler+0x30>)
    5a22:	3004      	adds	r0, #4
    5a24:	4b07      	ldr	r3, [pc, #28]	; (5a44 <usbdc_register_handler+0x34>)
    5a26:	4798      	blx	r3
		break;
    5a28:	e7f9      	b.n	5a1e <usbdc_register_handler+0xe>
		list_insert_at_end(&usbdc.handlers.req_list, (void *)h);
    5a2a:	4805      	ldr	r0, [pc, #20]	; (5a40 <usbdc_register_handler+0x30>)
    5a2c:	3008      	adds	r0, #8
    5a2e:	4b05      	ldr	r3, [pc, #20]	; (5a44 <usbdc_register_handler+0x34>)
    5a30:	4798      	blx	r3
		break;
    5a32:	e7f4      	b.n	5a1e <usbdc_register_handler+0xe>
		list_insert_at_end(&usbdc.handlers.change_list, (void *)h);
    5a34:	4802      	ldr	r0, [pc, #8]	; (5a40 <usbdc_register_handler+0x30>)
    5a36:	300c      	adds	r0, #12
    5a38:	4b02      	ldr	r3, [pc, #8]	; (5a44 <usbdc_register_handler+0x34>)
    5a3a:	4798      	blx	r3
}
    5a3c:	e7ef      	b.n	5a1e <usbdc_register_handler+0xe>
    5a3e:	46c0      	nop			; (mov r8, r8)
    5a40:	200003d8 	.word	0x200003d8
    5a44:	00002fe9 	.word	0x00002fe9

00005a48 <usbdc_init>:

/**
 * \brief Initialize the USB device core driver
 */
int32_t usbdc_init(uint8_t *ctrl_buf)
{
    5a48:	b570      	push	{r4, r5, r6, lr}
    5a4a:	0004      	movs	r4, r0
	ASSERT(ctrl_buf);
    5a4c:	1e43      	subs	r3, r0, #1
    5a4e:	4198      	sbcs	r0, r3
    5a50:	b2c0      	uxtb	r0, r0
    5a52:	4a0c      	ldr	r2, [pc, #48]	; (5a84 <usbdc_init+0x3c>)
    5a54:	490c      	ldr	r1, [pc, #48]	; (5a88 <usbdc_init+0x40>)
    5a56:	4b0d      	ldr	r3, [pc, #52]	; (5a8c <usbdc_init+0x44>)
    5a58:	4798      	blx	r3

	int32_t rc;

	rc = usb_d_init();
    5a5a:	4b0d      	ldr	r3, [pc, #52]	; (5a90 <usbdc_init+0x48>)
    5a5c:	4798      	blx	r3
	if (rc < 0) {
    5a5e:	2800      	cmp	r0, #0
    5a60:	db0e      	blt.n	5a80 <usbdc_init+0x38>
		return rc;
	}

	memset(&usbdc, 0, sizeof(usbdc));
    5a62:	4d0c      	ldr	r5, [pc, #48]	; (5a94 <usbdc_init+0x4c>)
    5a64:	2220      	movs	r2, #32
    5a66:	2100      	movs	r1, #0
    5a68:	0028      	movs	r0, r5
    5a6a:	4b0b      	ldr	r3, [pc, #44]	; (5a98 <usbdc_init+0x50>)
    5a6c:	4798      	blx	r3
	usbdc.ctrl_buf = ctrl_buf;
    5a6e:	616c      	str	r4, [r5, #20]
	usb_d_register_callback(USB_D_CB_SOF, (FUNC_PTR)usbd_sof_cb);
    5a70:	490a      	ldr	r1, [pc, #40]	; (5a9c <usbdc_init+0x54>)
    5a72:	2000      	movs	r0, #0
    5a74:	4c0a      	ldr	r4, [pc, #40]	; (5aa0 <usbdc_init+0x58>)
    5a76:	47a0      	blx	r4
	usb_d_register_callback(USB_D_CB_EVENT, (FUNC_PTR)usbd_event_cb);
    5a78:	490a      	ldr	r1, [pc, #40]	; (5aa4 <usbdc_init+0x5c>)
    5a7a:	2001      	movs	r0, #1
    5a7c:	47a0      	blx	r4

	return 0;
    5a7e:	2000      	movs	r0, #0
}
    5a80:	bd70      	pop	{r4, r5, r6, pc}
    5a82:	46c0      	nop			; (mov r8, r8)
    5a84:	0000035f 	.word	0x0000035f
    5a88:	00009cc4 	.word	0x00009cc4
    5a8c:	00002fbd 	.word	0x00002fbd
    5a90:	00002c69 	.word	0x00002c69
    5a94:	200003d8 	.word	0x200003d8
    5a98:	000092f3 	.word	0x000092f3
    5a9c:	0000549d 	.word	0x0000549d
    5aa0:	00002ccd 	.word	0x00002ccd
    5aa4:	00005591 	.word	0x00005591

00005aa8 <usbdc_register_function>:
 * \brief Register/unregister function support of a USB device function
 *
 * Must be invoked when USB device is stopped.
 */
void usbdc_register_function(struct usbdf_driver *func)
{
    5aa8:	b510      	push	{r4, lr}
    5aaa:	0001      	movs	r1, r0
	list_insert_at_end(&usbdc.func_list, func);
    5aac:	4802      	ldr	r0, [pc, #8]	; (5ab8 <usbdc_register_function+0x10>)
    5aae:	3010      	adds	r0, #16
    5ab0:	4b02      	ldr	r3, [pc, #8]	; (5abc <usbdc_register_function+0x14>)
    5ab2:	4798      	blx	r3
}
    5ab4:	bd10      	pop	{r4, pc}
    5ab6:	46c0      	nop			; (mov r8, r8)
    5ab8:	200003d8 	.word	0x200003d8
    5abc:	00002fe9 	.word	0x00002fe9

00005ac0 <usbdc_start>:

/**
 * \brief Start the USB device driver with specific descriptors set
 */
int32_t usbdc_start(struct usbd_descriptors *desces)
{
    5ac0:	b510      	push	{r4, lr}
	if (usbdc.state >= USBD_S_POWER) {
    5ac2:	4b0b      	ldr	r3, [pc, #44]	; (5af0 <usbdc_start+0x30>)
    5ac4:	7e9b      	ldrb	r3, [r3, #26]
    5ac6:	2b00      	cmp	r3, #0
    5ac8:	d10c      	bne.n	5ae4 <usbdc_start+0x24>
		return ERR_BUSY;
	}

	if (desces) {
    5aca:	2800      	cmp	r0, #0
    5acc:	d00d      	beq.n	5aea <usbdc_start+0x2a>
		usbdc.desces.ls_fs = desces;
    5ace:	4b08      	ldr	r3, [pc, #32]	; (5af0 <usbdc_start+0x30>)
    5ad0:	6018      	str	r0, [r3, #0]
#endif
	} else {
		return ERR_BAD_DATA;
	}

	usbdc.ctrl_size = desces->sod[7];
    5ad2:	6802      	ldr	r2, [r0, #0]
    5ad4:	79d2      	ldrb	r2, [r2, #7]
    5ad6:	771a      	strb	r2, [r3, #28]
	usbdc.state     = USBD_S_POWER;
    5ad8:	2201      	movs	r2, #1
    5ada:	769a      	strb	r2, [r3, #26]
	usb_d_enable();
    5adc:	4b05      	ldr	r3, [pc, #20]	; (5af4 <usbdc_start+0x34>)
    5ade:	4798      	blx	r3
	return ERR_NONE;
    5ae0:	2000      	movs	r0, #0
}
    5ae2:	bd10      	pop	{r4, pc}
		return ERR_BUSY;
    5ae4:	2004      	movs	r0, #4
    5ae6:	4240      	negs	r0, r0
    5ae8:	e7fb      	b.n	5ae2 <usbdc_start+0x22>
		return ERR_BAD_DATA;
    5aea:	2009      	movs	r0, #9
    5aec:	4240      	negs	r0, r0
    5aee:	e7f8      	b.n	5ae2 <usbdc_start+0x22>
    5af0:	200003d8 	.word	0x200003d8
    5af4:	00002cd9 	.word	0x00002cd9

00005af8 <usbdc_attach>:

/**
 * \brief Attach the USB device to host
 */
void usbdc_attach(void)
{
    5af8:	b510      	push	{r4, lr}
	usb_d_attach();
    5afa:	4b01      	ldr	r3, [pc, #4]	; (5b00 <usbdc_attach+0x8>)
    5afc:	4798      	blx	r3
}
    5afe:	bd10      	pop	{r4, pc}
    5b00:	00002ce5 	.word	0x00002ce5

00005b04 <usbdc_get_ctrl_buffer>:
/**
 * \brief Return USB Device endpoint0 buffer
 */
uint8_t *usbdc_get_ctrl_buffer(void)
{
	return usbdc.ctrl_buf;
    5b04:	4b01      	ldr	r3, [pc, #4]	; (5b0c <usbdc_get_ctrl_buffer+0x8>)
    5b06:	6958      	ldr	r0, [r3, #20]
}
    5b08:	4770      	bx	lr
    5b0a:	46c0      	nop			; (mov r8, r8)
    5b0c:	200003d8 	.word	0x200003d8

00005b10 <usbdc_get_state>:
/**
 * \brief Return current USB state
 */
uint8_t usbdc_get_state(void)
{
	if (usbdc.state & USBD_S_SUSPEND) {
    5b10:	4b02      	ldr	r3, [pc, #8]	; (5b1c <usbdc_get_state+0xc>)
    5b12:	7e98      	ldrb	r0, [r3, #26]
    5b14:	06c3      	lsls	r3, r0, #27
    5b16:	d500      	bpl.n	5b1a <usbdc_get_state+0xa>
		return USBD_S_SUSPEND;
    5b18:	2010      	movs	r0, #16
	}
	return usbdc.state;
}
    5b1a:	4770      	bx	lr
    5b1c:	200003d8 	.word	0x200003d8

00005b20 <usb_find_desc>:
#define _param_error_check(cond) ASSERT(cond)
#define _desc_len_check() ASSERT(usb_desc_len(desc) >= 2)
#endif

uint8_t *usb_find_desc(uint8_t *desc, uint8_t *eof, uint8_t type)
{
    5b20:	b510      	push	{r4, lr}
	_param_error_check(desc && eof && (desc < eof));

	while (desc < eof) {
    5b22:	4288      	cmp	r0, r1
    5b24:	d211      	bcs.n	5b4a <usb_find_desc+0x2a>
	return desc[0];
    5b26:	7803      	ldrb	r3, [r0, #0]
		_desc_len_check();
    5b28:	2b01      	cmp	r3, #1
    5b2a:	d910      	bls.n	5b4e <usb_find_desc+0x2e>
		if (type == usb_desc_type(desc)) {
    5b2c:	7844      	ldrb	r4, [r0, #1]
    5b2e:	4294      	cmp	r4, r2
    5b30:	d00a      	beq.n	5b48 <usb_find_desc+0x28>
	return (desc + usb_desc_len(desc));
    5b32:	18c0      	adds	r0, r0, r3
	while (desc < eof) {
    5b34:	4281      	cmp	r1, r0
    5b36:	d906      	bls.n	5b46 <usb_find_desc+0x26>
	return desc[0];
    5b38:	7803      	ldrb	r3, [r0, #0]
		_desc_len_check();
    5b3a:	2b01      	cmp	r3, #1
    5b3c:	d909      	bls.n	5b52 <usb_find_desc+0x32>
	return desc[1];
    5b3e:	7844      	ldrb	r4, [r0, #1]
		if (type == usb_desc_type(desc)) {
    5b40:	4294      	cmp	r4, r2
    5b42:	d1f6      	bne.n	5b32 <usb_find_desc+0x12>
    5b44:	e000      	b.n	5b48 <usb_find_desc+0x28>
			return desc;
		}
		desc = usb_desc_next(desc);
	}
	return NULL;
    5b46:	2000      	movs	r0, #0
}
    5b48:	bd10      	pop	{r4, pc}
	return NULL;
    5b4a:	2000      	movs	r0, #0
    5b4c:	e7fc      	b.n	5b48 <usb_find_desc+0x28>
		_desc_len_check();
    5b4e:	2000      	movs	r0, #0
    5b50:	e7fa      	b.n	5b48 <usb_find_desc+0x28>
    5b52:	2000      	movs	r0, #0
    5b54:	e7f8      	b.n	5b48 <usb_find_desc+0x28>

00005b56 <usb_find_ep_desc>:

uint8_t *usb_find_ep_desc(uint8_t *desc, uint8_t *eof)
{
	_param_error_check(desc && eof && (desc < eof));

	while (desc < eof) {
    5b56:	4288      	cmp	r0, r1
    5b58:	d215      	bcs.n	5b86 <usb_find_ep_desc+0x30>
	return desc[0];
    5b5a:	7803      	ldrb	r3, [r0, #0]
		_desc_len_check();
    5b5c:	2b01      	cmp	r3, #1
    5b5e:	d914      	bls.n	5b8a <usb_find_ep_desc+0x34>
	return desc[1];
    5b60:	7842      	ldrb	r2, [r0, #1]
		if (USB_DT_INTERFACE == usb_desc_type(desc)) {
    5b62:	2a04      	cmp	r2, #4
    5b64:	d013      	beq.n	5b8e <usb_find_ep_desc+0x38>
			break;
		}
		if (USB_DT_ENDPOINT == usb_desc_type(desc)) {
    5b66:	2a05      	cmp	r2, #5
    5b68:	d00c      	beq.n	5b84 <usb_find_ep_desc+0x2e>
	return (desc + usb_desc_len(desc));
    5b6a:	18c0      	adds	r0, r0, r3
	while (desc < eof) {
    5b6c:	4281      	cmp	r1, r0
    5b6e:	d908      	bls.n	5b82 <usb_find_ep_desc+0x2c>
	return desc[0];
    5b70:	7803      	ldrb	r3, [r0, #0]
		_desc_len_check();
    5b72:	2b01      	cmp	r3, #1
    5b74:	d90d      	bls.n	5b92 <usb_find_ep_desc+0x3c>
	return desc[1];
    5b76:	7842      	ldrb	r2, [r0, #1]
		if (USB_DT_INTERFACE == usb_desc_type(desc)) {
    5b78:	2a04      	cmp	r2, #4
    5b7a:	d00c      	beq.n	5b96 <usb_find_ep_desc+0x40>
		if (USB_DT_ENDPOINT == usb_desc_type(desc)) {
    5b7c:	2a05      	cmp	r2, #5
    5b7e:	d1f4      	bne.n	5b6a <usb_find_ep_desc+0x14>
    5b80:	e000      	b.n	5b84 <usb_find_ep_desc+0x2e>
			return desc;
		}
		desc = usb_desc_next(desc);
	}
	return NULL;
    5b82:	2000      	movs	r0, #0
}
    5b84:	4770      	bx	lr
	return NULL;
    5b86:	2000      	movs	r0, #0
    5b88:	e7fc      	b.n	5b84 <usb_find_ep_desc+0x2e>
		_desc_len_check();
    5b8a:	2000      	movs	r0, #0
    5b8c:	e7fa      	b.n	5b84 <usb_find_ep_desc+0x2e>
	return NULL;
    5b8e:	2000      	movs	r0, #0
    5b90:	e7f8      	b.n	5b84 <usb_find_ep_desc+0x2e>
		_desc_len_check();
    5b92:	2000      	movs	r0, #0
    5b94:	e7f6      	b.n	5b84 <usb_find_ep_desc+0x2e>
	return NULL;
    5b96:	2000      	movs	r0, #0
    5b98:	e7f4      	b.n	5b84 <usb_find_ep_desc+0x2e>
	...

00005b9c <usb_find_cfg_desc>:

uint8_t *usb_find_cfg_desc(uint8_t *desc, uint8_t *eof, uint8_t cfg_value)
{
    5b9c:	b570      	push	{r4, r5, r6, lr}
    5b9e:	000c      	movs	r4, r1
    5ba0:	0015      	movs	r5, r2
	_param_error_check(desc && eof && (desc < eof));

	desc = usb_find_desc(desc, eof, USB_DT_CONFIG);
    5ba2:	2202      	movs	r2, #2
    5ba4:	4b16      	ldr	r3, [pc, #88]	; (5c00 <usb_find_cfg_desc+0x64>)
    5ba6:	4798      	blx	r3
	if (!desc) {
    5ba8:	2800      	cmp	r0, #0
    5baa:	d01d      	beq.n	5be8 <usb_find_cfg_desc+0x4c>
		return NULL;
	}
	while (desc < eof) {
    5bac:	4284      	cmp	r4, r0
    5bae:	d91c      	bls.n	5bea <usb_find_cfg_desc+0x4e>
		_desc_len_check();
    5bb0:	7803      	ldrb	r3, [r0, #0]
    5bb2:	2b01      	cmp	r3, #1
    5bb4:	d91b      	bls.n	5bee <usb_find_cfg_desc+0x52>
		if (desc[1] != USB_DT_CONFIG) {
    5bb6:	7843      	ldrb	r3, [r0, #1]
    5bb8:	2b02      	cmp	r3, #2
    5bba:	d11a      	bne.n	5bf2 <usb_find_cfg_desc+0x56>
			break;
		}
		if (desc[5] == cfg_value) {
    5bbc:	7943      	ldrb	r3, [r0, #5]
    5bbe:	42ab      	cmp	r3, r5
    5bc0:	d012      	beq.n	5be8 <usb_find_cfg_desc+0x4c>
	return (ptr[0] + (ptr[1] << 8));
    5bc2:	78c2      	ldrb	r2, [r0, #3]
    5bc4:	0212      	lsls	r2, r2, #8
    5bc6:	7883      	ldrb	r3, [r0, #2]
    5bc8:	189b      	adds	r3, r3, r2
 *  \param[in] cfg_desc Byte pointer to the descriptor start address
 *  \return Byte pointer to descriptor after configuration end
 */
static inline uint8_t *usb_cfg_desc_next(uint8_t *cfg_desc)
{
	return (cfg_desc + usb_cfg_desc_total_len(cfg_desc));
    5bca:	b29b      	uxth	r3, r3
    5bcc:	18c0      	adds	r0, r0, r3
	while (desc < eof) {
    5bce:	4284      	cmp	r4, r0
    5bd0:	d909      	bls.n	5be6 <usb_find_cfg_desc+0x4a>
		_desc_len_check();
    5bd2:	7803      	ldrb	r3, [r0, #0]
    5bd4:	2b01      	cmp	r3, #1
    5bd6:	d90e      	bls.n	5bf6 <usb_find_cfg_desc+0x5a>
		if (desc[1] != USB_DT_CONFIG) {
    5bd8:	7843      	ldrb	r3, [r0, #1]
    5bda:	2b02      	cmp	r3, #2
    5bdc:	d10d      	bne.n	5bfa <usb_find_cfg_desc+0x5e>
		if (desc[5] == cfg_value) {
    5bde:	7943      	ldrb	r3, [r0, #5]
    5be0:	42ab      	cmp	r3, r5
    5be2:	d1ee      	bne.n	5bc2 <usb_find_cfg_desc+0x26>
    5be4:	e000      	b.n	5be8 <usb_find_cfg_desc+0x4c>
			return desc;
		}
		desc = usb_cfg_desc_next(desc);
	}
	return NULL;
    5be6:	2000      	movs	r0, #0
}
    5be8:	bd70      	pop	{r4, r5, r6, pc}
	return NULL;
    5bea:	2000      	movs	r0, #0
    5bec:	e7fc      	b.n	5be8 <usb_find_cfg_desc+0x4c>
		_desc_len_check();
    5bee:	2000      	movs	r0, #0
    5bf0:	e7fa      	b.n	5be8 <usb_find_cfg_desc+0x4c>
	return NULL;
    5bf2:	2000      	movs	r0, #0
    5bf4:	e7f8      	b.n	5be8 <usb_find_cfg_desc+0x4c>
		_desc_len_check();
    5bf6:	2000      	movs	r0, #0
    5bf8:	e7f6      	b.n	5be8 <usb_find_cfg_desc+0x4c>
	return NULL;
    5bfa:	2000      	movs	r0, #0
    5bfc:	e7f4      	b.n	5be8 <usb_find_cfg_desc+0x4c>
    5bfe:	46c0      	nop			; (mov r8, r8)
    5c00:	00005b21 	.word	0x00005b21

00005c04 <usb_find_str_desc>:
	}
	return NULL;
}

uint8_t *usb_find_str_desc(uint8_t *desc, uint8_t *eof, uint8_t str_index)
{
    5c04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5c06:	000d      	movs	r5, r1
    5c08:	0017      	movs	r7, r2
	uint8_t i;

	_param_error_check(desc && eof && (desc < eof));

	for (i = 0; desc < eof;) {
    5c0a:	4288      	cmp	r0, r1
    5c0c:	d212      	bcs.n	5c34 <usb_find_str_desc+0x30>
    5c0e:	2400      	movs	r4, #0
		desc = usb_find_desc(desc, eof, USB_DT_STRING);
    5c10:	4e0a      	ldr	r6, [pc, #40]	; (5c3c <usb_find_str_desc+0x38>)
    5c12:	2203      	movs	r2, #3
    5c14:	0029      	movs	r1, r5
    5c16:	47b0      	blx	r6
		if (desc) {
    5c18:	2800      	cmp	r0, #0
    5c1a:	d00e      	beq.n	5c3a <usb_find_str_desc+0x36>
	return desc[0];
    5c1c:	7803      	ldrb	r3, [r0, #0]
			_desc_len_check();
    5c1e:	2b01      	cmp	r3, #1
    5c20:	d90a      	bls.n	5c38 <usb_find_str_desc+0x34>
			if (i == str_index) {
    5c22:	42a7      	cmp	r7, r4
    5c24:	d009      	beq.n	5c3a <usb_find_str_desc+0x36>
				return desc;
			}
			i++;
    5c26:	3401      	adds	r4, #1
    5c28:	b2e4      	uxtb	r4, r4
	return (desc + usb_desc_len(desc));
    5c2a:	18c0      	adds	r0, r0, r3
	for (i = 0; desc < eof;) {
    5c2c:	4285      	cmp	r5, r0
    5c2e:	d8f0      	bhi.n	5c12 <usb_find_str_desc+0xe>
			desc = usb_desc_next(desc);
		} else {
			return NULL;
		}
	}
	return NULL;
    5c30:	2000      	movs	r0, #0
    5c32:	e002      	b.n	5c3a <usb_find_str_desc+0x36>
    5c34:	2000      	movs	r0, #0
    5c36:	e000      	b.n	5c3a <usb_find_str_desc+0x36>
			_desc_len_check();
    5c38:	2000      	movs	r0, #0
}
    5c3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    5c3c:	00005b21 	.word	0x00005b21

00005c40 <usb_out_complete>:
//		
//		return false;
//	}
//	return true;
	
	outComplete = 1;
    5c40:	2201      	movs	r2, #1
    5c42:	4b02      	ldr	r3, [pc, #8]	; (5c4c <usb_out_complete+0xc>)
    5c44:	701a      	strb	r2, [r3, #0]
	/* No error returns false ... probably because false is 0? */
	return false;	
}
    5c46:	2000      	movs	r0, #0
    5c48:	4770      	bx	lr
    5c4a:	46c0      	nop			; (mov r8, r8)
    5c4c:	200003f8 	.word	0x200003f8

00005c50 <usb_in_complete>:
/**
 * \brief Callback for USB to simply set a flag that data has been sent successfully.
 */
static bool usb_in_complete(const uint8_t ep, const enum usb_xfer_code rc, const uint32_t count)
{
	inComplete = 1;
    5c50:	2201      	movs	r2, #1
    5c52:	4b02      	ldr	r3, [pc, #8]	; (5c5c <usb_in_complete+0xc>)
    5c54:	705a      	strb	r2, [r3, #1]
	/* No error returns false ... probably because false is 0? */
	return false;
}
    5c56:	2000      	movs	r0, #0
    5c58:	4770      	bx	lr
    5c5a:	46c0      	nop			; (mov r8, r8)
    5c5c:	200003f8 	.word	0x200003f8

00005c60 <usb_line_state_changed>:
 * this function is called when there is a change to the RTS and DTS control
 * lines on the serial connection. 
 *
 */
static bool usb_line_state_changed(usb_cdc_control_signal_t newState)
{
    5c60:	b510      	push	{r4, lr}
    5c62:	b082      	sub	sp, #8
    5c64:	aa01      	add	r2, sp, #4
    5c66:	8010      	strh	r0, [r2, #0]
	static bool callbacks_registered = false;
	
	dtr_flag = newState.rs232.DTR;
    5c68:	b2c0      	uxtb	r0, r0
    5c6a:	07c3      	lsls	r3, r0, #31
    5c6c:	0fdb      	lsrs	r3, r3, #31
    5c6e:	4a0d      	ldr	r2, [pc, #52]	; (5ca4 <usb_line_state_changed+0x44>)
    5c70:	7093      	strb	r3, [r2, #2]
	rts_flag = newState.rs232.RTS;
    5c72:	0780      	lsls	r0, r0, #30
    5c74:	0fc0      	lsrs	r0, r0, #31
    5c76:	70d0      	strb	r0, [r2, #3]
			
	if (cdcdf_acm_is_enabled() && !callbacks_registered) {
    5c78:	4b0b      	ldr	r3, [pc, #44]	; (5ca8 <usb_line_state_changed+0x48>)
    5c7a:	4798      	blx	r3
    5c7c:	2800      	cmp	r0, #0
    5c7e:	d003      	beq.n	5c88 <usb_line_state_changed+0x28>
    5c80:	4b08      	ldr	r3, [pc, #32]	; (5ca4 <usb_line_state_changed+0x44>)
    5c82:	791b      	ldrb	r3, [r3, #4]
    5c84:	2b00      	cmp	r3, #0
    5c86:	d002      	beq.n	5c8e <usb_line_state_changed+0x2e>
		cdcdf_acm_register_callback(CDCDF_ACM_CB_WRITE, (FUNC_PTR)usb_in_complete);
	}

	/* No error. */
	return false;
}
    5c88:	2000      	movs	r0, #0
    5c8a:	b002      	add	sp, #8
    5c8c:	bd10      	pop	{r4, pc}
		callbacks_registered = true;
    5c8e:	2201      	movs	r2, #1
    5c90:	4b04      	ldr	r3, [pc, #16]	; (5ca4 <usb_line_state_changed+0x44>)
    5c92:	711a      	strb	r2, [r3, #4]
		cdcdf_acm_register_callback(CDCDF_ACM_CB_READ, (FUNC_PTR)usb_out_complete);
    5c94:	4905      	ldr	r1, [pc, #20]	; (5cac <usb_line_state_changed+0x4c>)
    5c96:	2000      	movs	r0, #0
    5c98:	4c05      	ldr	r4, [pc, #20]	; (5cb0 <usb_line_state_changed+0x50>)
    5c9a:	47a0      	blx	r4
		cdcdf_acm_register_callback(CDCDF_ACM_CB_WRITE, (FUNC_PTR)usb_in_complete);
    5c9c:	4905      	ldr	r1, [pc, #20]	; (5cb4 <usb_line_state_changed+0x54>)
    5c9e:	2001      	movs	r0, #1
    5ca0:	47a0      	blx	r4
    5ca2:	e7f1      	b.n	5c88 <usb_line_state_changed+0x28>
    5ca4:	200003f8 	.word	0x200003f8
    5ca8:	00005405 	.word	0x00005405
    5cac:	00005c41 	.word	0x00005c41
    5cb0:	000053b5 	.word	0x000053b5
    5cb4:	00005c51 	.word	0x00005c51

00005cb8 <usb_init>:
	usbdc_start(single_desc);
	usbdc_attach();
}

void usb_init(void)
{
    5cb8:	b510      	push	{r4, lr}
	usbdc_init(ctrl_buffer);
    5cba:	4c0a      	ldr	r4, [pc, #40]	; (5ce4 <usb_init+0x2c>)
    5cbc:	0020      	movs	r0, r4
    5cbe:	3008      	adds	r0, #8
    5cc0:	4b09      	ldr	r3, [pc, #36]	; (5ce8 <usb_init+0x30>)
    5cc2:	4798      	blx	r3
	cdcdf_acm_init();
    5cc4:	4b09      	ldr	r3, [pc, #36]	; (5cec <usb_init+0x34>)
    5cc6:	4798      	blx	r3
	usbdc_start(single_desc);
    5cc8:	4809      	ldr	r0, [pc, #36]	; (5cf0 <usb_init+0x38>)
    5cca:	4b0a      	ldr	r3, [pc, #40]	; (5cf4 <usb_init+0x3c>)
    5ccc:	4798      	blx	r3
	usbdc_attach();
    5cce:	4b0a      	ldr	r3, [pc, #40]	; (5cf8 <usb_init+0x40>)
    5cd0:	4798      	blx	r3
	cdc_device_acm_init();
	ring_buffer_init(&rx_buff);
    5cd2:	0020      	movs	r0, r4
    5cd4:	3048      	adds	r0, #72	; 0x48
    5cd6:	4b09      	ldr	r3, [pc, #36]	; (5cfc <usb_init+0x44>)
    5cd8:	4798      	blx	r3
	cdcdf_acm_register_callback(CDCDF_ACM_CB_STATE_C, (FUNC_PTR)usb_line_state_changed);
    5cda:	4909      	ldr	r1, [pc, #36]	; (5d00 <usb_init+0x48>)
    5cdc:	2003      	movs	r0, #3
    5cde:	4b09      	ldr	r3, [pc, #36]	; (5d04 <usb_init+0x4c>)
    5ce0:	4798      	blx	r3
}
    5ce2:	bd10      	pop	{r4, pc}
    5ce4:	200003f8 	.word	0x200003f8
    5ce8:	00005a49 	.word	0x00005a49
    5cec:	00005345 	.word	0x00005345
    5cf0:	20000008 	.word	0x20000008
    5cf4:	00005ac1 	.word	0x00005ac1
    5cf8:	00005af9 	.word	0x00005af9
    5cfc:	000050a1 	.word	0x000050a1
    5d00:	00005c61 	.word	0x00005c61
    5d04:	000053b5 	.word	0x000053b5

00005d08 <usb_flush>:

// TODO - make this non-blocking
void usb_flush(void)
{
    5d08:	b510      	push	{r4, lr}
	if(tx_idx > 0)
    5d0a:	234a      	movs	r3, #74	; 0x4a
    5d0c:	4a0b      	ldr	r2, [pc, #44]	; (5d3c <usb_flush+0x34>)
    5d0e:	5cd3      	ldrb	r3, [r2, r3]
    5d10:	2b00      	cmp	r3, #0
    5d12:	d100      	bne.n	5d16 <usb_flush+0xe>
		
		/* Block until data is sent and then reset index */
		while(inComplete == 0);
		tx_idx = 0;
	}
}
    5d14:	bd10      	pop	{r4, pc}
		inComplete = 0;
    5d16:	2200      	movs	r2, #0
    5d18:	4b09      	ldr	r3, [pc, #36]	; (5d40 <usb_flush+0x38>)
    5d1a:	705a      	strb	r2, [r3, #1]
		cdcdf_acm_write(tx_buff, tx_idx);
    5d1c:	4807      	ldr	r0, [pc, #28]	; (5d3c <usb_flush+0x34>)
    5d1e:	234a      	movs	r3, #74	; 0x4a
    5d20:	5cc1      	ldrb	r1, [r0, r3]
    5d22:	b2c9      	uxtb	r1, r1
    5d24:	304c      	adds	r0, #76	; 0x4c
    5d26:	4b07      	ldr	r3, [pc, #28]	; (5d44 <usb_flush+0x3c>)
    5d28:	4798      	blx	r3
		while(inComplete == 0);
    5d2a:	4a05      	ldr	r2, [pc, #20]	; (5d40 <usb_flush+0x38>)
    5d2c:	7853      	ldrb	r3, [r2, #1]
    5d2e:	2b00      	cmp	r3, #0
    5d30:	d0fc      	beq.n	5d2c <usb_flush+0x24>
		tx_idx = 0;
    5d32:	2100      	movs	r1, #0
    5d34:	234a      	movs	r3, #74	; 0x4a
    5d36:	4a01      	ldr	r2, [pc, #4]	; (5d3c <usb_flush+0x34>)
    5d38:	54d1      	strb	r1, [r2, r3]
}
    5d3a:	e7eb      	b.n	5d14 <usb_flush+0xc>
    5d3c:	20000478 	.word	0x20000478
    5d40:	200003f8 	.word	0x200003f8
    5d44:	00005389 	.word	0x00005389

00005d48 <usb_put>:

void usb_put(uint8_t outChar)
{
    5d48:	b510      	push	{r4, lr}
	tx_buff[tx_idx++] = outChar;
    5d4a:	4a08      	ldr	r2, [pc, #32]	; (5d6c <usb_put+0x24>)
    5d4c:	214a      	movs	r1, #74	; 0x4a
    5d4e:	5c53      	ldrb	r3, [r2, r1]
    5d50:	b2db      	uxtb	r3, r3
    5d52:	1c5c      	adds	r4, r3, #1
    5d54:	b2e4      	uxtb	r4, r4
    5d56:	5454      	strb	r4, [r2, r1]
    5d58:	18d3      	adds	r3, r2, r3
    5d5a:	244c      	movs	r4, #76	; 0x4c
    5d5c:	5518      	strb	r0, [r3, r4]
	
	/* If the buffer is full, flush it */
	if(tx_idx == USB_BUFFER_SIZE) {
    5d5e:	5c53      	ldrb	r3, [r2, r1]
    5d60:	2b40      	cmp	r3, #64	; 0x40
    5d62:	d000      	beq.n	5d66 <usb_put+0x1e>
		usb_flush();
	}
}
    5d64:	bd10      	pop	{r4, pc}
		usb_flush();
    5d66:	4b02      	ldr	r3, [pc, #8]	; (5d70 <usb_put+0x28>)
    5d68:	4798      	blx	r3
}
    5d6a:	e7fb      	b.n	5d64 <usb_put+0x1c>
    5d6c:	20000478 	.word	0x20000478
    5d70:	00005d09 	.word	0x00005d09

00005d74 <usb_dtr>:
bool usb_configured(void) {
	return usbdc_get_state() == USBD_S_CONFIG;
}

bool usb_dtr(void) {
	return dtr_flag;
    5d74:	4b01      	ldr	r3, [pc, #4]	; (5d7c <usb_dtr+0x8>)
    5d76:	7898      	ldrb	r0, [r3, #2]
    5d78:	b2c0      	uxtb	r0, r0
}
    5d7a:	4770      	bx	lr
    5d7c:	200003f8 	.word	0x200003f8

00005d80 <pow>:
    5d80:	b5f0      	push	{r4, r5, r6, r7, lr}
    5d82:	4657      	mov	r7, sl
    5d84:	464e      	mov	r6, r9
    5d86:	46de      	mov	lr, fp
    5d88:	4645      	mov	r5, r8
    5d8a:	b5e0      	push	{r5, r6, r7, lr}
    5d8c:	b08f      	sub	sp, #60	; 0x3c
    5d8e:	001d      	movs	r5, r3
    5d90:	0006      	movs	r6, r0
    5d92:	000f      	movs	r7, r1
    5d94:	0014      	movs	r4, r2
    5d96:	f000 f99f 	bl	60d8 <__ieee754_pow>
    5d9a:	4bc7      	ldr	r3, [pc, #796]	; (60b8 <pow+0x338>)
    5d9c:	9000      	str	r0, [sp, #0]
    5d9e:	9101      	str	r1, [sp, #4]
    5da0:	469a      	mov	sl, r3
    5da2:	781b      	ldrb	r3, [r3, #0]
    5da4:	b25b      	sxtb	r3, r3
    5da6:	4699      	mov	r9, r3
    5da8:	3301      	adds	r3, #1
    5daa:	d03e      	beq.n	5e2a <pow+0xaa>
    5dac:	0022      	movs	r2, r4
    5dae:	002b      	movs	r3, r5
    5db0:	0020      	movs	r0, r4
    5db2:	0029      	movs	r1, r5
    5db4:	f003 f846 	bl	8e44 <__aeabi_dcmpun>
    5db8:	4683      	mov	fp, r0
    5dba:	2800      	cmp	r0, #0
    5dbc:	d135      	bne.n	5e2a <pow+0xaa>
    5dbe:	0032      	movs	r2, r6
    5dc0:	003b      	movs	r3, r7
    5dc2:	0030      	movs	r0, r6
    5dc4:	0039      	movs	r1, r7
    5dc6:	f003 f83d 	bl	8e44 <__aeabi_dcmpun>
    5dca:	2200      	movs	r2, #0
    5dcc:	9003      	str	r0, [sp, #12]
    5dce:	2800      	cmp	r0, #0
    5dd0:	d000      	beq.n	5dd4 <pow+0x54>
    5dd2:	e0b6      	b.n	5f42 <pow+0x1c2>
    5dd4:	2300      	movs	r3, #0
    5dd6:	0030      	movs	r0, r6
    5dd8:	0039      	movs	r1, r7
    5dda:	f001 f957 	bl	708c <__aeabi_dcmpeq>
    5dde:	2800      	cmp	r0, #0
    5de0:	d02c      	beq.n	5e3c <pow+0xbc>
    5de2:	2200      	movs	r2, #0
    5de4:	2300      	movs	r3, #0
    5de6:	0020      	movs	r0, r4
    5de8:	0029      	movs	r1, r5
    5dea:	f001 f94f 	bl	708c <__aeabi_dcmpeq>
    5dee:	4683      	mov	fp, r0
    5df0:	2800      	cmp	r0, #0
    5df2:	d100      	bne.n	5df6 <pow+0x76>
    5df4:	e077      	b.n	5ee6 <pow+0x166>
    5df6:	ab04      	add	r3, sp, #16
    5df8:	4698      	mov	r8, r3
    5dfa:	2301      	movs	r3, #1
    5dfc:	4642      	mov	r2, r8
    5dfe:	9304      	str	r3, [sp, #16]
    5e00:	4bae      	ldr	r3, [pc, #696]	; (60bc <pow+0x33c>)
    5e02:	6053      	str	r3, [r2, #4]
    5e04:	4643      	mov	r3, r8
    5e06:	9a03      	ldr	r2, [sp, #12]
    5e08:	611c      	str	r4, [r3, #16]
    5e0a:	615d      	str	r5, [r3, #20]
    5e0c:	621a      	str	r2, [r3, #32]
    5e0e:	609e      	str	r6, [r3, #8]
    5e10:	60df      	str	r7, [r3, #12]
    5e12:	4642      	mov	r2, r8
    5e14:	2300      	movs	r3, #0
    5e16:	2400      	movs	r4, #0
    5e18:	6193      	str	r3, [r2, #24]
    5e1a:	61d4      	str	r4, [r2, #28]
    5e1c:	464b      	mov	r3, r9
    5e1e:	2b00      	cmp	r3, #0
    5e20:	d04d      	beq.n	5ebe <pow+0x13e>
    5e22:	2300      	movs	r3, #0
    5e24:	4ca6      	ldr	r4, [pc, #664]	; (60c0 <pow+0x340>)
    5e26:	9300      	str	r3, [sp, #0]
    5e28:	9401      	str	r4, [sp, #4]
    5e2a:	9800      	ldr	r0, [sp, #0]
    5e2c:	9901      	ldr	r1, [sp, #4]
    5e2e:	b00f      	add	sp, #60	; 0x3c
    5e30:	bc3c      	pop	{r2, r3, r4, r5}
    5e32:	4690      	mov	r8, r2
    5e34:	4699      	mov	r9, r3
    5e36:	46a2      	mov	sl, r4
    5e38:	46ab      	mov	fp, r5
    5e3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5e3c:	9800      	ldr	r0, [sp, #0]
    5e3e:	9901      	ldr	r1, [sp, #4]
    5e40:	f000 ff64 	bl	6d0c <finite>
    5e44:	4681      	mov	r9, r0
    5e46:	2800      	cmp	r0, #0
    5e48:	d100      	bne.n	5e4c <pow+0xcc>
    5e4a:	e09b      	b.n	5f84 <pow+0x204>
    5e4c:	9800      	ldr	r0, [sp, #0]
    5e4e:	9901      	ldr	r1, [sp, #4]
    5e50:	2200      	movs	r2, #0
    5e52:	2300      	movs	r3, #0
    5e54:	f001 f91a 	bl	708c <__aeabi_dcmpeq>
    5e58:	2800      	cmp	r0, #0
    5e5a:	d0e6      	beq.n	5e2a <pow+0xaa>
    5e5c:	0030      	movs	r0, r6
    5e5e:	0039      	movs	r1, r7
    5e60:	f000 ff54 	bl	6d0c <finite>
    5e64:	2800      	cmp	r0, #0
    5e66:	d0e0      	beq.n	5e2a <pow+0xaa>
    5e68:	0020      	movs	r0, r4
    5e6a:	0029      	movs	r1, r5
    5e6c:	f000 ff4e 	bl	6d0c <finite>
    5e70:	2800      	cmp	r0, #0
    5e72:	d0da      	beq.n	5e2a <pow+0xaa>
    5e74:	ab04      	add	r3, sp, #16
    5e76:	4698      	mov	r8, r3
    5e78:	2304      	movs	r3, #4
    5e7a:	4642      	mov	r2, r8
    5e7c:	9304      	str	r3, [sp, #16]
    5e7e:	4b8f      	ldr	r3, [pc, #572]	; (60bc <pow+0x33c>)
    5e80:	6114      	str	r4, [r2, #16]
    5e82:	6155      	str	r5, [r2, #20]
    5e84:	6053      	str	r3, [r2, #4]
    5e86:	2300      	movs	r3, #0
    5e88:	2400      	movs	r4, #0
    5e8a:	6213      	str	r3, [r2, #32]
    5e8c:	2300      	movs	r3, #0
    5e8e:	6193      	str	r3, [r2, #24]
    5e90:	61d4      	str	r4, [r2, #28]
    5e92:	4653      	mov	r3, sl
    5e94:	781b      	ldrb	r3, [r3, #0]
    5e96:	6096      	str	r6, [r2, #8]
    5e98:	60d7      	str	r7, [r2, #12]
    5e9a:	b25b      	sxtb	r3, r3
    5e9c:	2b02      	cmp	r3, #2
    5e9e:	d004      	beq.n	5eaa <pow+0x12a>
    5ea0:	4640      	mov	r0, r8
    5ea2:	f000 ff3d 	bl	6d20 <matherr>
    5ea6:	2800      	cmp	r0, #0
    5ea8:	d10e      	bne.n	5ec8 <pow+0x148>
    5eaa:	f003 f9ef 	bl	928c <__errno>
    5eae:	2322      	movs	r3, #34	; 0x22
    5eb0:	6003      	str	r3, [r0, #0]
    5eb2:	e009      	b.n	5ec8 <pow+0x148>
    5eb4:	4642      	mov	r2, r8
    5eb6:	2300      	movs	r3, #0
    5eb8:	2400      	movs	r4, #0
    5eba:	6193      	str	r3, [r2, #24]
    5ebc:	61d4      	str	r4, [r2, #28]
    5ebe:	4640      	mov	r0, r8
    5ec0:	f000 ff2e 	bl	6d20 <matherr>
    5ec4:	2800      	cmp	r0, #0
    5ec6:	d037      	beq.n	5f38 <pow+0x1b8>
    5ec8:	4643      	mov	r3, r8
    5eca:	6a1b      	ldr	r3, [r3, #32]
    5ecc:	2b00      	cmp	r3, #0
    5ece:	d004      	beq.n	5eda <pow+0x15a>
    5ed0:	f003 f9dc 	bl	928c <__errno>
    5ed4:	4643      	mov	r3, r8
    5ed6:	6a1b      	ldr	r3, [r3, #32]
    5ed8:	6003      	str	r3, [r0, #0]
    5eda:	4643      	mov	r3, r8
    5edc:	69dc      	ldr	r4, [r3, #28]
    5ede:	699b      	ldr	r3, [r3, #24]
    5ee0:	9300      	str	r3, [sp, #0]
    5ee2:	9401      	str	r4, [sp, #4]
    5ee4:	e7a1      	b.n	5e2a <pow+0xaa>
    5ee6:	0020      	movs	r0, r4
    5ee8:	0029      	movs	r1, r5
    5eea:	f000 ff0f 	bl	6d0c <finite>
    5eee:	2800      	cmp	r0, #0
    5ef0:	d09b      	beq.n	5e2a <pow+0xaa>
    5ef2:	2200      	movs	r2, #0
    5ef4:	2300      	movs	r3, #0
    5ef6:	0020      	movs	r0, r4
    5ef8:	0029      	movs	r1, r5
    5efa:	f001 f8cd 	bl	7098 <__aeabi_dcmplt>
    5efe:	2800      	cmp	r0, #0
    5f00:	d100      	bne.n	5f04 <pow+0x184>
    5f02:	e792      	b.n	5e2a <pow+0xaa>
    5f04:	ab04      	add	r3, sp, #16
    5f06:	4698      	mov	r8, r3
    5f08:	2301      	movs	r3, #1
    5f0a:	4642      	mov	r2, r8
    5f0c:	9304      	str	r3, [sp, #16]
    5f0e:	4b6b      	ldr	r3, [pc, #428]	; (60bc <pow+0x33c>)
    5f10:	6053      	str	r3, [r2, #4]
    5f12:	4643      	mov	r3, r8
    5f14:	465a      	mov	r2, fp
    5f16:	609e      	str	r6, [r3, #8]
    5f18:	60df      	str	r7, [r3, #12]
    5f1a:	621a      	str	r2, [r3, #32]
    5f1c:	611c      	str	r4, [r3, #16]
    5f1e:	615d      	str	r5, [r3, #20]
    5f20:	4653      	mov	r3, sl
    5f22:	781b      	ldrb	r3, [r3, #0]
    5f24:	b25b      	sxtb	r3, r3
    5f26:	2b00      	cmp	r3, #0
    5f28:	d0c4      	beq.n	5eb4 <pow+0x134>
    5f2a:	2000      	movs	r0, #0
    5f2c:	4642      	mov	r2, r8
    5f2e:	4965      	ldr	r1, [pc, #404]	; (60c4 <pow+0x344>)
    5f30:	6190      	str	r0, [r2, #24]
    5f32:	61d1      	str	r1, [r2, #28]
    5f34:	2b02      	cmp	r3, #2
    5f36:	d1c2      	bne.n	5ebe <pow+0x13e>
    5f38:	f003 f9a8 	bl	928c <__errno>
    5f3c:	2321      	movs	r3, #33	; 0x21
    5f3e:	6003      	str	r3, [r0, #0]
    5f40:	e7c2      	b.n	5ec8 <pow+0x148>
    5f42:	2300      	movs	r3, #0
    5f44:	0020      	movs	r0, r4
    5f46:	0029      	movs	r1, r5
    5f48:	f001 f8a0 	bl	708c <__aeabi_dcmpeq>
    5f4c:	2800      	cmp	r0, #0
    5f4e:	d100      	bne.n	5f52 <pow+0x1d2>
    5f50:	e76b      	b.n	5e2a <pow+0xaa>
    5f52:	ab04      	add	r3, sp, #16
    5f54:	4698      	mov	r8, r3
    5f56:	2301      	movs	r3, #1
    5f58:	4642      	mov	r2, r8
    5f5a:	9304      	str	r3, [sp, #16]
    5f5c:	4b57      	ldr	r3, [pc, #348]	; (60bc <pow+0x33c>)
    5f5e:	4641      	mov	r1, r8
    5f60:	6053      	str	r3, [r2, #4]
    5f62:	4643      	mov	r3, r8
    5f64:	465a      	mov	r2, fp
    5f66:	621a      	str	r2, [r3, #32]
    5f68:	2200      	movs	r2, #0
    5f6a:	609e      	str	r6, [r3, #8]
    5f6c:	60df      	str	r7, [r3, #12]
    5f6e:	611c      	str	r4, [r3, #16]
    5f70:	615d      	str	r5, [r3, #20]
    5f72:	4b53      	ldr	r3, [pc, #332]	; (60c0 <pow+0x340>)
    5f74:	618a      	str	r2, [r1, #24]
    5f76:	61cb      	str	r3, [r1, #28]
    5f78:	9200      	str	r2, [sp, #0]
    5f7a:	9301      	str	r3, [sp, #4]
    5f7c:	464b      	mov	r3, r9
    5f7e:	2b02      	cmp	r3, #2
    5f80:	d19d      	bne.n	5ebe <pow+0x13e>
    5f82:	e752      	b.n	5e2a <pow+0xaa>
    5f84:	0030      	movs	r0, r6
    5f86:	0039      	movs	r1, r7
    5f88:	f000 fec0 	bl	6d0c <finite>
    5f8c:	2800      	cmp	r0, #0
    5f8e:	d100      	bne.n	5f92 <pow+0x212>
    5f90:	e75c      	b.n	5e4c <pow+0xcc>
    5f92:	0020      	movs	r0, r4
    5f94:	0029      	movs	r1, r5
    5f96:	f000 feb9 	bl	6d0c <finite>
    5f9a:	2800      	cmp	r0, #0
    5f9c:	d100      	bne.n	5fa0 <pow+0x220>
    5f9e:	e755      	b.n	5e4c <pow+0xcc>
    5fa0:	9800      	ldr	r0, [sp, #0]
    5fa2:	9901      	ldr	r1, [sp, #4]
    5fa4:	000b      	movs	r3, r1
    5fa6:	0002      	movs	r2, r0
    5fa8:	f002 ff4c 	bl	8e44 <__aeabi_dcmpun>
    5fac:	ab04      	add	r3, sp, #16
    5fae:	4698      	mov	r8, r3
    5fb0:	2800      	cmp	r0, #0
    5fb2:	d161      	bne.n	6078 <pow+0x2f8>
    5fb4:	2303      	movs	r3, #3
    5fb6:	4642      	mov	r2, r8
    5fb8:	9304      	str	r3, [sp, #16]
    5fba:	4b40      	ldr	r3, [pc, #256]	; (60bc <pow+0x33c>)
    5fbc:	6210      	str	r0, [r2, #32]
    5fbe:	6053      	str	r3, [r2, #4]
    5fc0:	4653      	mov	r3, sl
    5fc2:	781b      	ldrb	r3, [r3, #0]
    5fc4:	6096      	str	r6, [r2, #8]
    5fc6:	60d7      	str	r7, [r2, #12]
    5fc8:	b25b      	sxtb	r3, r3
    5fca:	6114      	str	r4, [r2, #16]
    5fcc:	6155      	str	r5, [r2, #20]
    5fce:	4699      	mov	r9, r3
    5fd0:	2b00      	cmp	r3, #0
    5fd2:	d12f      	bne.n	6034 <pow+0x2b4>
    5fd4:	22e0      	movs	r2, #224	; 0xe0
    5fd6:	4641      	mov	r1, r8
    5fd8:	4b3b      	ldr	r3, [pc, #236]	; (60c8 <pow+0x348>)
    5fda:	0612      	lsls	r2, r2, #24
    5fdc:	618a      	str	r2, [r1, #24]
    5fde:	61cb      	str	r3, [r1, #28]
    5fe0:	0030      	movs	r0, r6
    5fe2:	2200      	movs	r2, #0
    5fe4:	2300      	movs	r3, #0
    5fe6:	0039      	movs	r1, r7
    5fe8:	f001 f856 	bl	7098 <__aeabi_dcmplt>
    5fec:	2800      	cmp	r0, #0
    5fee:	d100      	bne.n	5ff2 <pow+0x272>
    5ff0:	e756      	b.n	5ea0 <pow+0x120>
    5ff2:	2200      	movs	r2, #0
    5ff4:	4b35      	ldr	r3, [pc, #212]	; (60cc <pow+0x34c>)
    5ff6:	0020      	movs	r0, r4
    5ff8:	0029      	movs	r1, r5
    5ffa:	f002 f98d 	bl	8318 <__aeabi_dmul>
    5ffe:	0004      	movs	r4, r0
    6000:	000d      	movs	r5, r1
    6002:	f000 fe95 	bl	6d30 <rint>
    6006:	0002      	movs	r2, r0
    6008:	000b      	movs	r3, r1
    600a:	0020      	movs	r0, r4
    600c:	0029      	movs	r1, r5
    600e:	f001 f83d 	bl	708c <__aeabi_dcmpeq>
    6012:	2800      	cmp	r0, #0
    6014:	d105      	bne.n	6022 <pow+0x2a2>
    6016:	22e0      	movs	r2, #224	; 0xe0
    6018:	4b2d      	ldr	r3, [pc, #180]	; (60d0 <pow+0x350>)
    601a:	0612      	lsls	r2, r2, #24
    601c:	4641      	mov	r1, r8
    601e:	618a      	str	r2, [r1, #24]
    6020:	61cb      	str	r3, [r1, #28]
    6022:	4653      	mov	r3, sl
    6024:	781b      	ldrb	r3, [r3, #0]
    6026:	b25b      	sxtb	r3, r3
    6028:	4699      	mov	r9, r3
    602a:	464b      	mov	r3, r9
    602c:	2b02      	cmp	r3, #2
    602e:	d000      	beq.n	6032 <pow+0x2b2>
    6030:	e736      	b.n	5ea0 <pow+0x120>
    6032:	e73a      	b.n	5eaa <pow+0x12a>
    6034:	2200      	movs	r2, #0
    6036:	4641      	mov	r1, r8
    6038:	4b26      	ldr	r3, [pc, #152]	; (60d4 <pow+0x354>)
    603a:	0030      	movs	r0, r6
    603c:	618a      	str	r2, [r1, #24]
    603e:	61cb      	str	r3, [r1, #28]
    6040:	2200      	movs	r2, #0
    6042:	2300      	movs	r3, #0
    6044:	0039      	movs	r1, r7
    6046:	f001 f827 	bl	7098 <__aeabi_dcmplt>
    604a:	2800      	cmp	r0, #0
    604c:	d0ed      	beq.n	602a <pow+0x2aa>
    604e:	2200      	movs	r2, #0
    6050:	4b1e      	ldr	r3, [pc, #120]	; (60cc <pow+0x34c>)
    6052:	0020      	movs	r0, r4
    6054:	0029      	movs	r1, r5
    6056:	f002 f95f 	bl	8318 <__aeabi_dmul>
    605a:	0004      	movs	r4, r0
    605c:	000d      	movs	r5, r1
    605e:	f000 fe67 	bl	6d30 <rint>
    6062:	0002      	movs	r2, r0
    6064:	000b      	movs	r3, r1
    6066:	0020      	movs	r0, r4
    6068:	0029      	movs	r1, r5
    606a:	f001 f80f 	bl	708c <__aeabi_dcmpeq>
    606e:	2800      	cmp	r0, #0
    6070:	d1d7      	bne.n	6022 <pow+0x2a2>
    6072:	2200      	movs	r2, #0
    6074:	4b13      	ldr	r3, [pc, #76]	; (60c4 <pow+0x344>)
    6076:	e7d1      	b.n	601c <pow+0x29c>
    6078:	2301      	movs	r3, #1
    607a:	4642      	mov	r2, r8
    607c:	9304      	str	r3, [sp, #16]
    607e:	4b0f      	ldr	r3, [pc, #60]	; (60bc <pow+0x33c>)
    6080:	6053      	str	r3, [r2, #4]
    6082:	4643      	mov	r3, r8
    6084:	464a      	mov	r2, r9
    6086:	611c      	str	r4, [r3, #16]
    6088:	615d      	str	r5, [r3, #20]
    608a:	621a      	str	r2, [r3, #32]
    608c:	609e      	str	r6, [r3, #8]
    608e:	60df      	str	r7, [r3, #12]
    6090:	2400      	movs	r4, #0
    6092:	4653      	mov	r3, sl
    6094:	571c      	ldrsb	r4, [r3, r4]
    6096:	2c00      	cmp	r4, #0
    6098:	d100      	bne.n	609c <pow+0x31c>
    609a:	e70b      	b.n	5eb4 <pow+0x134>
    609c:	2300      	movs	r3, #0
    609e:	2200      	movs	r2, #0
    60a0:	0019      	movs	r1, r3
    60a2:	0010      	movs	r0, r2
    60a4:	f001 fd04 	bl	7ab0 <__aeabi_ddiv>
    60a8:	4643      	mov	r3, r8
    60aa:	6198      	str	r0, [r3, #24]
    60ac:	61d9      	str	r1, [r3, #28]
    60ae:	2c02      	cmp	r4, #2
    60b0:	d100      	bne.n	60b4 <pow+0x334>
    60b2:	e741      	b.n	5f38 <pow+0x1b8>
    60b4:	e703      	b.n	5ebe <pow+0x13e>
    60b6:	46c0      	nop			; (mov r8, r8)
    60b8:	200000b9 	.word	0x200000b9
    60bc:	00009cdc 	.word	0x00009cdc
    60c0:	3ff00000 	.word	0x3ff00000
    60c4:	fff00000 	.word	0xfff00000
    60c8:	47efffff 	.word	0x47efffff
    60cc:	3fe00000 	.word	0x3fe00000
    60d0:	c7efffff 	.word	0xc7efffff
    60d4:	7ff00000 	.word	0x7ff00000

000060d8 <__ieee754_pow>:
    60d8:	b5f0      	push	{r4, r5, r6, r7, lr}
    60da:	4657      	mov	r7, sl
    60dc:	464e      	mov	r6, r9
    60de:	4645      	mov	r5, r8
    60e0:	46de      	mov	lr, fp
    60e2:	001c      	movs	r4, r3
    60e4:	0013      	movs	r3, r2
    60e6:	b5e0      	push	{r5, r6, r7, lr}
    60e8:	0065      	lsls	r5, r4, #1
    60ea:	b091      	sub	sp, #68	; 0x44
    60ec:	086d      	lsrs	r5, r5, #1
    60ee:	9300      	str	r3, [sp, #0]
    60f0:	9401      	str	r4, [sp, #4]
    60f2:	0007      	movs	r7, r0
    60f4:	000e      	movs	r6, r1
    60f6:	4680      	mov	r8, r0
    60f8:	4689      	mov	r9, r1
    60fa:	46a2      	mov	sl, r4
    60fc:	432b      	orrs	r3, r5
    60fe:	d031      	beq.n	6164 <__ieee754_pow+0x8c>
    6100:	4b67      	ldr	r3, [pc, #412]	; (62a0 <__ieee754_pow+0x1c8>)
    6102:	0074      	lsls	r4, r6, #1
    6104:	0864      	lsrs	r4, r4, #1
    6106:	429c      	cmp	r4, r3
    6108:	dc27      	bgt.n	615a <__ieee754_pow+0x82>
    610a:	d024      	beq.n	6156 <__ieee754_pow+0x7e>
    610c:	429d      	cmp	r5, r3
    610e:	dc24      	bgt.n	615a <__ieee754_pow+0x82>
    6110:	4b63      	ldr	r3, [pc, #396]	; (62a0 <__ieee754_pow+0x1c8>)
    6112:	429d      	cmp	r5, r3
    6114:	d100      	bne.n	6118 <__ieee754_pow+0x40>
    6116:	e081      	b.n	621c <__ieee754_pow+0x144>
    6118:	2300      	movs	r3, #0
    611a:	469b      	mov	fp, r3
    611c:	464b      	mov	r3, r9
    611e:	2b00      	cmp	r3, #0
    6120:	da00      	bge.n	6124 <__ieee754_pow+0x4c>
    6122:	e07f      	b.n	6224 <__ieee754_pow+0x14c>
    6124:	2a00      	cmp	r2, #0
    6126:	d12c      	bne.n	6182 <__ieee754_pow+0xaa>
    6128:	4b5d      	ldr	r3, [pc, #372]	; (62a0 <__ieee754_pow+0x1c8>)
    612a:	429d      	cmp	r5, r3
    612c:	d100      	bne.n	6130 <__ieee754_pow+0x58>
    612e:	e097      	b.n	6260 <__ieee754_pow+0x188>
    6130:	4b5c      	ldr	r3, [pc, #368]	; (62a4 <__ieee754_pow+0x1cc>)
    6132:	429d      	cmp	r5, r3
    6134:	d066      	beq.n	6204 <__ieee754_pow+0x12c>
    6136:	2380      	movs	r3, #128	; 0x80
    6138:	05db      	lsls	r3, r3, #23
    613a:	459a      	cmp	sl, r3
    613c:	d100      	bne.n	6140 <__ieee754_pow+0x68>
    613e:	e3b9      	b.n	68b4 <__ieee754_pow+0x7dc>
    6140:	4b59      	ldr	r3, [pc, #356]	; (62a8 <__ieee754_pow+0x1d0>)
    6142:	459a      	cmp	sl, r3
    6144:	d11d      	bne.n	6182 <__ieee754_pow+0xaa>
    6146:	464b      	mov	r3, r9
    6148:	2b00      	cmp	r3, #0
    614a:	db1a      	blt.n	6182 <__ieee754_pow+0xaa>
    614c:	0038      	movs	r0, r7
    614e:	0031      	movs	r1, r6
    6150:	f000 fcf8 	bl	6b44 <__ieee754_sqrt>
    6154:	e008      	b.n	6168 <__ieee754_pow+0x90>
    6156:	2800      	cmp	r0, #0
    6158:	d00d      	beq.n	6176 <__ieee754_pow+0x9e>
    615a:	4b54      	ldr	r3, [pc, #336]	; (62ac <__ieee754_pow+0x1d4>)
    615c:	469c      	mov	ip, r3
    615e:	4464      	add	r4, ip
    6160:	4327      	orrs	r7, r4
    6162:	d10a      	bne.n	617a <__ieee754_pow+0xa2>
    6164:	2000      	movs	r0, #0
    6166:	494f      	ldr	r1, [pc, #316]	; (62a4 <__ieee754_pow+0x1cc>)
    6168:	b011      	add	sp, #68	; 0x44
    616a:	bc3c      	pop	{r2, r3, r4, r5}
    616c:	4690      	mov	r8, r2
    616e:	4699      	mov	r9, r3
    6170:	46a2      	mov	sl, r4
    6172:	46ab      	mov	fp, r5
    6174:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6176:	42a5      	cmp	r5, r4
    6178:	ddca      	ble.n	6110 <__ieee754_pow+0x38>
    617a:	484d      	ldr	r0, [pc, #308]	; (62b0 <__ieee754_pow+0x1d8>)
    617c:	f000 fdd2 	bl	6d24 <nan>
    6180:	e7f2      	b.n	6168 <__ieee754_pow+0x90>
    6182:	0038      	movs	r0, r7
    6184:	0031      	movs	r1, r6
    6186:	f000 fdbd 	bl	6d04 <fabs>
    618a:	4643      	mov	r3, r8
    618c:	2b00      	cmp	r3, #0
    618e:	d11d      	bne.n	61cc <__ieee754_pow+0xf4>
    6190:	2c00      	cmp	r4, #0
    6192:	d004      	beq.n	619e <__ieee754_pow+0xc6>
    6194:	4a43      	ldr	r2, [pc, #268]	; (62a4 <__ieee754_pow+0x1cc>)
    6196:	00b3      	lsls	r3, r6, #2
    6198:	089b      	lsrs	r3, r3, #2
    619a:	4293      	cmp	r3, r2
    619c:	d116      	bne.n	61cc <__ieee754_pow+0xf4>
    619e:	4653      	mov	r3, sl
    61a0:	2b00      	cmp	r3, #0
    61a2:	da00      	bge.n	61a6 <__ieee754_pow+0xce>
    61a4:	e3c5      	b.n	6932 <__ieee754_pow+0x85a>
    61a6:	464b      	mov	r3, r9
    61a8:	2b00      	cmp	r3, #0
    61aa:	dadd      	bge.n	6168 <__ieee754_pow+0x90>
    61ac:	4b3f      	ldr	r3, [pc, #252]	; (62ac <__ieee754_pow+0x1d4>)
    61ae:	469c      	mov	ip, r3
    61b0:	465b      	mov	r3, fp
    61b2:	4464      	add	r4, ip
    61b4:	431c      	orrs	r4, r3
    61b6:	d101      	bne.n	61bc <__ieee754_pow+0xe4>
    61b8:	f000 fc53 	bl	6a62 <__ieee754_pow+0x98a>
    61bc:	465b      	mov	r3, fp
    61be:	2b01      	cmp	r3, #1
    61c0:	d1d2      	bne.n	6168 <__ieee754_pow+0x90>
    61c2:	2480      	movs	r4, #128	; 0x80
    61c4:	0624      	lsls	r4, r4, #24
    61c6:	190b      	adds	r3, r1, r4
    61c8:	0019      	movs	r1, r3
    61ca:	e7cd      	b.n	6168 <__ieee754_pow+0x90>
    61cc:	0ff3      	lsrs	r3, r6, #31
    61ce:	3b01      	subs	r3, #1
    61d0:	4698      	mov	r8, r3
    61d2:	465b      	mov	r3, fp
    61d4:	4642      	mov	r2, r8
    61d6:	4313      	orrs	r3, r2
    61d8:	d057      	beq.n	628a <__ieee754_pow+0x1b2>
    61da:	4b36      	ldr	r3, [pc, #216]	; (62b4 <__ieee754_pow+0x1dc>)
    61dc:	429d      	cmp	r5, r3
    61de:	dd77      	ble.n	62d0 <__ieee754_pow+0x1f8>
    61e0:	4b35      	ldr	r3, [pc, #212]	; (62b8 <__ieee754_pow+0x1e0>)
    61e2:	429d      	cmp	r5, r3
    61e4:	dc00      	bgt.n	61e8 <__ieee754_pow+0x110>
    61e6:	e3b1      	b.n	694c <__ieee754_pow+0x874>
    61e8:	4b34      	ldr	r3, [pc, #208]	; (62bc <__ieee754_pow+0x1e4>)
    61ea:	429c      	cmp	r4, r3
    61ec:	dc00      	bgt.n	61f0 <__ieee754_pow+0x118>
    61ee:	e3a8      	b.n	6942 <__ieee754_pow+0x86a>
    61f0:	4653      	mov	r3, sl
    61f2:	2b00      	cmp	r3, #0
    61f4:	dd43      	ble.n	627e <__ieee754_pow+0x1a6>
    61f6:	4a32      	ldr	r2, [pc, #200]	; (62c0 <__ieee754_pow+0x1e8>)
    61f8:	4b32      	ldr	r3, [pc, #200]	; (62c4 <__ieee754_pow+0x1ec>)
    61fa:	0010      	movs	r0, r2
    61fc:	0019      	movs	r1, r3
    61fe:	f002 f88b 	bl	8318 <__aeabi_dmul>
    6202:	e7b1      	b.n	6168 <__ieee754_pow+0x90>
    6204:	4653      	mov	r3, sl
    6206:	0038      	movs	r0, r7
    6208:	0031      	movs	r1, r6
    620a:	2b00      	cmp	r3, #0
    620c:	daac      	bge.n	6168 <__ieee754_pow+0x90>
    620e:	003a      	movs	r2, r7
    6210:	0033      	movs	r3, r6
    6212:	2000      	movs	r0, #0
    6214:	4923      	ldr	r1, [pc, #140]	; (62a4 <__ieee754_pow+0x1cc>)
    6216:	f001 fc4b 	bl	7ab0 <__aeabi_ddiv>
    621a:	e7a5      	b.n	6168 <__ieee754_pow+0x90>
    621c:	2a00      	cmp	r2, #0
    621e:	d100      	bne.n	6222 <__ieee754_pow+0x14a>
    6220:	e77a      	b.n	6118 <__ieee754_pow+0x40>
    6222:	e79a      	b.n	615a <__ieee754_pow+0x82>
    6224:	4b28      	ldr	r3, [pc, #160]	; (62c8 <__ieee754_pow+0x1f0>)
    6226:	429d      	cmp	r5, r3
    6228:	dc2c      	bgt.n	6284 <__ieee754_pow+0x1ac>
    622a:	4b24      	ldr	r3, [pc, #144]	; (62bc <__ieee754_pow+0x1e4>)
    622c:	429d      	cmp	r5, r3
    622e:	dc00      	bgt.n	6232 <__ieee754_pow+0x15a>
    6230:	e778      	b.n	6124 <__ieee754_pow+0x4c>
    6232:	4926      	ldr	r1, [pc, #152]	; (62cc <__ieee754_pow+0x1f4>)
    6234:	152b      	asrs	r3, r5, #20
    6236:	468c      	mov	ip, r1
    6238:	4463      	add	r3, ip
    623a:	2b14      	cmp	r3, #20
    623c:	dc01      	bgt.n	6242 <__ieee754_pow+0x16a>
    623e:	f000 fbf3 	bl	6a28 <__ieee754_pow+0x950>
    6242:	2134      	movs	r1, #52	; 0x34
    6244:	1acb      	subs	r3, r1, r3
    6246:	9900      	ldr	r1, [sp, #0]
    6248:	40d9      	lsrs	r1, r3
    624a:	0008      	movs	r0, r1
    624c:	4098      	lsls	r0, r3
    624e:	4282      	cmp	r2, r0
    6250:	d000      	beq.n	6254 <__ieee754_pow+0x17c>
    6252:	e767      	b.n	6124 <__ieee754_pow+0x4c>
    6254:	2301      	movs	r3, #1
    6256:	4019      	ands	r1, r3
    6258:	3301      	adds	r3, #1
    625a:	1a5b      	subs	r3, r3, r1
    625c:	469b      	mov	fp, r3
    625e:	e761      	b.n	6124 <__ieee754_pow+0x4c>
    6260:	4b12      	ldr	r3, [pc, #72]	; (62ac <__ieee754_pow+0x1d4>)
    6262:	18e3      	adds	r3, r4, r3
    6264:	431f      	orrs	r7, r3
    6266:	d100      	bne.n	626a <__ieee754_pow+0x192>
    6268:	e77c      	b.n	6164 <__ieee754_pow+0x8c>
    626a:	4b14      	ldr	r3, [pc, #80]	; (62bc <__ieee754_pow+0x1e4>)
    626c:	429c      	cmp	r4, r3
    626e:	dc00      	bgt.n	6272 <__ieee754_pow+0x19a>
    6270:	e327      	b.n	68c2 <__ieee754_pow+0x7ea>
    6272:	9800      	ldr	r0, [sp, #0]
    6274:	9901      	ldr	r1, [sp, #4]
    6276:	4653      	mov	r3, sl
    6278:	2b00      	cmp	r3, #0
    627a:	db00      	blt.n	627e <__ieee754_pow+0x1a6>
    627c:	e774      	b.n	6168 <__ieee754_pow+0x90>
    627e:	2000      	movs	r0, #0
    6280:	2100      	movs	r1, #0
    6282:	e771      	b.n	6168 <__ieee754_pow+0x90>
    6284:	2302      	movs	r3, #2
    6286:	469b      	mov	fp, r3
    6288:	e74c      	b.n	6124 <__ieee754_pow+0x4c>
    628a:	003a      	movs	r2, r7
    628c:	0033      	movs	r3, r6
    628e:	0038      	movs	r0, r7
    6290:	0031      	movs	r1, r6
    6292:	f002 fac1 	bl	8818 <__aeabi_dsub>
    6296:	0002      	movs	r2, r0
    6298:	000b      	movs	r3, r1
    629a:	f001 fc09 	bl	7ab0 <__aeabi_ddiv>
    629e:	e763      	b.n	6168 <__ieee754_pow+0x90>
    62a0:	7ff00000 	.word	0x7ff00000
    62a4:	3ff00000 	.word	0x3ff00000
    62a8:	3fe00000 	.word	0x3fe00000
    62ac:	c0100000 	.word	0xc0100000
    62b0:	00009c08 	.word	0x00009c08
    62b4:	41e00000 	.word	0x41e00000
    62b8:	43f00000 	.word	0x43f00000
    62bc:	3fefffff 	.word	0x3fefffff
    62c0:	8800759c 	.word	0x8800759c
    62c4:	7e37e43c 	.word	0x7e37e43c
    62c8:	433fffff 	.word	0x433fffff
    62cc:	fffffc01 	.word	0xfffffc01
    62d0:	4be9      	ldr	r3, [pc, #932]	; (6678 <__ieee754_pow+0x5a0>)
    62d2:	2200      	movs	r2, #0
    62d4:	429c      	cmp	r4, r3
    62d6:	dc06      	bgt.n	62e6 <__ieee754_pow+0x20e>
    62d8:	2200      	movs	r2, #0
    62da:	4be8      	ldr	r3, [pc, #928]	; (667c <__ieee754_pow+0x5a4>)
    62dc:	f002 f81c 	bl	8318 <__aeabi_dmul>
    62e0:	2235      	movs	r2, #53	; 0x35
    62e2:	000c      	movs	r4, r1
    62e4:	4252      	negs	r2, r2
    62e6:	4de6      	ldr	r5, [pc, #920]	; (6680 <__ieee754_pow+0x5a8>)
    62e8:	1523      	asrs	r3, r4, #20
    62ea:	46ac      	mov	ip, r5
    62ec:	4463      	add	r3, ip
    62ee:	4699      	mov	r9, r3
    62f0:	0324      	lsls	r4, r4, #12
    62f2:	4de4      	ldr	r5, [pc, #912]	; (6684 <__ieee754_pow+0x5ac>)
    62f4:	4be4      	ldr	r3, [pc, #912]	; (6688 <__ieee754_pow+0x5b0>)
    62f6:	0b24      	lsrs	r4, r4, #12
    62f8:	4491      	add	r9, r2
    62fa:	4325      	orrs	r5, r4
    62fc:	429c      	cmp	r4, r3
    62fe:	dd09      	ble.n	6314 <__ieee754_pow+0x23c>
    6300:	4be2      	ldr	r3, [pc, #904]	; (668c <__ieee754_pow+0x5b4>)
    6302:	429c      	cmp	r4, r3
    6304:	dc00      	bgt.n	6308 <__ieee754_pow+0x230>
    6306:	e3b6      	b.n	6a76 <__ieee754_pow+0x99e>
    6308:	2301      	movs	r3, #1
    630a:	469c      	mov	ip, r3
    630c:	4be0      	ldr	r3, [pc, #896]	; (6690 <__ieee754_pow+0x5b8>)
    630e:	44e1      	add	r9, ip
    6310:	469c      	mov	ip, r3
    6312:	4465      	add	r5, ip
    6314:	2300      	movs	r3, #0
    6316:	2400      	movs	r4, #0
    6318:	2200      	movs	r2, #0
    631a:	9308      	str	r3, [sp, #32]
    631c:	9409      	str	r4, [sp, #36]	; 0x24
    631e:	930c      	str	r3, [sp, #48]	; 0x30
    6320:	940d      	str	r4, [sp, #52]	; 0x34
    6322:	2400      	movs	r4, #0
    6324:	4bd7      	ldr	r3, [pc, #860]	; (6684 <__ieee754_pow+0x5ac>)
    6326:	9206      	str	r2, [sp, #24]
    6328:	9307      	str	r3, [sp, #28]
    632a:	9a06      	ldr	r2, [sp, #24]
    632c:	9b07      	ldr	r3, [sp, #28]
    632e:	0029      	movs	r1, r5
    6330:	900a      	str	r0, [sp, #40]	; 0x28
    6332:	910b      	str	r1, [sp, #44]	; 0x2c
    6334:	f002 fa70 	bl	8818 <__aeabi_dsub>
    6338:	9a06      	ldr	r2, [sp, #24]
    633a:	9b07      	ldr	r3, [sp, #28]
    633c:	0006      	movs	r6, r0
    633e:	000f      	movs	r7, r1
    6340:	980a      	ldr	r0, [sp, #40]	; 0x28
    6342:	990b      	ldr	r1, [sp, #44]	; 0x2c
    6344:	f001 f8a4 	bl	7490 <__aeabi_dadd>
    6348:	0002      	movs	r2, r0
    634a:	000b      	movs	r3, r1
    634c:	2000      	movs	r0, #0
    634e:	49cd      	ldr	r1, [pc, #820]	; (6684 <__ieee754_pow+0x5ac>)
    6350:	f001 fbae 	bl	7ab0 <__aeabi_ddiv>
    6354:	000a      	movs	r2, r1
    6356:	0001      	movs	r1, r0
    6358:	0013      	movs	r3, r2
    635a:	910e      	str	r1, [sp, #56]	; 0x38
    635c:	920f      	str	r2, [sp, #60]	; 0x3c
    635e:	0002      	movs	r2, r0
    6360:	0039      	movs	r1, r7
    6362:	0030      	movs	r0, r6
    6364:	f001 ffd8 	bl	8318 <__aeabi_dmul>
    6368:	000a      	movs	r2, r1
    636a:	0001      	movs	r1, r0
    636c:	2080      	movs	r0, #128	; 0x80
    636e:	9104      	str	r1, [sp, #16]
    6370:	9205      	str	r2, [sp, #20]
    6372:	0013      	movs	r3, r2
    6374:	2200      	movs	r2, #0
    6376:	1069      	asrs	r1, r5, #1
    6378:	2580      	movs	r5, #128	; 0x80
    637a:	0300      	lsls	r0, r0, #12
    637c:	4684      	mov	ip, r0
    637e:	9202      	str	r2, [sp, #8]
    6380:	9303      	str	r3, [sp, #12]
    6382:	2200      	movs	r2, #0
    6384:	05ad      	lsls	r5, r5, #22
    6386:	430d      	orrs	r5, r1
    6388:	4465      	add	r5, ip
    638a:	192b      	adds	r3, r5, r4
    638c:	9802      	ldr	r0, [sp, #8]
    638e:	9903      	ldr	r1, [sp, #12]
    6390:	0014      	movs	r4, r2
    6392:	001d      	movs	r5, r3
    6394:	f001 ffc0 	bl	8318 <__aeabi_dmul>
    6398:	0002      	movs	r2, r0
    639a:	000b      	movs	r3, r1
    639c:	0030      	movs	r0, r6
    639e:	0039      	movs	r1, r7
    63a0:	f002 fa3a 	bl	8818 <__aeabi_dsub>
    63a4:	9a06      	ldr	r2, [sp, #24]
    63a6:	9b07      	ldr	r3, [sp, #28]
    63a8:	0006      	movs	r6, r0
    63aa:	000f      	movs	r7, r1
    63ac:	0020      	movs	r0, r4
    63ae:	0029      	movs	r1, r5
    63b0:	f002 fa32 	bl	8818 <__aeabi_dsub>
    63b4:	0002      	movs	r2, r0
    63b6:	000b      	movs	r3, r1
    63b8:	980a      	ldr	r0, [sp, #40]	; 0x28
    63ba:	990b      	ldr	r1, [sp, #44]	; 0x2c
    63bc:	f002 fa2c 	bl	8818 <__aeabi_dsub>
    63c0:	9a02      	ldr	r2, [sp, #8]
    63c2:	9b03      	ldr	r3, [sp, #12]
    63c4:	f001 ffa8 	bl	8318 <__aeabi_dmul>
    63c8:	0002      	movs	r2, r0
    63ca:	000b      	movs	r3, r1
    63cc:	0030      	movs	r0, r6
    63ce:	0039      	movs	r1, r7
    63d0:	f002 fa22 	bl	8818 <__aeabi_dsub>
    63d4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    63d6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    63d8:	f001 ff9e 	bl	8318 <__aeabi_dmul>
    63dc:	9d04      	ldr	r5, [sp, #16]
    63de:	9e05      	ldr	r6, [sp, #20]
    63e0:	9006      	str	r0, [sp, #24]
    63e2:	9107      	str	r1, [sp, #28]
    63e4:	002a      	movs	r2, r5
    63e6:	0033      	movs	r3, r6
    63e8:	0028      	movs	r0, r5
    63ea:	0031      	movs	r1, r6
    63ec:	f001 ff94 	bl	8318 <__aeabi_dmul>
    63f0:	0006      	movs	r6, r0
    63f2:	000f      	movs	r7, r1
    63f4:	4aa7      	ldr	r2, [pc, #668]	; (6694 <__ieee754_pow+0x5bc>)
    63f6:	4ba8      	ldr	r3, [pc, #672]	; (6698 <__ieee754_pow+0x5c0>)
    63f8:	f001 ff8e 	bl	8318 <__aeabi_dmul>
    63fc:	4aa7      	ldr	r2, [pc, #668]	; (669c <__ieee754_pow+0x5c4>)
    63fe:	4ba8      	ldr	r3, [pc, #672]	; (66a0 <__ieee754_pow+0x5c8>)
    6400:	f001 f846 	bl	7490 <__aeabi_dadd>
    6404:	0032      	movs	r2, r6
    6406:	003b      	movs	r3, r7
    6408:	f001 ff86 	bl	8318 <__aeabi_dmul>
    640c:	4aa5      	ldr	r2, [pc, #660]	; (66a4 <__ieee754_pow+0x5cc>)
    640e:	4ba6      	ldr	r3, [pc, #664]	; (66a8 <__ieee754_pow+0x5d0>)
    6410:	f001 f83e 	bl	7490 <__aeabi_dadd>
    6414:	0032      	movs	r2, r6
    6416:	003b      	movs	r3, r7
    6418:	f001 ff7e 	bl	8318 <__aeabi_dmul>
    641c:	4aa3      	ldr	r2, [pc, #652]	; (66ac <__ieee754_pow+0x5d4>)
    641e:	4ba4      	ldr	r3, [pc, #656]	; (66b0 <__ieee754_pow+0x5d8>)
    6420:	f001 f836 	bl	7490 <__aeabi_dadd>
    6424:	0032      	movs	r2, r6
    6426:	003b      	movs	r3, r7
    6428:	f001 ff76 	bl	8318 <__aeabi_dmul>
    642c:	4aa1      	ldr	r2, [pc, #644]	; (66b4 <__ieee754_pow+0x5dc>)
    642e:	4ba2      	ldr	r3, [pc, #648]	; (66b8 <__ieee754_pow+0x5e0>)
    6430:	f001 f82e 	bl	7490 <__aeabi_dadd>
    6434:	0032      	movs	r2, r6
    6436:	003b      	movs	r3, r7
    6438:	f001 ff6e 	bl	8318 <__aeabi_dmul>
    643c:	4a9f      	ldr	r2, [pc, #636]	; (66bc <__ieee754_pow+0x5e4>)
    643e:	4ba0      	ldr	r3, [pc, #640]	; (66c0 <__ieee754_pow+0x5e8>)
    6440:	f001 f826 	bl	7490 <__aeabi_dadd>
    6444:	0032      	movs	r2, r6
    6446:	0004      	movs	r4, r0
    6448:	000d      	movs	r5, r1
    644a:	003b      	movs	r3, r7
    644c:	0030      	movs	r0, r6
    644e:	0039      	movs	r1, r7
    6450:	f001 ff62 	bl	8318 <__aeabi_dmul>
    6454:	0002      	movs	r2, r0
    6456:	000b      	movs	r3, r1
    6458:	0020      	movs	r0, r4
    645a:	0029      	movs	r1, r5
    645c:	f001 ff5c 	bl	8318 <__aeabi_dmul>
    6460:	9e02      	ldr	r6, [sp, #8]
    6462:	9f03      	ldr	r7, [sp, #12]
    6464:	0004      	movs	r4, r0
    6466:	000d      	movs	r5, r1
    6468:	9804      	ldr	r0, [sp, #16]
    646a:	9905      	ldr	r1, [sp, #20]
    646c:	0032      	movs	r2, r6
    646e:	003b      	movs	r3, r7
    6470:	f001 f80e 	bl	7490 <__aeabi_dadd>
    6474:	9a06      	ldr	r2, [sp, #24]
    6476:	9b07      	ldr	r3, [sp, #28]
    6478:	f001 ff4e 	bl	8318 <__aeabi_dmul>
    647c:	0022      	movs	r2, r4
    647e:	002b      	movs	r3, r5
    6480:	f001 f806 	bl	7490 <__aeabi_dadd>
    6484:	0032      	movs	r2, r6
    6486:	900a      	str	r0, [sp, #40]	; 0x28
    6488:	910b      	str	r1, [sp, #44]	; 0x2c
    648a:	003b      	movs	r3, r7
    648c:	0030      	movs	r0, r6
    648e:	0039      	movs	r1, r7
    6490:	9602      	str	r6, [sp, #8]
    6492:	9703      	str	r7, [sp, #12]
    6494:	f001 ff40 	bl	8318 <__aeabi_dmul>
    6498:	2200      	movs	r2, #0
    649a:	4b8a      	ldr	r3, [pc, #552]	; (66c4 <__ieee754_pow+0x5ec>)
    649c:	0004      	movs	r4, r0
    649e:	000d      	movs	r5, r1
    64a0:	f000 fff6 	bl	7490 <__aeabi_dadd>
    64a4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    64a6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    64a8:	f000 fff2 	bl	7490 <__aeabi_dadd>
    64ac:	2600      	movs	r6, #0
    64ae:	000f      	movs	r7, r1
    64b0:	0032      	movs	r2, r6
    64b2:	000b      	movs	r3, r1
    64b4:	9802      	ldr	r0, [sp, #8]
    64b6:	9903      	ldr	r1, [sp, #12]
    64b8:	f001 ff2e 	bl	8318 <__aeabi_dmul>
    64bc:	2200      	movs	r2, #0
    64be:	9002      	str	r0, [sp, #8]
    64c0:	9103      	str	r1, [sp, #12]
    64c2:	4b80      	ldr	r3, [pc, #512]	; (66c4 <__ieee754_pow+0x5ec>)
    64c4:	0030      	movs	r0, r6
    64c6:	0039      	movs	r1, r7
    64c8:	f002 f9a6 	bl	8818 <__aeabi_dsub>
    64cc:	0022      	movs	r2, r4
    64ce:	002b      	movs	r3, r5
    64d0:	f002 f9a2 	bl	8818 <__aeabi_dsub>
    64d4:	0002      	movs	r2, r0
    64d6:	000b      	movs	r3, r1
    64d8:	980a      	ldr	r0, [sp, #40]	; 0x28
    64da:	990b      	ldr	r1, [sp, #44]	; 0x2c
    64dc:	f002 f99c 	bl	8818 <__aeabi_dsub>
    64e0:	9a04      	ldr	r2, [sp, #16]
    64e2:	9b05      	ldr	r3, [sp, #20]
    64e4:	f001 ff18 	bl	8318 <__aeabi_dmul>
    64e8:	0032      	movs	r2, r6
    64ea:	0004      	movs	r4, r0
    64ec:	000d      	movs	r5, r1
    64ee:	9806      	ldr	r0, [sp, #24]
    64f0:	9907      	ldr	r1, [sp, #28]
    64f2:	003b      	movs	r3, r7
    64f4:	f001 ff10 	bl	8318 <__aeabi_dmul>
    64f8:	0002      	movs	r2, r0
    64fa:	000b      	movs	r3, r1
    64fc:	0020      	movs	r0, r4
    64fe:	0029      	movs	r1, r5
    6500:	f000 ffc6 	bl	7490 <__aeabi_dadd>
    6504:	0004      	movs	r4, r0
    6506:	000d      	movs	r5, r1
    6508:	0002      	movs	r2, r0
    650a:	000b      	movs	r3, r1
    650c:	9802      	ldr	r0, [sp, #8]
    650e:	9903      	ldr	r1, [sp, #12]
    6510:	f000 ffbe 	bl	7490 <__aeabi_dadd>
    6514:	2600      	movs	r6, #0
    6516:	22e0      	movs	r2, #224	; 0xe0
    6518:	4b6b      	ldr	r3, [pc, #428]	; (66c8 <__ieee754_pow+0x5f0>)
    651a:	0612      	lsls	r2, r2, #24
    651c:	0030      	movs	r0, r6
    651e:	000f      	movs	r7, r1
    6520:	f001 fefa 	bl	8318 <__aeabi_dmul>
    6524:	9a02      	ldr	r2, [sp, #8]
    6526:	9b03      	ldr	r3, [sp, #12]
    6528:	9004      	str	r0, [sp, #16]
    652a:	9105      	str	r1, [sp, #20]
    652c:	0030      	movs	r0, r6
    652e:	0039      	movs	r1, r7
    6530:	f002 f972 	bl	8818 <__aeabi_dsub>
    6534:	0002      	movs	r2, r0
    6536:	000b      	movs	r3, r1
    6538:	0020      	movs	r0, r4
    653a:	0029      	movs	r1, r5
    653c:	f002 f96c 	bl	8818 <__aeabi_dsub>
    6540:	4a62      	ldr	r2, [pc, #392]	; (66cc <__ieee754_pow+0x5f4>)
    6542:	4b61      	ldr	r3, [pc, #388]	; (66c8 <__ieee754_pow+0x5f0>)
    6544:	f001 fee8 	bl	8318 <__aeabi_dmul>
    6548:	4a61      	ldr	r2, [pc, #388]	; (66d0 <__ieee754_pow+0x5f8>)
    654a:	0004      	movs	r4, r0
    654c:	000d      	movs	r5, r1
    654e:	4b61      	ldr	r3, [pc, #388]	; (66d4 <__ieee754_pow+0x5fc>)
    6550:	0030      	movs	r0, r6
    6552:	0039      	movs	r1, r7
    6554:	f001 fee0 	bl	8318 <__aeabi_dmul>
    6558:	0002      	movs	r2, r0
    655a:	000b      	movs	r3, r1
    655c:	0020      	movs	r0, r4
    655e:	0029      	movs	r1, r5
    6560:	f000 ff96 	bl	7490 <__aeabi_dadd>
    6564:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    6566:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    6568:	f000 ff92 	bl	7490 <__aeabi_dadd>
    656c:	0006      	movs	r6, r0
    656e:	4648      	mov	r0, r9
    6570:	000f      	movs	r7, r1
    6572:	f002 fc87 	bl	8e84 <__aeabi_i2d>
    6576:	0004      	movs	r4, r0
    6578:	000d      	movs	r5, r1
    657a:	9804      	ldr	r0, [sp, #16]
    657c:	9905      	ldr	r1, [sp, #20]
    657e:	0032      	movs	r2, r6
    6580:	003b      	movs	r3, r7
    6582:	f000 ff85 	bl	7490 <__aeabi_dadd>
    6586:	9a08      	ldr	r2, [sp, #32]
    6588:	9b09      	ldr	r3, [sp, #36]	; 0x24
    658a:	f000 ff81 	bl	7490 <__aeabi_dadd>
    658e:	0022      	movs	r2, r4
    6590:	002b      	movs	r3, r5
    6592:	f000 ff7d 	bl	7490 <__aeabi_dadd>
    6596:	2000      	movs	r0, #0
    6598:	0022      	movs	r2, r4
    659a:	002b      	movs	r3, r5
    659c:	9002      	str	r0, [sp, #8]
    659e:	9103      	str	r1, [sp, #12]
    65a0:	f002 f93a 	bl	8818 <__aeabi_dsub>
    65a4:	9a08      	ldr	r2, [sp, #32]
    65a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
    65a8:	f002 f936 	bl	8818 <__aeabi_dsub>
    65ac:	9a04      	ldr	r2, [sp, #16]
    65ae:	9b05      	ldr	r3, [sp, #20]
    65b0:	f002 f932 	bl	8818 <__aeabi_dsub>
    65b4:	0002      	movs	r2, r0
    65b6:	000b      	movs	r3, r1
    65b8:	0030      	movs	r0, r6
    65ba:	0039      	movs	r1, r7
    65bc:	f002 f92c 	bl	8818 <__aeabi_dsub>
    65c0:	9004      	str	r0, [sp, #16]
    65c2:	9105      	str	r1, [sp, #20]
    65c4:	465b      	mov	r3, fp
    65c6:	4642      	mov	r2, r8
    65c8:	3b01      	subs	r3, #1
    65ca:	4313      	orrs	r3, r2
    65cc:	d100      	bne.n	65d0 <__ieee754_pow+0x4f8>
    65ce:	e1ab      	b.n	6928 <__ieee754_pow+0x850>
    65d0:	2300      	movs	r3, #0
    65d2:	4c2c      	ldr	r4, [pc, #176]	; (6684 <__ieee754_pow+0x5ac>)
    65d4:	9306      	str	r3, [sp, #24]
    65d6:	9407      	str	r4, [sp, #28]
    65d8:	9800      	ldr	r0, [sp, #0]
    65da:	9901      	ldr	r1, [sp, #4]
    65dc:	2600      	movs	r6, #0
    65de:	000b      	movs	r3, r1
    65e0:	0032      	movs	r2, r6
    65e2:	000f      	movs	r7, r1
    65e4:	f002 f918 	bl	8818 <__aeabi_dsub>
    65e8:	9a02      	ldr	r2, [sp, #8]
    65ea:	9b03      	ldr	r3, [sp, #12]
    65ec:	f001 fe94 	bl	8318 <__aeabi_dmul>
    65f0:	9a00      	ldr	r2, [sp, #0]
    65f2:	9b01      	ldr	r3, [sp, #4]
    65f4:	0004      	movs	r4, r0
    65f6:	000d      	movs	r5, r1
    65f8:	9804      	ldr	r0, [sp, #16]
    65fa:	9905      	ldr	r1, [sp, #20]
    65fc:	f001 fe8c 	bl	8318 <__aeabi_dmul>
    6600:	0002      	movs	r2, r0
    6602:	000b      	movs	r3, r1
    6604:	0020      	movs	r0, r4
    6606:	0029      	movs	r1, r5
    6608:	f000 ff42 	bl	7490 <__aeabi_dadd>
    660c:	0004      	movs	r4, r0
    660e:	000d      	movs	r5, r1
    6610:	9802      	ldr	r0, [sp, #8]
    6612:	9903      	ldr	r1, [sp, #12]
    6614:	0032      	movs	r2, r6
    6616:	003b      	movs	r3, r7
    6618:	9400      	str	r4, [sp, #0]
    661a:	9501      	str	r5, [sp, #4]
    661c:	f001 fe7c 	bl	8318 <__aeabi_dmul>
    6620:	0002      	movs	r2, r0
    6622:	000b      	movs	r3, r1
    6624:	0006      	movs	r6, r0
    6626:	000f      	movs	r7, r1
    6628:	0020      	movs	r0, r4
    662a:	0029      	movs	r1, r5
    662c:	f000 ff30 	bl	7490 <__aeabi_dadd>
    6630:	4b29      	ldr	r3, [pc, #164]	; (66d8 <__ieee754_pow+0x600>)
    6632:	0004      	movs	r4, r0
    6634:	000d      	movs	r5, r1
    6636:	0002      	movs	r2, r0
    6638:	468b      	mov	fp, r1
    663a:	4299      	cmp	r1, r3
    663c:	dc00      	bgt.n	6640 <__ieee754_pow+0x568>
    663e:	e14f      	b.n	68e0 <__ieee754_pow+0x808>
    6640:	4b26      	ldr	r3, [pc, #152]	; (66dc <__ieee754_pow+0x604>)
    6642:	18cb      	adds	r3, r1, r3
    6644:	4303      	orrs	r3, r0
    6646:	d000      	beq.n	664a <__ieee754_pow+0x572>
    6648:	e1e2      	b.n	6a10 <__ieee754_pow+0x938>
    664a:	9800      	ldr	r0, [sp, #0]
    664c:	9901      	ldr	r1, [sp, #4]
    664e:	4a24      	ldr	r2, [pc, #144]	; (66e0 <__ieee754_pow+0x608>)
    6650:	4b24      	ldr	r3, [pc, #144]	; (66e4 <__ieee754_pow+0x60c>)
    6652:	f000 ff1d 	bl	7490 <__aeabi_dadd>
    6656:	0032      	movs	r2, r6
    6658:	9002      	str	r0, [sp, #8]
    665a:	9103      	str	r1, [sp, #12]
    665c:	003b      	movs	r3, r7
    665e:	0020      	movs	r0, r4
    6660:	0029      	movs	r1, r5
    6662:	f002 f8d9 	bl	8818 <__aeabi_dsub>
    6666:	0002      	movs	r2, r0
    6668:	000b      	movs	r3, r1
    666a:	9802      	ldr	r0, [sp, #8]
    666c:	9903      	ldr	r1, [sp, #12]
    666e:	f000 fd27 	bl	70c0 <__aeabi_dcmpgt>
    6672:	46aa      	mov	sl, r5
    6674:	e038      	b.n	66e8 <__ieee754_pow+0x610>
    6676:	46c0      	nop			; (mov r8, r8)
    6678:	000fffff 	.word	0x000fffff
    667c:	43400000 	.word	0x43400000
    6680:	fffffc01 	.word	0xfffffc01
    6684:	3ff00000 	.word	0x3ff00000
    6688:	0003988e 	.word	0x0003988e
    668c:	000bb679 	.word	0x000bb679
    6690:	fff00000 	.word	0xfff00000
    6694:	4a454eef 	.word	0x4a454eef
    6698:	3fca7e28 	.word	0x3fca7e28
    669c:	93c9db65 	.word	0x93c9db65
    66a0:	3fcd864a 	.word	0x3fcd864a
    66a4:	a91d4101 	.word	0xa91d4101
    66a8:	3fd17460 	.word	0x3fd17460
    66ac:	518f264d 	.word	0x518f264d
    66b0:	3fd55555 	.word	0x3fd55555
    66b4:	db6fabff 	.word	0xdb6fabff
    66b8:	3fdb6db6 	.word	0x3fdb6db6
    66bc:	33333303 	.word	0x33333303
    66c0:	3fe33333 	.word	0x3fe33333
    66c4:	40080000 	.word	0x40080000
    66c8:	3feec709 	.word	0x3feec709
    66cc:	dc3a03fd 	.word	0xdc3a03fd
    66d0:	145b01f5 	.word	0x145b01f5
    66d4:	be3e2fe0 	.word	0xbe3e2fe0
    66d8:	408fffff 	.word	0x408fffff
    66dc:	bf700000 	.word	0xbf700000
    66e0:	652b82fe 	.word	0x652b82fe
    66e4:	3c971547 	.word	0x3c971547
    66e8:	2800      	cmp	r0, #0
    66ea:	d000      	beq.n	66ee <__ieee754_pow+0x616>
    66ec:	e190      	b.n	6a10 <__ieee754_pow+0x938>
    66ee:	4aec      	ldr	r2, [pc, #944]	; (6aa0 <__ieee754_pow+0x9c8>)
    66f0:	4653      	mov	r3, sl
    66f2:	4694      	mov	ip, r2
    66f4:	2280      	movs	r2, #128	; 0x80
    66f6:	0352      	lsls	r2, r2, #13
    66f8:	0011      	movs	r1, r2
    66fa:	151b      	asrs	r3, r3, #20
    66fc:	4463      	add	r3, ip
    66fe:	4119      	asrs	r1, r3
    6700:	000b      	movs	r3, r1
    6702:	4690      	mov	r8, r2
    6704:	4ae7      	ldr	r2, [pc, #924]	; (6aa4 <__ieee754_pow+0x9cc>)
    6706:	445b      	add	r3, fp
    6708:	4694      	mov	ip, r2
    670a:	005c      	lsls	r4, r3, #1
    670c:	0d64      	lsrs	r4, r4, #21
    670e:	4de6      	ldr	r5, [pc, #920]	; (6aa8 <__ieee754_pow+0x9d0>)
    6710:	4464      	add	r4, ip
    6712:	4125      	asrs	r5, r4
    6714:	001a      	movs	r2, r3
    6716:	43aa      	bics	r2, r5
    6718:	0011      	movs	r1, r2
    671a:	4642      	mov	r2, r8
    671c:	031b      	lsls	r3, r3, #12
    671e:	0b1b      	lsrs	r3, r3, #12
    6720:	4313      	orrs	r3, r2
    6722:	2214      	movs	r2, #20
    6724:	1b14      	subs	r4, r2, r4
    6726:	4123      	asrs	r3, r4
    6728:	4699      	mov	r9, r3
    672a:	465b      	mov	r3, fp
    672c:	2000      	movs	r0, #0
    672e:	2b00      	cmp	r3, #0
    6730:	da00      	bge.n	6734 <__ieee754_pow+0x65c>
    6732:	e1b0      	b.n	6a96 <__ieee754_pow+0x9be>
    6734:	0002      	movs	r2, r0
    6736:	000b      	movs	r3, r1
    6738:	0030      	movs	r0, r6
    673a:	0039      	movs	r1, r7
    673c:	f002 f86c 	bl	8818 <__aeabi_dsub>
    6740:	000b      	movs	r3, r1
    6742:	0002      	movs	r2, r0
    6744:	0006      	movs	r6, r0
    6746:	000f      	movs	r7, r1
    6748:	9800      	ldr	r0, [sp, #0]
    674a:	9901      	ldr	r1, [sp, #4]
    674c:	f000 fea0 	bl	7490 <__aeabi_dadd>
    6750:	464b      	mov	r3, r9
    6752:	051b      	lsls	r3, r3, #20
    6754:	000d      	movs	r5, r1
    6756:	4698      	mov	r8, r3
    6758:	2400      	movs	r4, #0
    675a:	2200      	movs	r2, #0
    675c:	4bd3      	ldr	r3, [pc, #844]	; (6aac <__ieee754_pow+0x9d4>)
    675e:	0020      	movs	r0, r4
    6760:	0029      	movs	r1, r5
    6762:	f001 fdd9 	bl	8318 <__aeabi_dmul>
    6766:	0032      	movs	r2, r6
    6768:	9002      	str	r0, [sp, #8]
    676a:	9103      	str	r1, [sp, #12]
    676c:	003b      	movs	r3, r7
    676e:	0020      	movs	r0, r4
    6770:	0029      	movs	r1, r5
    6772:	f002 f851 	bl	8818 <__aeabi_dsub>
    6776:	0002      	movs	r2, r0
    6778:	000b      	movs	r3, r1
    677a:	9800      	ldr	r0, [sp, #0]
    677c:	9901      	ldr	r1, [sp, #4]
    677e:	f002 f84b 	bl	8818 <__aeabi_dsub>
    6782:	4acb      	ldr	r2, [pc, #812]	; (6ab0 <__ieee754_pow+0x9d8>)
    6784:	4bcb      	ldr	r3, [pc, #812]	; (6ab4 <__ieee754_pow+0x9dc>)
    6786:	f001 fdc7 	bl	8318 <__aeabi_dmul>
    678a:	4acb      	ldr	r2, [pc, #812]	; (6ab8 <__ieee754_pow+0x9e0>)
    678c:	0006      	movs	r6, r0
    678e:	000f      	movs	r7, r1
    6790:	4bca      	ldr	r3, [pc, #808]	; (6abc <__ieee754_pow+0x9e4>)
    6792:	0020      	movs	r0, r4
    6794:	0029      	movs	r1, r5
    6796:	f001 fdbf 	bl	8318 <__aeabi_dmul>
    679a:	0002      	movs	r2, r0
    679c:	000b      	movs	r3, r1
    679e:	0030      	movs	r0, r6
    67a0:	0039      	movs	r1, r7
    67a2:	f000 fe75 	bl	7490 <__aeabi_dadd>
    67a6:	0004      	movs	r4, r0
    67a8:	000d      	movs	r5, r1
    67aa:	0002      	movs	r2, r0
    67ac:	000b      	movs	r3, r1
    67ae:	9802      	ldr	r0, [sp, #8]
    67b0:	9903      	ldr	r1, [sp, #12]
    67b2:	f000 fe6d 	bl	7490 <__aeabi_dadd>
    67b6:	9a02      	ldr	r2, [sp, #8]
    67b8:	9b03      	ldr	r3, [sp, #12]
    67ba:	0006      	movs	r6, r0
    67bc:	000f      	movs	r7, r1
    67be:	f002 f82b 	bl	8818 <__aeabi_dsub>
    67c2:	0002      	movs	r2, r0
    67c4:	000b      	movs	r3, r1
    67c6:	0020      	movs	r0, r4
    67c8:	0029      	movs	r1, r5
    67ca:	f002 f825 	bl	8818 <__aeabi_dsub>
    67ce:	0032      	movs	r2, r6
    67d0:	9000      	str	r0, [sp, #0]
    67d2:	9101      	str	r1, [sp, #4]
    67d4:	003b      	movs	r3, r7
    67d6:	0030      	movs	r0, r6
    67d8:	0039      	movs	r1, r7
    67da:	f001 fd9d 	bl	8318 <__aeabi_dmul>
    67de:	0004      	movs	r4, r0
    67e0:	000d      	movs	r5, r1
    67e2:	4ab7      	ldr	r2, [pc, #732]	; (6ac0 <__ieee754_pow+0x9e8>)
    67e4:	4bb7      	ldr	r3, [pc, #732]	; (6ac4 <__ieee754_pow+0x9ec>)
    67e6:	f001 fd97 	bl	8318 <__aeabi_dmul>
    67ea:	4ab7      	ldr	r2, [pc, #732]	; (6ac8 <__ieee754_pow+0x9f0>)
    67ec:	4bb7      	ldr	r3, [pc, #732]	; (6acc <__ieee754_pow+0x9f4>)
    67ee:	f002 f813 	bl	8818 <__aeabi_dsub>
    67f2:	0022      	movs	r2, r4
    67f4:	002b      	movs	r3, r5
    67f6:	f001 fd8f 	bl	8318 <__aeabi_dmul>
    67fa:	4ab5      	ldr	r2, [pc, #724]	; (6ad0 <__ieee754_pow+0x9f8>)
    67fc:	4bb5      	ldr	r3, [pc, #724]	; (6ad4 <__ieee754_pow+0x9fc>)
    67fe:	f000 fe47 	bl	7490 <__aeabi_dadd>
    6802:	0022      	movs	r2, r4
    6804:	002b      	movs	r3, r5
    6806:	f001 fd87 	bl	8318 <__aeabi_dmul>
    680a:	4ab3      	ldr	r2, [pc, #716]	; (6ad8 <__ieee754_pow+0xa00>)
    680c:	4bb3      	ldr	r3, [pc, #716]	; (6adc <__ieee754_pow+0xa04>)
    680e:	f002 f803 	bl	8818 <__aeabi_dsub>
    6812:	0022      	movs	r2, r4
    6814:	002b      	movs	r3, r5
    6816:	f001 fd7f 	bl	8318 <__aeabi_dmul>
    681a:	4ab1      	ldr	r2, [pc, #708]	; (6ae0 <__ieee754_pow+0xa08>)
    681c:	4bb1      	ldr	r3, [pc, #708]	; (6ae4 <__ieee754_pow+0xa0c>)
    681e:	f000 fe37 	bl	7490 <__aeabi_dadd>
    6822:	0022      	movs	r2, r4
    6824:	002b      	movs	r3, r5
    6826:	f001 fd77 	bl	8318 <__aeabi_dmul>
    682a:	0002      	movs	r2, r0
    682c:	000b      	movs	r3, r1
    682e:	0030      	movs	r0, r6
    6830:	0039      	movs	r1, r7
    6832:	f001 fff1 	bl	8818 <__aeabi_dsub>
    6836:	0004      	movs	r4, r0
    6838:	000d      	movs	r5, r1
    683a:	0002      	movs	r2, r0
    683c:	000b      	movs	r3, r1
    683e:	0030      	movs	r0, r6
    6840:	0039      	movs	r1, r7
    6842:	f001 fd69 	bl	8318 <__aeabi_dmul>
    6846:	2380      	movs	r3, #128	; 0x80
    6848:	9002      	str	r0, [sp, #8]
    684a:	9103      	str	r1, [sp, #12]
    684c:	2200      	movs	r2, #0
    684e:	05db      	lsls	r3, r3, #23
    6850:	0020      	movs	r0, r4
    6852:	0029      	movs	r1, r5
    6854:	f001 ffe0 	bl	8818 <__aeabi_dsub>
    6858:	0002      	movs	r2, r0
    685a:	000b      	movs	r3, r1
    685c:	9802      	ldr	r0, [sp, #8]
    685e:	9903      	ldr	r1, [sp, #12]
    6860:	f001 f926 	bl	7ab0 <__aeabi_ddiv>
    6864:	9a00      	ldr	r2, [sp, #0]
    6866:	9b01      	ldr	r3, [sp, #4]
    6868:	0004      	movs	r4, r0
    686a:	000d      	movs	r5, r1
    686c:	0030      	movs	r0, r6
    686e:	0039      	movs	r1, r7
    6870:	f001 fd52 	bl	8318 <__aeabi_dmul>
    6874:	9a00      	ldr	r2, [sp, #0]
    6876:	9b01      	ldr	r3, [sp, #4]
    6878:	f000 fe0a 	bl	7490 <__aeabi_dadd>
    687c:	0002      	movs	r2, r0
    687e:	000b      	movs	r3, r1
    6880:	0020      	movs	r0, r4
    6882:	0029      	movs	r1, r5
    6884:	f001 ffc8 	bl	8818 <__aeabi_dsub>
    6888:	0032      	movs	r2, r6
    688a:	003b      	movs	r3, r7
    688c:	f001 ffc4 	bl	8818 <__aeabi_dsub>
    6890:	0002      	movs	r2, r0
    6892:	000b      	movs	r3, r1
    6894:	2000      	movs	r0, #0
    6896:	4994      	ldr	r1, [pc, #592]	; (6ae8 <__ieee754_pow+0xa10>)
    6898:	f001 ffbe 	bl	8818 <__aeabi_dsub>
    689c:	4643      	mov	r3, r8
    689e:	185b      	adds	r3, r3, r1
    68a0:	151a      	asrs	r2, r3, #20
    68a2:	2a00      	cmp	r2, #0
    68a4:	dc00      	bgt.n	68a8 <__ieee754_pow+0x7d0>
    68a6:	e149      	b.n	6b3c <__ieee754_pow+0xa64>
    68a8:	0019      	movs	r1, r3
    68aa:	9a06      	ldr	r2, [sp, #24]
    68ac:	9b07      	ldr	r3, [sp, #28]
    68ae:	f001 fd33 	bl	8318 <__aeabi_dmul>
    68b2:	e459      	b.n	6168 <__ieee754_pow+0x90>
    68b4:	003a      	movs	r2, r7
    68b6:	0033      	movs	r3, r6
    68b8:	0038      	movs	r0, r7
    68ba:	0031      	movs	r1, r6
    68bc:	f001 fd2c 	bl	8318 <__aeabi_dmul>
    68c0:	e452      	b.n	6168 <__ieee754_pow+0x90>
    68c2:	4653      	mov	r3, sl
    68c4:	2b00      	cmp	r3, #0
    68c6:	db00      	blt.n	68ca <__ieee754_pow+0x7f2>
    68c8:	e4d9      	b.n	627e <__ieee754_pow+0x1a6>
    68ca:	9c00      	ldr	r4, [sp, #0]
    68cc:	9d01      	ldr	r5, [sp, #4]
    68ce:	2280      	movs	r2, #128	; 0x80
    68d0:	0612      	lsls	r2, r2, #24
    68d2:	002b      	movs	r3, r5
    68d4:	4694      	mov	ip, r2
    68d6:	4463      	add	r3, ip
    68d8:	0020      	movs	r0, r4
    68da:	0019      	movs	r1, r3
    68dc:	f7ff fc44 	bl	6168 <__ieee754_pow+0x90>
    68e0:	004b      	lsls	r3, r1, #1
    68e2:	085b      	lsrs	r3, r3, #1
    68e4:	469a      	mov	sl, r3
    68e6:	4b81      	ldr	r3, [pc, #516]	; (6aec <__ieee754_pow+0xa14>)
    68e8:	459a      	cmp	sl, r3
    68ea:	dc00      	bgt.n	68ee <__ieee754_pow+0x816>
    68ec:	e0b1      	b.n	6a52 <__ieee754_pow+0x97a>
    68ee:	4b80      	ldr	r3, [pc, #512]	; (6af0 <__ieee754_pow+0xa18>)
    68f0:	445b      	add	r3, fp
    68f2:	431a      	orrs	r2, r3
    68f4:	d10c      	bne.n	6910 <__ieee754_pow+0x838>
    68f6:	0032      	movs	r2, r6
    68f8:	003b      	movs	r3, r7
    68fa:	f001 ff8d 	bl	8818 <__aeabi_dsub>
    68fe:	0002      	movs	r2, r0
    6900:	000b      	movs	r3, r1
    6902:	9800      	ldr	r0, [sp, #0]
    6904:	9901      	ldr	r1, [sp, #4]
    6906:	f000 fbd1 	bl	70ac <__aeabi_dcmple>
    690a:	2800      	cmp	r0, #0
    690c:	d100      	bne.n	6910 <__ieee754_pow+0x838>
    690e:	e6ee      	b.n	66ee <__ieee754_pow+0x616>
    6910:	9806      	ldr	r0, [sp, #24]
    6912:	9907      	ldr	r1, [sp, #28]
    6914:	4a77      	ldr	r2, [pc, #476]	; (6af4 <__ieee754_pow+0xa1c>)
    6916:	4b78      	ldr	r3, [pc, #480]	; (6af8 <__ieee754_pow+0xa20>)
    6918:	f001 fcfe 	bl	8318 <__aeabi_dmul>
    691c:	4a75      	ldr	r2, [pc, #468]	; (6af4 <__ieee754_pow+0xa1c>)
    691e:	4b76      	ldr	r3, [pc, #472]	; (6af8 <__ieee754_pow+0xa20>)
    6920:	f001 fcfa 	bl	8318 <__aeabi_dmul>
    6924:	f7ff fc20 	bl	6168 <__ieee754_pow+0x90>
    6928:	2300      	movs	r3, #0
    692a:	4c74      	ldr	r4, [pc, #464]	; (6afc <__ieee754_pow+0xa24>)
    692c:	9306      	str	r3, [sp, #24]
    692e:	9407      	str	r4, [sp, #28]
    6930:	e652      	b.n	65d8 <__ieee754_pow+0x500>
    6932:	0002      	movs	r2, r0
    6934:	000b      	movs	r3, r1
    6936:	2000      	movs	r0, #0
    6938:	496b      	ldr	r1, [pc, #428]	; (6ae8 <__ieee754_pow+0xa10>)
    693a:	f001 f8b9 	bl	7ab0 <__aeabi_ddiv>
    693e:	f7ff fc32 	bl	61a6 <__ieee754_pow+0xce>
    6942:	4653      	mov	r3, sl
    6944:	2b00      	cmp	r3, #0
    6946:	db00      	blt.n	694a <__ieee754_pow+0x872>
    6948:	e499      	b.n	627e <__ieee754_pow+0x1a6>
    694a:	e454      	b.n	61f6 <__ieee754_pow+0x11e>
    694c:	4b6c      	ldr	r3, [pc, #432]	; (6b00 <__ieee754_pow+0xa28>)
    694e:	429c      	cmp	r4, r3
    6950:	ddf7      	ble.n	6942 <__ieee754_pow+0x86a>
    6952:	4b65      	ldr	r3, [pc, #404]	; (6ae8 <__ieee754_pow+0xa10>)
    6954:	429c      	cmp	r4, r3
    6956:	dd00      	ble.n	695a <__ieee754_pow+0x882>
    6958:	e44a      	b.n	61f0 <__ieee754_pow+0x118>
    695a:	2200      	movs	r2, #0
    695c:	4b62      	ldr	r3, [pc, #392]	; (6ae8 <__ieee754_pow+0xa10>)
    695e:	f001 ff5b 	bl	8818 <__aeabi_dsub>
    6962:	22c0      	movs	r2, #192	; 0xc0
    6964:	4b67      	ldr	r3, [pc, #412]	; (6b04 <__ieee754_pow+0xa2c>)
    6966:	05d2      	lsls	r2, r2, #23
    6968:	0004      	movs	r4, r0
    696a:	000d      	movs	r5, r1
    696c:	f001 fcd4 	bl	8318 <__aeabi_dmul>
    6970:	4a65      	ldr	r2, [pc, #404]	; (6b08 <__ieee754_pow+0xa30>)
    6972:	0006      	movs	r6, r0
    6974:	000f      	movs	r7, r1
    6976:	4b65      	ldr	r3, [pc, #404]	; (6b0c <__ieee754_pow+0xa34>)
    6978:	0020      	movs	r0, r4
    697a:	0029      	movs	r1, r5
    697c:	f001 fccc 	bl	8318 <__aeabi_dmul>
    6980:	2200      	movs	r2, #0
    6982:	9002      	str	r0, [sp, #8]
    6984:	9103      	str	r1, [sp, #12]
    6986:	4b62      	ldr	r3, [pc, #392]	; (6b10 <__ieee754_pow+0xa38>)
    6988:	0020      	movs	r0, r4
    698a:	0029      	movs	r1, r5
    698c:	f001 fcc4 	bl	8318 <__aeabi_dmul>
    6990:	0002      	movs	r2, r0
    6992:	000b      	movs	r3, r1
    6994:	485f      	ldr	r0, [pc, #380]	; (6b14 <__ieee754_pow+0xa3c>)
    6996:	4960      	ldr	r1, [pc, #384]	; (6b18 <__ieee754_pow+0xa40>)
    6998:	f001 ff3e 	bl	8818 <__aeabi_dsub>
    699c:	0022      	movs	r2, r4
    699e:	002b      	movs	r3, r5
    69a0:	f001 fcba 	bl	8318 <__aeabi_dmul>
    69a4:	0002      	movs	r2, r0
    69a6:	000b      	movs	r3, r1
    69a8:	2000      	movs	r0, #0
    69aa:	495c      	ldr	r1, [pc, #368]	; (6b1c <__ieee754_pow+0xa44>)
    69ac:	f001 ff34 	bl	8818 <__aeabi_dsub>
    69b0:	0022      	movs	r2, r4
    69b2:	9004      	str	r0, [sp, #16]
    69b4:	9105      	str	r1, [sp, #20]
    69b6:	002b      	movs	r3, r5
    69b8:	0020      	movs	r0, r4
    69ba:	0029      	movs	r1, r5
    69bc:	f001 fcac 	bl	8318 <__aeabi_dmul>
    69c0:	0002      	movs	r2, r0
    69c2:	000b      	movs	r3, r1
    69c4:	9804      	ldr	r0, [sp, #16]
    69c6:	9905      	ldr	r1, [sp, #20]
    69c8:	f001 fca6 	bl	8318 <__aeabi_dmul>
    69cc:	4a54      	ldr	r2, [pc, #336]	; (6b20 <__ieee754_pow+0xa48>)
    69ce:	4b4d      	ldr	r3, [pc, #308]	; (6b04 <__ieee754_pow+0xa2c>)
    69d0:	f001 fca2 	bl	8318 <__aeabi_dmul>
    69d4:	0002      	movs	r2, r0
    69d6:	000b      	movs	r3, r1
    69d8:	9802      	ldr	r0, [sp, #8]
    69da:	9903      	ldr	r1, [sp, #12]
    69dc:	f001 ff1c 	bl	8818 <__aeabi_dsub>
    69e0:	0002      	movs	r2, r0
    69e2:	000b      	movs	r3, r1
    69e4:	0004      	movs	r4, r0
    69e6:	000d      	movs	r5, r1
    69e8:	0030      	movs	r0, r6
    69ea:	0039      	movs	r1, r7
    69ec:	f000 fd50 	bl	7490 <__aeabi_dadd>
    69f0:	2000      	movs	r0, #0
    69f2:	0032      	movs	r2, r6
    69f4:	003b      	movs	r3, r7
    69f6:	9002      	str	r0, [sp, #8]
    69f8:	9103      	str	r1, [sp, #12]
    69fa:	f001 ff0d 	bl	8818 <__aeabi_dsub>
    69fe:	0002      	movs	r2, r0
    6a00:	000b      	movs	r3, r1
    6a02:	0020      	movs	r0, r4
    6a04:	0029      	movs	r1, r5
    6a06:	f001 ff07 	bl	8818 <__aeabi_dsub>
    6a0a:	9004      	str	r0, [sp, #16]
    6a0c:	9105      	str	r1, [sp, #20]
    6a0e:	e5d9      	b.n	65c4 <__ieee754_pow+0x4ec>
    6a10:	4a44      	ldr	r2, [pc, #272]	; (6b24 <__ieee754_pow+0xa4c>)
    6a12:	4b45      	ldr	r3, [pc, #276]	; (6b28 <__ieee754_pow+0xa50>)
    6a14:	9806      	ldr	r0, [sp, #24]
    6a16:	9907      	ldr	r1, [sp, #28]
    6a18:	f001 fc7e 	bl	8318 <__aeabi_dmul>
    6a1c:	4a41      	ldr	r2, [pc, #260]	; (6b24 <__ieee754_pow+0xa4c>)
    6a1e:	4b42      	ldr	r3, [pc, #264]	; (6b28 <__ieee754_pow+0xa50>)
    6a20:	f001 fc7a 	bl	8318 <__aeabi_dmul>
    6a24:	f7ff fba0 	bl	6168 <__ieee754_pow+0x90>
    6a28:	2a00      	cmp	r2, #0
    6a2a:	d001      	beq.n	6a30 <__ieee754_pow+0x958>
    6a2c:	f7ff fba9 	bl	6182 <__ieee754_pow+0xaa>
    6a30:	3214      	adds	r2, #20
    6a32:	1ad3      	subs	r3, r2, r3
    6a34:	002a      	movs	r2, r5
    6a36:	411a      	asrs	r2, r3
    6a38:	0011      	movs	r1, r2
    6a3a:	4099      	lsls	r1, r3
    6a3c:	428d      	cmp	r5, r1
    6a3e:	d001      	beq.n	6a44 <__ieee754_pow+0x96c>
    6a40:	f7ff fb76 	bl	6130 <__ieee754_pow+0x58>
    6a44:	2301      	movs	r3, #1
    6a46:	401a      	ands	r2, r3
    6a48:	18db      	adds	r3, r3, r3
    6a4a:	1a9b      	subs	r3, r3, r2
    6a4c:	469b      	mov	fp, r3
    6a4e:	f7ff fb6f 	bl	6130 <__ieee754_pow+0x58>
    6a52:	2200      	movs	r2, #0
    6a54:	4b31      	ldr	r3, [pc, #196]	; (6b1c <__ieee754_pow+0xa44>)
    6a56:	4690      	mov	r8, r2
    6a58:	4691      	mov	r9, r2
    6a5a:	459a      	cmp	sl, r3
    6a5c:	dc00      	bgt.n	6a60 <__ieee754_pow+0x988>
    6a5e:	e67b      	b.n	6758 <__ieee754_pow+0x680>
    6a60:	e645      	b.n	66ee <__ieee754_pow+0x616>
    6a62:	0002      	movs	r2, r0
    6a64:	000b      	movs	r3, r1
    6a66:	f001 fed7 	bl	8818 <__aeabi_dsub>
    6a6a:	0002      	movs	r2, r0
    6a6c:	000b      	movs	r3, r1
    6a6e:	f001 f81f 	bl	7ab0 <__aeabi_ddiv>
    6a72:	f7ff fb79 	bl	6168 <__ieee754_pow+0x90>
    6a76:	2380      	movs	r3, #128	; 0x80
    6a78:	4c2c      	ldr	r4, [pc, #176]	; (6b2c <__ieee754_pow+0xa54>)
    6a7a:	05db      	lsls	r3, r3, #23
    6a7c:	9308      	str	r3, [sp, #32]
    6a7e:	9409      	str	r4, [sp, #36]	; 0x24
    6a80:	4b2b      	ldr	r3, [pc, #172]	; (6b30 <__ieee754_pow+0xa58>)
    6a82:	4c2c      	ldr	r4, [pc, #176]	; (6b34 <__ieee754_pow+0xa5c>)
    6a84:	2200      	movs	r2, #0
    6a86:	930c      	str	r3, [sp, #48]	; 0x30
    6a88:	940d      	str	r4, [sp, #52]	; 0x34
    6a8a:	2480      	movs	r4, #128	; 0x80
    6a8c:	4b2a      	ldr	r3, [pc, #168]	; (6b38 <__ieee754_pow+0xa60>)
    6a8e:	02e4      	lsls	r4, r4, #11
    6a90:	9206      	str	r2, [sp, #24]
    6a92:	9307      	str	r3, [sp, #28]
    6a94:	e449      	b.n	632a <__ieee754_pow+0x252>
    6a96:	464b      	mov	r3, r9
    6a98:	425b      	negs	r3, r3
    6a9a:	4699      	mov	r9, r3
    6a9c:	e64a      	b.n	6734 <__ieee754_pow+0x65c>
    6a9e:	46c0      	nop			; (mov r8, r8)
    6aa0:	fffffc02 	.word	0xfffffc02
    6aa4:	fffffc01 	.word	0xfffffc01
    6aa8:	000fffff 	.word	0x000fffff
    6aac:	3fe62e43 	.word	0x3fe62e43
    6ab0:	fefa39ef 	.word	0xfefa39ef
    6ab4:	3fe62e42 	.word	0x3fe62e42
    6ab8:	0ca86c39 	.word	0x0ca86c39
    6abc:	be205c61 	.word	0xbe205c61
    6ac0:	72bea4d0 	.word	0x72bea4d0
    6ac4:	3e663769 	.word	0x3e663769
    6ac8:	c5d26bf1 	.word	0xc5d26bf1
    6acc:	3ebbbd41 	.word	0x3ebbbd41
    6ad0:	af25de2c 	.word	0xaf25de2c
    6ad4:	3f11566a 	.word	0x3f11566a
    6ad8:	16bebd93 	.word	0x16bebd93
    6adc:	3f66c16c 	.word	0x3f66c16c
    6ae0:	5555553e 	.word	0x5555553e
    6ae4:	3fc55555 	.word	0x3fc55555
    6ae8:	3ff00000 	.word	0x3ff00000
    6aec:	4090cbff 	.word	0x4090cbff
    6af0:	3f6f3400 	.word	0x3f6f3400
    6af4:	c2f8f359 	.word	0xc2f8f359
    6af8:	01a56e1f 	.word	0x01a56e1f
    6afc:	bff00000 	.word	0xbff00000
    6b00:	3feffffe 	.word	0x3feffffe
    6b04:	3ff71547 	.word	0x3ff71547
    6b08:	f85ddf44 	.word	0xf85ddf44
    6b0c:	3e54ae0b 	.word	0x3e54ae0b
    6b10:	3fd00000 	.word	0x3fd00000
    6b14:	55555555 	.word	0x55555555
    6b18:	3fd55555 	.word	0x3fd55555
    6b1c:	3fe00000 	.word	0x3fe00000
    6b20:	652b82fe 	.word	0x652b82fe
    6b24:	8800759c 	.word	0x8800759c
    6b28:	7e37e43c 	.word	0x7e37e43c
    6b2c:	3fe2b803 	.word	0x3fe2b803
    6b30:	43cfd006 	.word	0x43cfd006
    6b34:	3e4cfdeb 	.word	0x3e4cfdeb
    6b38:	3ff80000 	.word	0x3ff80000
    6b3c:	464a      	mov	r2, r9
    6b3e:	f000 f999 	bl	6e74 <scalbn>
    6b42:	e6b2      	b.n	68aa <__ieee754_pow+0x7d2>

00006b44 <__ieee754_sqrt>:
    6b44:	4b6c      	ldr	r3, [pc, #432]	; (6cf8 <__ieee754_sqrt+0x1b4>)
    6b46:	b5f0      	push	{r4, r5, r6, r7, lr}
    6b48:	000a      	movs	r2, r1
    6b4a:	4646      	mov	r6, r8
    6b4c:	000d      	movs	r5, r1
    6b4e:	46d6      	mov	lr, sl
    6b50:	464f      	mov	r7, r9
    6b52:	0019      	movs	r1, r3
    6b54:	b5c0      	push	{r6, r7, lr}
    6b56:	0004      	movs	r4, r0
    6b58:	0006      	movs	r6, r0
    6b5a:	4029      	ands	r1, r5
    6b5c:	4299      	cmp	r1, r3
    6b5e:	d100      	bne.n	6b62 <__ieee754_sqrt+0x1e>
    6b60:	e0a7      	b.n	6cb2 <__ieee754_sqrt+0x16e>
    6b62:	2d00      	cmp	r5, #0
    6b64:	dc00      	bgt.n	6b68 <__ieee754_sqrt+0x24>
    6b66:	e081      	b.n	6c6c <__ieee754_sqrt+0x128>
    6b68:	152f      	asrs	r7, r5, #20
    6b6a:	d100      	bne.n	6b6e <__ieee754_sqrt+0x2a>
    6b6c:	e08e      	b.n	6c8c <__ieee754_sqrt+0x148>
    6b6e:	4b63      	ldr	r3, [pc, #396]	; (6cfc <__ieee754_sqrt+0x1b8>)
    6b70:	0312      	lsls	r2, r2, #12
    6b72:	469c      	mov	ip, r3
    6b74:	2380      	movs	r3, #128	; 0x80
    6b76:	0b12      	lsrs	r2, r2, #12
    6b78:	035b      	lsls	r3, r3, #13
    6b7a:	4467      	add	r7, ip
    6b7c:	431a      	orrs	r2, r3
    6b7e:	07fb      	lsls	r3, r7, #31
    6b80:	d468      	bmi.n	6c54 <__ieee754_sqrt+0x110>
    6b82:	107b      	asrs	r3, r7, #1
    6b84:	469c      	mov	ip, r3
    6b86:	0fe3      	lsrs	r3, r4, #31
    6b88:	189b      	adds	r3, r3, r2
    6b8a:	189b      	adds	r3, r3, r2
    6b8c:	2280      	movs	r2, #128	; 0x80
    6b8e:	2116      	movs	r1, #22
    6b90:	2600      	movs	r6, #0
    6b92:	2500      	movs	r5, #0
    6b94:	0064      	lsls	r4, r4, #1
    6b96:	0392      	lsls	r2, r2, #14
    6b98:	18a8      	adds	r0, r5, r2
    6b9a:	4298      	cmp	r0, r3
    6b9c:	dc02      	bgt.n	6ba4 <__ieee754_sqrt+0x60>
    6b9e:	1885      	adds	r5, r0, r2
    6ba0:	1a1b      	subs	r3, r3, r0
    6ba2:	18b6      	adds	r6, r6, r2
    6ba4:	0fe0      	lsrs	r0, r4, #31
    6ba6:	005b      	lsls	r3, r3, #1
    6ba8:	3901      	subs	r1, #1
    6baa:	181b      	adds	r3, r3, r0
    6bac:	0064      	lsls	r4, r4, #1
    6bae:	0852      	lsrs	r2, r2, #1
    6bb0:	2900      	cmp	r1, #0
    6bb2:	d1f1      	bne.n	6b98 <__ieee754_sqrt+0x54>
    6bb4:	2200      	movs	r2, #0
    6bb6:	4692      	mov	sl, r2
    6bb8:	4690      	mov	r8, r2
    6bba:	2280      	movs	r2, #128	; 0x80
    6bbc:	2020      	movs	r0, #32
    6bbe:	0612      	lsls	r2, r2, #24
    6bc0:	e009      	b.n	6bd6 <__ieee754_sqrt+0x92>
    6bc2:	42ab      	cmp	r3, r5
    6bc4:	d038      	beq.n	6c38 <__ieee754_sqrt+0xf4>
    6bc6:	0fe1      	lsrs	r1, r4, #31
    6bc8:	18c9      	adds	r1, r1, r3
    6bca:	3801      	subs	r0, #1
    6bcc:	18cb      	adds	r3, r1, r3
    6bce:	0064      	lsls	r4, r4, #1
    6bd0:	0852      	lsrs	r2, r2, #1
    6bd2:	2800      	cmp	r0, #0
    6bd4:	d018      	beq.n	6c08 <__ieee754_sqrt+0xc4>
    6bd6:	4641      	mov	r1, r8
    6bd8:	1851      	adds	r1, r2, r1
    6bda:	42ab      	cmp	r3, r5
    6bdc:	ddf1      	ble.n	6bc2 <__ieee754_sqrt+0x7e>
    6bde:	188f      	adds	r7, r1, r2
    6be0:	46b8      	mov	r8, r7
    6be2:	46a9      	mov	r9, r5
    6be4:	2900      	cmp	r1, #0
    6be6:	db30      	blt.n	6c4a <__ieee754_sqrt+0x106>
    6be8:	1b5b      	subs	r3, r3, r5
    6bea:	428c      	cmp	r4, r1
    6bec:	41ad      	sbcs	r5, r5
    6bee:	426d      	negs	r5, r5
    6bf0:	1b5b      	subs	r3, r3, r5
    6bf2:	1a64      	subs	r4, r4, r1
    6bf4:	0fe1      	lsrs	r1, r4, #31
    6bf6:	18c9      	adds	r1, r1, r3
    6bf8:	3801      	subs	r0, #1
    6bfa:	4492      	add	sl, r2
    6bfc:	464d      	mov	r5, r9
    6bfe:	18cb      	adds	r3, r1, r3
    6c00:	0064      	lsls	r4, r4, #1
    6c02:	0852      	lsrs	r2, r2, #1
    6c04:	2800      	cmp	r0, #0
    6c06:	d1e6      	bne.n	6bd6 <__ieee754_sqrt+0x92>
    6c08:	4323      	orrs	r3, r4
    6c0a:	d128      	bne.n	6c5e <__ieee754_sqrt+0x11a>
    6c0c:	4653      	mov	r3, sl
    6c0e:	085b      	lsrs	r3, r3, #1
    6c10:	493b      	ldr	r1, [pc, #236]	; (6d00 <__ieee754_sqrt+0x1bc>)
    6c12:	1072      	asrs	r2, r6, #1
    6c14:	4688      	mov	r8, r1
    6c16:	4442      	add	r2, r8
    6c18:	07f1      	lsls	r1, r6, #31
    6c1a:	d502      	bpl.n	6c22 <__ieee754_sqrt+0xde>
    6c1c:	2180      	movs	r1, #128	; 0x80
    6c1e:	0609      	lsls	r1, r1, #24
    6c20:	430b      	orrs	r3, r1
    6c22:	4661      	mov	r1, ip
    6c24:	001e      	movs	r6, r3
    6c26:	050f      	lsls	r7, r1, #20
    6c28:	18bd      	adds	r5, r7, r2
    6c2a:	0030      	movs	r0, r6
    6c2c:	0029      	movs	r1, r5
    6c2e:	bc1c      	pop	{r2, r3, r4}
    6c30:	4690      	mov	r8, r2
    6c32:	4699      	mov	r9, r3
    6c34:	46a2      	mov	sl, r4
    6c36:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6c38:	42a1      	cmp	r1, r4
    6c3a:	d8c4      	bhi.n	6bc6 <__ieee754_sqrt+0x82>
    6c3c:	188f      	adds	r7, r1, r2
    6c3e:	46b8      	mov	r8, r7
    6c40:	2900      	cmp	r1, #0
    6c42:	db42      	blt.n	6cca <__ieee754_sqrt+0x186>
    6c44:	4699      	mov	r9, r3
    6c46:	2300      	movs	r3, #0
    6c48:	e7d3      	b.n	6bf2 <__ieee754_sqrt+0xae>
    6c4a:	2f00      	cmp	r7, #0
    6c4c:	db2f      	blt.n	6cae <__ieee754_sqrt+0x16a>
    6c4e:	1c6f      	adds	r7, r5, #1
    6c50:	46b9      	mov	r9, r7
    6c52:	e7c9      	b.n	6be8 <__ieee754_sqrt+0xa4>
    6c54:	0fe1      	lsrs	r1, r4, #31
    6c56:	0052      	lsls	r2, r2, #1
    6c58:	188a      	adds	r2, r1, r2
    6c5a:	0064      	lsls	r4, r4, #1
    6c5c:	e791      	b.n	6b82 <__ieee754_sqrt+0x3e>
    6c5e:	4653      	mov	r3, sl
    6c60:	3301      	adds	r3, #1
    6c62:	d035      	beq.n	6cd0 <__ieee754_sqrt+0x18c>
    6c64:	4653      	mov	r3, sl
    6c66:	3301      	adds	r3, #1
    6c68:	085b      	lsrs	r3, r3, #1
    6c6a:	e7d1      	b.n	6c10 <__ieee754_sqrt+0xcc>
    6c6c:	006b      	lsls	r3, r5, #1
    6c6e:	085b      	lsrs	r3, r3, #1
    6c70:	4303      	orrs	r3, r0
    6c72:	d0da      	beq.n	6c2a <__ieee754_sqrt+0xe6>
    6c74:	2700      	movs	r7, #0
    6c76:	2d00      	cmp	r5, #0
    6c78:	d132      	bne.n	6ce0 <__ieee754_sqrt+0x19c>
    6c7a:	0ae2      	lsrs	r2, r4, #11
    6c7c:	3f15      	subs	r7, #21
    6c7e:	0564      	lsls	r4, r4, #21
    6c80:	2a00      	cmp	r2, #0
    6c82:	d0fa      	beq.n	6c7a <__ieee754_sqrt+0x136>
    6c84:	2380      	movs	r3, #128	; 0x80
    6c86:	035b      	lsls	r3, r3, #13
    6c88:	421a      	tst	r2, r3
    6c8a:	d124      	bne.n	6cd6 <__ieee754_sqrt+0x192>
    6c8c:	2080      	movs	r0, #128	; 0x80
    6c8e:	2300      	movs	r3, #0
    6c90:	0340      	lsls	r0, r0, #13
    6c92:	e000      	b.n	6c96 <__ieee754_sqrt+0x152>
    6c94:	000b      	movs	r3, r1
    6c96:	0052      	lsls	r2, r2, #1
    6c98:	1c59      	adds	r1, r3, #1
    6c9a:	4202      	tst	r2, r0
    6c9c:	d0fa      	beq.n	6c94 <__ieee754_sqrt+0x150>
    6c9e:	2020      	movs	r0, #32
    6ca0:	1a40      	subs	r0, r0, r1
    6ca2:	1aff      	subs	r7, r7, r3
    6ca4:	0023      	movs	r3, r4
    6ca6:	40c3      	lsrs	r3, r0
    6ca8:	408c      	lsls	r4, r1
    6caa:	431a      	orrs	r2, r3
    6cac:	e75f      	b.n	6b6e <__ieee754_sqrt+0x2a>
    6cae:	46a9      	mov	r9, r5
    6cb0:	e79a      	b.n	6be8 <__ieee754_sqrt+0xa4>
    6cb2:	002b      	movs	r3, r5
    6cb4:	0002      	movs	r2, r0
    6cb6:	0029      	movs	r1, r5
    6cb8:	f001 fb2e 	bl	8318 <__aeabi_dmul>
    6cbc:	0032      	movs	r2, r6
    6cbe:	002b      	movs	r3, r5
    6cc0:	f000 fbe6 	bl	7490 <__aeabi_dadd>
    6cc4:	0006      	movs	r6, r0
    6cc6:	000d      	movs	r5, r1
    6cc8:	e7af      	b.n	6c2a <__ieee754_sqrt+0xe6>
    6cca:	2f00      	cmp	r7, #0
    6ccc:	dabf      	bge.n	6c4e <__ieee754_sqrt+0x10a>
    6cce:	e7b9      	b.n	6c44 <__ieee754_sqrt+0x100>
    6cd0:	3601      	adds	r6, #1
    6cd2:	2300      	movs	r3, #0
    6cd4:	e79c      	b.n	6c10 <__ieee754_sqrt+0xcc>
    6cd6:	2301      	movs	r3, #1
    6cd8:	2100      	movs	r1, #0
    6cda:	2020      	movs	r0, #32
    6cdc:	425b      	negs	r3, r3
    6cde:	e7e0      	b.n	6ca2 <__ieee754_sqrt+0x15e>
    6ce0:	002b      	movs	r3, r5
    6ce2:	0002      	movs	r2, r0
    6ce4:	0029      	movs	r1, r5
    6ce6:	f001 fd97 	bl	8818 <__aeabi_dsub>
    6cea:	0002      	movs	r2, r0
    6cec:	000b      	movs	r3, r1
    6cee:	f000 fedf 	bl	7ab0 <__aeabi_ddiv>
    6cf2:	0006      	movs	r6, r0
    6cf4:	000d      	movs	r5, r1
    6cf6:	e798      	b.n	6c2a <__ieee754_sqrt+0xe6>
    6cf8:	7ff00000 	.word	0x7ff00000
    6cfc:	fffffc01 	.word	0xfffffc01
    6d00:	3fe00000 	.word	0x3fe00000

00006d04 <fabs>:
    6d04:	0049      	lsls	r1, r1, #1
    6d06:	084b      	lsrs	r3, r1, #1
    6d08:	0019      	movs	r1, r3
    6d0a:	4770      	bx	lr

00006d0c <finite>:
    6d0c:	4b03      	ldr	r3, [pc, #12]	; (6d1c <finite+0x10>)
    6d0e:	0048      	lsls	r0, r1, #1
    6d10:	469c      	mov	ip, r3
    6d12:	0840      	lsrs	r0, r0, #1
    6d14:	4460      	add	r0, ip
    6d16:	0fc0      	lsrs	r0, r0, #31
    6d18:	4770      	bx	lr
    6d1a:	46c0      	nop			; (mov r8, r8)
    6d1c:	80100000 	.word	0x80100000

00006d20 <matherr>:
    6d20:	2000      	movs	r0, #0
    6d22:	4770      	bx	lr

00006d24 <nan>:
    6d24:	2000      	movs	r0, #0
    6d26:	4901      	ldr	r1, [pc, #4]	; (6d2c <nan+0x8>)
    6d28:	4770      	bx	lr
    6d2a:	46c0      	nop			; (mov r8, r8)
    6d2c:	7ff80000 	.word	0x7ff80000

00006d30 <rint>:
    6d30:	b5f0      	push	{r4, r5, r6, r7, lr}
    6d32:	46c6      	mov	lr, r8
    6d34:	b500      	push	{lr}
    6d36:	0fcb      	lsrs	r3, r1, #31
    6d38:	4698      	mov	r8, r3
    6d3a:	4c4a      	ldr	r4, [pc, #296]	; (6e64 <rint+0x134>)
    6d3c:	004b      	lsls	r3, r1, #1
    6d3e:	0d5b      	lsrs	r3, r3, #21
    6d40:	191e      	adds	r6, r3, r4
    6d42:	b082      	sub	sp, #8
    6d44:	0007      	movs	r7, r0
    6d46:	000a      	movs	r2, r1
    6d48:	2e13      	cmp	r6, #19
    6d4a:	dc35      	bgt.n	6db8 <rint+0x88>
    6d4c:	2e00      	cmp	r6, #0
    6d4e:	db57      	blt.n	6e00 <rint+0xd0>
    6d50:	4b45      	ldr	r3, [pc, #276]	; (6e68 <rint+0x138>)
    6d52:	0004      	movs	r4, r0
    6d54:	4133      	asrs	r3, r6
    6d56:	001f      	movs	r7, r3
    6d58:	400f      	ands	r7, r1
    6d5a:	4307      	orrs	r7, r0
    6d5c:	000d      	movs	r5, r1
    6d5e:	2f00      	cmp	r7, #0
    6d60:	d024      	beq.n	6dac <rint+0x7c>
    6d62:	085b      	lsrs	r3, r3, #1
    6d64:	001c      	movs	r4, r3
    6d66:	400c      	ands	r4, r1
    6d68:	4320      	orrs	r0, r4
    6d6a:	2700      	movs	r7, #0
    6d6c:	2800      	cmp	r0, #0
    6d6e:	d007      	beq.n	6d80 <rint+0x50>
    6d70:	2e13      	cmp	r6, #19
    6d72:	d100      	bne.n	6d76 <rint+0x46>
    6d74:	e073      	b.n	6e5e <rint+0x12e>
    6d76:	2280      	movs	r2, #128	; 0x80
    6d78:	02d2      	lsls	r2, r2, #11
    6d7a:	4132      	asrs	r2, r6
    6d7c:	4399      	bics	r1, r3
    6d7e:	430a      	orrs	r2, r1
    6d80:	4643      	mov	r3, r8
    6d82:	00de      	lsls	r6, r3, #3
    6d84:	4b39      	ldr	r3, [pc, #228]	; (6e6c <rint+0x13c>)
    6d86:	0011      	movs	r1, r2
    6d88:	199e      	adds	r6, r3, r6
    6d8a:	6834      	ldr	r4, [r6, #0]
    6d8c:	6875      	ldr	r5, [r6, #4]
    6d8e:	0038      	movs	r0, r7
    6d90:	0022      	movs	r2, r4
    6d92:	002b      	movs	r3, r5
    6d94:	f000 fb7c 	bl	7490 <__aeabi_dadd>
    6d98:	9000      	str	r0, [sp, #0]
    6d9a:	9101      	str	r1, [sp, #4]
    6d9c:	9800      	ldr	r0, [sp, #0]
    6d9e:	9901      	ldr	r1, [sp, #4]
    6da0:	0022      	movs	r2, r4
    6da2:	002b      	movs	r3, r5
    6da4:	f001 fd38 	bl	8818 <__aeabi_dsub>
    6da8:	0004      	movs	r4, r0
    6daa:	000d      	movs	r5, r1
    6dac:	0020      	movs	r0, r4
    6dae:	0029      	movs	r1, r5
    6db0:	b002      	add	sp, #8
    6db2:	bc04      	pop	{r2}
    6db4:	4690      	mov	r8, r2
    6db6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6db8:	2e33      	cmp	r6, #51	; 0x33
    6dba:	dd0c      	ble.n	6dd6 <rint+0xa6>
    6dbc:	2380      	movs	r3, #128	; 0x80
    6dbe:	0004      	movs	r4, r0
    6dc0:	00db      	lsls	r3, r3, #3
    6dc2:	000d      	movs	r5, r1
    6dc4:	429e      	cmp	r6, r3
    6dc6:	d1f1      	bne.n	6dac <rint+0x7c>
    6dc8:	0002      	movs	r2, r0
    6dca:	000b      	movs	r3, r1
    6dcc:	f000 fb60 	bl	7490 <__aeabi_dadd>
    6dd0:	0004      	movs	r4, r0
    6dd2:	000d      	movs	r5, r1
    6dd4:	e7ea      	b.n	6dac <rint+0x7c>
    6dd6:	4c26      	ldr	r4, [pc, #152]	; (6e70 <rint+0x140>)
    6dd8:	000d      	movs	r5, r1
    6dda:	46a4      	mov	ip, r4
    6ddc:	2401      	movs	r4, #1
    6dde:	4463      	add	r3, ip
    6de0:	4264      	negs	r4, r4
    6de2:	40dc      	lsrs	r4, r3
    6de4:	46a4      	mov	ip, r4
    6de6:	4661      	mov	r1, ip
    6de8:	0004      	movs	r4, r0
    6dea:	4201      	tst	r1, r0
    6dec:	d0de      	beq.n	6dac <rint+0x7c>
    6dee:	0849      	lsrs	r1, r1, #1
    6df0:	4201      	tst	r1, r0
    6df2:	d0c5      	beq.n	6d80 <rint+0x50>
    6df4:	2780      	movs	r7, #128	; 0x80
    6df6:	05ff      	lsls	r7, r7, #23
    6df8:	411f      	asrs	r7, r3
    6dfa:	4388      	bics	r0, r1
    6dfc:	4307      	orrs	r7, r0
    6dfe:	e7bf      	b.n	6d80 <rint+0x50>
    6e00:	004b      	lsls	r3, r1, #1
    6e02:	085b      	lsrs	r3, r3, #1
    6e04:	4303      	orrs	r3, r0
    6e06:	0004      	movs	r4, r0
    6e08:	000d      	movs	r5, r1
    6e0a:	2b00      	cmp	r3, #0
    6e0c:	d0ce      	beq.n	6dac <rint+0x7c>
    6e0e:	030b      	lsls	r3, r1, #12
    6e10:	0b1b      	lsrs	r3, r3, #12
    6e12:	4303      	orrs	r3, r0
    6e14:	001a      	movs	r2, r3
    6e16:	425b      	negs	r3, r3
    6e18:	4313      	orrs	r3, r2
    6e1a:	2280      	movs	r2, #128	; 0x80
    6e1c:	0b1b      	lsrs	r3, r3, #12
    6e1e:	0312      	lsls	r2, r2, #12
    6e20:	4013      	ands	r3, r2
    6e22:	0c4a      	lsrs	r2, r1, #17
    6e24:	0452      	lsls	r2, r2, #17
    6e26:	4313      	orrs	r3, r2
    6e28:	0019      	movs	r1, r3
    6e2a:	4643      	mov	r3, r8
    6e2c:	00da      	lsls	r2, r3, #3
    6e2e:	4b0f      	ldr	r3, [pc, #60]	; (6e6c <rint+0x13c>)
    6e30:	189b      	adds	r3, r3, r2
    6e32:	681c      	ldr	r4, [r3, #0]
    6e34:	685d      	ldr	r5, [r3, #4]
    6e36:	0022      	movs	r2, r4
    6e38:	002b      	movs	r3, r5
    6e3a:	f000 fb29 	bl	7490 <__aeabi_dadd>
    6e3e:	9000      	str	r0, [sp, #0]
    6e40:	9101      	str	r1, [sp, #4]
    6e42:	9800      	ldr	r0, [sp, #0]
    6e44:	9901      	ldr	r1, [sp, #4]
    6e46:	0022      	movs	r2, r4
    6e48:	002b      	movs	r3, r5
    6e4a:	f001 fce5 	bl	8818 <__aeabi_dsub>
    6e4e:	4642      	mov	r2, r8
    6e50:	004b      	lsls	r3, r1, #1
    6e52:	085b      	lsrs	r3, r3, #1
    6e54:	07d6      	lsls	r6, r2, #31
    6e56:	4333      	orrs	r3, r6
    6e58:	0004      	movs	r4, r0
    6e5a:	001d      	movs	r5, r3
    6e5c:	e7a6      	b.n	6dac <rint+0x7c>
    6e5e:	2780      	movs	r7, #128	; 0x80
    6e60:	063f      	lsls	r7, r7, #24
    6e62:	e788      	b.n	6d76 <rint+0x46>
    6e64:	fffffc01 	.word	0xfffffc01
    6e68:	000fffff 	.word	0x000fffff
    6e6c:	00009ce0 	.word	0x00009ce0
    6e70:	fffffbed 	.word	0xfffffbed

00006e74 <scalbn>:
    6e74:	004b      	lsls	r3, r1, #1
    6e76:	b570      	push	{r4, r5, r6, lr}
    6e78:	0d5b      	lsrs	r3, r3, #21
    6e7a:	0014      	movs	r4, r2
    6e7c:	000a      	movs	r2, r1
    6e7e:	2b00      	cmp	r3, #0
    6e80:	d11a      	bne.n	6eb8 <scalbn+0x44>
    6e82:	004b      	lsls	r3, r1, #1
    6e84:	085b      	lsrs	r3, r3, #1
    6e86:	4303      	orrs	r3, r0
    6e88:	d015      	beq.n	6eb6 <scalbn+0x42>
    6e8a:	2200      	movs	r2, #0
    6e8c:	4b22      	ldr	r3, [pc, #136]	; (6f18 <scalbn+0xa4>)
    6e8e:	f001 fa43 	bl	8318 <__aeabi_dmul>
    6e92:	4b22      	ldr	r3, [pc, #136]	; (6f1c <scalbn+0xa8>)
    6e94:	000a      	movs	r2, r1
    6e96:	429c      	cmp	r4, r3
    6e98:	db22      	blt.n	6ee0 <scalbn+0x6c>
    6e9a:	004b      	lsls	r3, r1, #1
    6e9c:	0d5b      	lsrs	r3, r3, #21
    6e9e:	3b36      	subs	r3, #54	; 0x36
    6ea0:	4d1f      	ldr	r5, [pc, #124]	; (6f20 <scalbn+0xac>)
    6ea2:	18e3      	adds	r3, r4, r3
    6ea4:	42ab      	cmp	r3, r5
    6ea6:	dc20      	bgt.n	6eea <scalbn+0x76>
    6ea8:	2b00      	cmp	r3, #0
    6eaa:	dd0d      	ble.n	6ec8 <scalbn+0x54>
    6eac:	4c1d      	ldr	r4, [pc, #116]	; (6f24 <scalbn+0xb0>)
    6eae:	051b      	lsls	r3, r3, #20
    6eb0:	4022      	ands	r2, r4
    6eb2:	431a      	orrs	r2, r3
    6eb4:	0011      	movs	r1, r2
    6eb6:	bd70      	pop	{r4, r5, r6, pc}
    6eb8:	4d1b      	ldr	r5, [pc, #108]	; (6f28 <scalbn+0xb4>)
    6eba:	42ab      	cmp	r3, r5
    6ebc:	d1f0      	bne.n	6ea0 <scalbn+0x2c>
    6ebe:	0002      	movs	r2, r0
    6ec0:	000b      	movs	r3, r1
    6ec2:	f000 fae5 	bl	7490 <__aeabi_dadd>
    6ec6:	e7f6      	b.n	6eb6 <scalbn+0x42>
    6ec8:	001d      	movs	r5, r3
    6eca:	3535      	adds	r5, #53	; 0x35
    6ecc:	da18      	bge.n	6f00 <scalbn+0x8c>
    6ece:	4b17      	ldr	r3, [pc, #92]	; (6f2c <scalbn+0xb8>)
    6ed0:	0002      	movs	r2, r0
    6ed2:	429c      	cmp	r4, r3
    6ed4:	dc0a      	bgt.n	6eec <scalbn+0x78>
    6ed6:	000b      	movs	r3, r1
    6ed8:	4815      	ldr	r0, [pc, #84]	; (6f30 <scalbn+0xbc>)
    6eda:	4916      	ldr	r1, [pc, #88]	; (6f34 <scalbn+0xc0>)
    6edc:	f000 f832 	bl	6f44 <copysign>
    6ee0:	4a13      	ldr	r2, [pc, #76]	; (6f30 <scalbn+0xbc>)
    6ee2:	4b14      	ldr	r3, [pc, #80]	; (6f34 <scalbn+0xc0>)
    6ee4:	f001 fa18 	bl	8318 <__aeabi_dmul>
    6ee8:	e7e5      	b.n	6eb6 <scalbn+0x42>
    6eea:	0002      	movs	r2, r0
    6eec:	000b      	movs	r3, r1
    6eee:	4812      	ldr	r0, [pc, #72]	; (6f38 <scalbn+0xc4>)
    6ef0:	4912      	ldr	r1, [pc, #72]	; (6f3c <scalbn+0xc8>)
    6ef2:	f000 f827 	bl	6f44 <copysign>
    6ef6:	4a10      	ldr	r2, [pc, #64]	; (6f38 <scalbn+0xc4>)
    6ef8:	4b10      	ldr	r3, [pc, #64]	; (6f3c <scalbn+0xc8>)
    6efa:	f001 fa0d 	bl	8318 <__aeabi_dmul>
    6efe:	e7da      	b.n	6eb6 <scalbn+0x42>
    6f00:	4c08      	ldr	r4, [pc, #32]	; (6f24 <scalbn+0xb0>)
    6f02:	3336      	adds	r3, #54	; 0x36
    6f04:	4022      	ands	r2, r4
    6f06:	051b      	lsls	r3, r3, #20
    6f08:	4313      	orrs	r3, r2
    6f0a:	0019      	movs	r1, r3
    6f0c:	2200      	movs	r2, #0
    6f0e:	4b0c      	ldr	r3, [pc, #48]	; (6f40 <scalbn+0xcc>)
    6f10:	f001 fa02 	bl	8318 <__aeabi_dmul>
    6f14:	e7cf      	b.n	6eb6 <scalbn+0x42>
    6f16:	46c0      	nop			; (mov r8, r8)
    6f18:	43500000 	.word	0x43500000
    6f1c:	ffff3cb0 	.word	0xffff3cb0
    6f20:	000007fe 	.word	0x000007fe
    6f24:	800fffff 	.word	0x800fffff
    6f28:	000007ff 	.word	0x000007ff
    6f2c:	0000c350 	.word	0x0000c350
    6f30:	c2f8f359 	.word	0xc2f8f359
    6f34:	01a56e1f 	.word	0x01a56e1f
    6f38:	8800759c 	.word	0x8800759c
    6f3c:	7e37e43c 	.word	0x7e37e43c
    6f40:	3c900000 	.word	0x3c900000

00006f44 <copysign>:
    6f44:	b530      	push	{r4, r5, lr}
    6f46:	004a      	lsls	r2, r1, #1
    6f48:	0fdb      	lsrs	r3, r3, #31
    6f4a:	07db      	lsls	r3, r3, #31
    6f4c:	0852      	lsrs	r2, r2, #1
    6f4e:	431a      	orrs	r2, r3
    6f50:	0011      	movs	r1, r2
    6f52:	bd30      	pop	{r4, r5, pc}

00006f54 <__udivsi3>:
    6f54:	2200      	movs	r2, #0
    6f56:	0843      	lsrs	r3, r0, #1
    6f58:	428b      	cmp	r3, r1
    6f5a:	d374      	bcc.n	7046 <__udivsi3+0xf2>
    6f5c:	0903      	lsrs	r3, r0, #4
    6f5e:	428b      	cmp	r3, r1
    6f60:	d35f      	bcc.n	7022 <__udivsi3+0xce>
    6f62:	0a03      	lsrs	r3, r0, #8
    6f64:	428b      	cmp	r3, r1
    6f66:	d344      	bcc.n	6ff2 <__udivsi3+0x9e>
    6f68:	0b03      	lsrs	r3, r0, #12
    6f6a:	428b      	cmp	r3, r1
    6f6c:	d328      	bcc.n	6fc0 <__udivsi3+0x6c>
    6f6e:	0c03      	lsrs	r3, r0, #16
    6f70:	428b      	cmp	r3, r1
    6f72:	d30d      	bcc.n	6f90 <__udivsi3+0x3c>
    6f74:	22ff      	movs	r2, #255	; 0xff
    6f76:	0209      	lsls	r1, r1, #8
    6f78:	ba12      	rev	r2, r2
    6f7a:	0c03      	lsrs	r3, r0, #16
    6f7c:	428b      	cmp	r3, r1
    6f7e:	d302      	bcc.n	6f86 <__udivsi3+0x32>
    6f80:	1212      	asrs	r2, r2, #8
    6f82:	0209      	lsls	r1, r1, #8
    6f84:	d065      	beq.n	7052 <__udivsi3+0xfe>
    6f86:	0b03      	lsrs	r3, r0, #12
    6f88:	428b      	cmp	r3, r1
    6f8a:	d319      	bcc.n	6fc0 <__udivsi3+0x6c>
    6f8c:	e000      	b.n	6f90 <__udivsi3+0x3c>
    6f8e:	0a09      	lsrs	r1, r1, #8
    6f90:	0bc3      	lsrs	r3, r0, #15
    6f92:	428b      	cmp	r3, r1
    6f94:	d301      	bcc.n	6f9a <__udivsi3+0x46>
    6f96:	03cb      	lsls	r3, r1, #15
    6f98:	1ac0      	subs	r0, r0, r3
    6f9a:	4152      	adcs	r2, r2
    6f9c:	0b83      	lsrs	r3, r0, #14
    6f9e:	428b      	cmp	r3, r1
    6fa0:	d301      	bcc.n	6fa6 <__udivsi3+0x52>
    6fa2:	038b      	lsls	r3, r1, #14
    6fa4:	1ac0      	subs	r0, r0, r3
    6fa6:	4152      	adcs	r2, r2
    6fa8:	0b43      	lsrs	r3, r0, #13
    6faa:	428b      	cmp	r3, r1
    6fac:	d301      	bcc.n	6fb2 <__udivsi3+0x5e>
    6fae:	034b      	lsls	r3, r1, #13
    6fb0:	1ac0      	subs	r0, r0, r3
    6fb2:	4152      	adcs	r2, r2
    6fb4:	0b03      	lsrs	r3, r0, #12
    6fb6:	428b      	cmp	r3, r1
    6fb8:	d301      	bcc.n	6fbe <__udivsi3+0x6a>
    6fba:	030b      	lsls	r3, r1, #12
    6fbc:	1ac0      	subs	r0, r0, r3
    6fbe:	4152      	adcs	r2, r2
    6fc0:	0ac3      	lsrs	r3, r0, #11
    6fc2:	428b      	cmp	r3, r1
    6fc4:	d301      	bcc.n	6fca <__udivsi3+0x76>
    6fc6:	02cb      	lsls	r3, r1, #11
    6fc8:	1ac0      	subs	r0, r0, r3
    6fca:	4152      	adcs	r2, r2
    6fcc:	0a83      	lsrs	r3, r0, #10
    6fce:	428b      	cmp	r3, r1
    6fd0:	d301      	bcc.n	6fd6 <__udivsi3+0x82>
    6fd2:	028b      	lsls	r3, r1, #10
    6fd4:	1ac0      	subs	r0, r0, r3
    6fd6:	4152      	adcs	r2, r2
    6fd8:	0a43      	lsrs	r3, r0, #9
    6fda:	428b      	cmp	r3, r1
    6fdc:	d301      	bcc.n	6fe2 <__udivsi3+0x8e>
    6fde:	024b      	lsls	r3, r1, #9
    6fe0:	1ac0      	subs	r0, r0, r3
    6fe2:	4152      	adcs	r2, r2
    6fe4:	0a03      	lsrs	r3, r0, #8
    6fe6:	428b      	cmp	r3, r1
    6fe8:	d301      	bcc.n	6fee <__udivsi3+0x9a>
    6fea:	020b      	lsls	r3, r1, #8
    6fec:	1ac0      	subs	r0, r0, r3
    6fee:	4152      	adcs	r2, r2
    6ff0:	d2cd      	bcs.n	6f8e <__udivsi3+0x3a>
    6ff2:	09c3      	lsrs	r3, r0, #7
    6ff4:	428b      	cmp	r3, r1
    6ff6:	d301      	bcc.n	6ffc <__udivsi3+0xa8>
    6ff8:	01cb      	lsls	r3, r1, #7
    6ffa:	1ac0      	subs	r0, r0, r3
    6ffc:	4152      	adcs	r2, r2
    6ffe:	0983      	lsrs	r3, r0, #6
    7000:	428b      	cmp	r3, r1
    7002:	d301      	bcc.n	7008 <__udivsi3+0xb4>
    7004:	018b      	lsls	r3, r1, #6
    7006:	1ac0      	subs	r0, r0, r3
    7008:	4152      	adcs	r2, r2
    700a:	0943      	lsrs	r3, r0, #5
    700c:	428b      	cmp	r3, r1
    700e:	d301      	bcc.n	7014 <__udivsi3+0xc0>
    7010:	014b      	lsls	r3, r1, #5
    7012:	1ac0      	subs	r0, r0, r3
    7014:	4152      	adcs	r2, r2
    7016:	0903      	lsrs	r3, r0, #4
    7018:	428b      	cmp	r3, r1
    701a:	d301      	bcc.n	7020 <__udivsi3+0xcc>
    701c:	010b      	lsls	r3, r1, #4
    701e:	1ac0      	subs	r0, r0, r3
    7020:	4152      	adcs	r2, r2
    7022:	08c3      	lsrs	r3, r0, #3
    7024:	428b      	cmp	r3, r1
    7026:	d301      	bcc.n	702c <__udivsi3+0xd8>
    7028:	00cb      	lsls	r3, r1, #3
    702a:	1ac0      	subs	r0, r0, r3
    702c:	4152      	adcs	r2, r2
    702e:	0883      	lsrs	r3, r0, #2
    7030:	428b      	cmp	r3, r1
    7032:	d301      	bcc.n	7038 <__udivsi3+0xe4>
    7034:	008b      	lsls	r3, r1, #2
    7036:	1ac0      	subs	r0, r0, r3
    7038:	4152      	adcs	r2, r2
    703a:	0843      	lsrs	r3, r0, #1
    703c:	428b      	cmp	r3, r1
    703e:	d301      	bcc.n	7044 <__udivsi3+0xf0>
    7040:	004b      	lsls	r3, r1, #1
    7042:	1ac0      	subs	r0, r0, r3
    7044:	4152      	adcs	r2, r2
    7046:	1a41      	subs	r1, r0, r1
    7048:	d200      	bcs.n	704c <__udivsi3+0xf8>
    704a:	4601      	mov	r1, r0
    704c:	4152      	adcs	r2, r2
    704e:	4610      	mov	r0, r2
    7050:	4770      	bx	lr
    7052:	e7ff      	b.n	7054 <__udivsi3+0x100>
    7054:	b501      	push	{r0, lr}
    7056:	2000      	movs	r0, #0
    7058:	f000 f806 	bl	7068 <__aeabi_idiv0>
    705c:	bd02      	pop	{r1, pc}
    705e:	46c0      	nop			; (mov r8, r8)

00007060 <__aeabi_uidivmod>:
    7060:	2900      	cmp	r1, #0
    7062:	d0f7      	beq.n	7054 <__udivsi3+0x100>
    7064:	e776      	b.n	6f54 <__udivsi3>
    7066:	4770      	bx	lr

00007068 <__aeabi_idiv0>:
    7068:	4770      	bx	lr
    706a:	46c0      	nop			; (mov r8, r8)

0000706c <__aeabi_cdrcmple>:
    706c:	4684      	mov	ip, r0
    706e:	1c10      	adds	r0, r2, #0
    7070:	4662      	mov	r2, ip
    7072:	468c      	mov	ip, r1
    7074:	1c19      	adds	r1, r3, #0
    7076:	4663      	mov	r3, ip
    7078:	e000      	b.n	707c <__aeabi_cdcmpeq>
    707a:	46c0      	nop			; (mov r8, r8)

0000707c <__aeabi_cdcmpeq>:
    707c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    707e:	f001 f8e9 	bl	8254 <__ledf2>
    7082:	2800      	cmp	r0, #0
    7084:	d401      	bmi.n	708a <__aeabi_cdcmpeq+0xe>
    7086:	2100      	movs	r1, #0
    7088:	42c8      	cmn	r0, r1
    708a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0000708c <__aeabi_dcmpeq>:
    708c:	b510      	push	{r4, lr}
    708e:	f001 f843 	bl	8118 <__eqdf2>
    7092:	4240      	negs	r0, r0
    7094:	3001      	adds	r0, #1
    7096:	bd10      	pop	{r4, pc}

00007098 <__aeabi_dcmplt>:
    7098:	b510      	push	{r4, lr}
    709a:	f001 f8db 	bl	8254 <__ledf2>
    709e:	2800      	cmp	r0, #0
    70a0:	db01      	blt.n	70a6 <__aeabi_dcmplt+0xe>
    70a2:	2000      	movs	r0, #0
    70a4:	bd10      	pop	{r4, pc}
    70a6:	2001      	movs	r0, #1
    70a8:	bd10      	pop	{r4, pc}
    70aa:	46c0      	nop			; (mov r8, r8)

000070ac <__aeabi_dcmple>:
    70ac:	b510      	push	{r4, lr}
    70ae:	f001 f8d1 	bl	8254 <__ledf2>
    70b2:	2800      	cmp	r0, #0
    70b4:	dd01      	ble.n	70ba <__aeabi_dcmple+0xe>
    70b6:	2000      	movs	r0, #0
    70b8:	bd10      	pop	{r4, pc}
    70ba:	2001      	movs	r0, #1
    70bc:	bd10      	pop	{r4, pc}
    70be:	46c0      	nop			; (mov r8, r8)

000070c0 <__aeabi_dcmpgt>:
    70c0:	b510      	push	{r4, lr}
    70c2:	f001 f863 	bl	818c <__gedf2>
    70c6:	2800      	cmp	r0, #0
    70c8:	dc01      	bgt.n	70ce <__aeabi_dcmpgt+0xe>
    70ca:	2000      	movs	r0, #0
    70cc:	bd10      	pop	{r4, pc}
    70ce:	2001      	movs	r0, #1
    70d0:	bd10      	pop	{r4, pc}
    70d2:	46c0      	nop			; (mov r8, r8)

000070d4 <__aeabi_dcmpge>:
    70d4:	b510      	push	{r4, lr}
    70d6:	f001 f859 	bl	818c <__gedf2>
    70da:	2800      	cmp	r0, #0
    70dc:	da01      	bge.n	70e2 <__aeabi_dcmpge+0xe>
    70de:	2000      	movs	r0, #0
    70e0:	bd10      	pop	{r4, pc}
    70e2:	2001      	movs	r0, #1
    70e4:	bd10      	pop	{r4, pc}
    70e6:	46c0      	nop			; (mov r8, r8)

000070e8 <__aeabi_f2uiz>:
    70e8:	219e      	movs	r1, #158	; 0x9e
    70ea:	b510      	push	{r4, lr}
    70ec:	05c9      	lsls	r1, r1, #23
    70ee:	1c04      	adds	r4, r0, #0
    70f0:	f001 fffc 	bl	90ec <__aeabi_fcmpge>
    70f4:	2800      	cmp	r0, #0
    70f6:	d103      	bne.n	7100 <__aeabi_f2uiz+0x18>
    70f8:	1c20      	adds	r0, r4, #0
    70fa:	f000 f9a9 	bl	7450 <__aeabi_f2iz>
    70fe:	bd10      	pop	{r4, pc}
    7100:	219e      	movs	r1, #158	; 0x9e
    7102:	1c20      	adds	r0, r4, #0
    7104:	05c9      	lsls	r1, r1, #23
    7106:	f000 f807 	bl	7118 <__aeabi_fsub>
    710a:	f000 f9a1 	bl	7450 <__aeabi_f2iz>
    710e:	2380      	movs	r3, #128	; 0x80
    7110:	061b      	lsls	r3, r3, #24
    7112:	469c      	mov	ip, r3
    7114:	4460      	add	r0, ip
    7116:	e7f2      	b.n	70fe <__aeabi_f2uiz+0x16>

00007118 <__aeabi_fsub>:
    7118:	b5f0      	push	{r4, r5, r6, r7, lr}
    711a:	464f      	mov	r7, r9
    711c:	46d6      	mov	lr, sl
    711e:	4646      	mov	r6, r8
    7120:	0044      	lsls	r4, r0, #1
    7122:	b5c0      	push	{r6, r7, lr}
    7124:	0fc2      	lsrs	r2, r0, #31
    7126:	0247      	lsls	r7, r0, #9
    7128:	0248      	lsls	r0, r1, #9
    712a:	0a40      	lsrs	r0, r0, #9
    712c:	4684      	mov	ip, r0
    712e:	4666      	mov	r6, ip
    7130:	0a7b      	lsrs	r3, r7, #9
    7132:	0048      	lsls	r0, r1, #1
    7134:	0fc9      	lsrs	r1, r1, #31
    7136:	469a      	mov	sl, r3
    7138:	0e24      	lsrs	r4, r4, #24
    713a:	0015      	movs	r5, r2
    713c:	00db      	lsls	r3, r3, #3
    713e:	0e00      	lsrs	r0, r0, #24
    7140:	4689      	mov	r9, r1
    7142:	00f6      	lsls	r6, r6, #3
    7144:	28ff      	cmp	r0, #255	; 0xff
    7146:	d100      	bne.n	714a <__aeabi_fsub+0x32>
    7148:	e08f      	b.n	726a <__aeabi_fsub+0x152>
    714a:	2101      	movs	r1, #1
    714c:	464f      	mov	r7, r9
    714e:	404f      	eors	r7, r1
    7150:	0039      	movs	r1, r7
    7152:	4291      	cmp	r1, r2
    7154:	d066      	beq.n	7224 <__aeabi_fsub+0x10c>
    7156:	1a22      	subs	r2, r4, r0
    7158:	2a00      	cmp	r2, #0
    715a:	dc00      	bgt.n	715e <__aeabi_fsub+0x46>
    715c:	e09d      	b.n	729a <__aeabi_fsub+0x182>
    715e:	2800      	cmp	r0, #0
    7160:	d13d      	bne.n	71de <__aeabi_fsub+0xc6>
    7162:	2e00      	cmp	r6, #0
    7164:	d100      	bne.n	7168 <__aeabi_fsub+0x50>
    7166:	e08b      	b.n	7280 <__aeabi_fsub+0x168>
    7168:	1e51      	subs	r1, r2, #1
    716a:	2900      	cmp	r1, #0
    716c:	d000      	beq.n	7170 <__aeabi_fsub+0x58>
    716e:	e0b5      	b.n	72dc <__aeabi_fsub+0x1c4>
    7170:	2401      	movs	r4, #1
    7172:	1b9b      	subs	r3, r3, r6
    7174:	015a      	lsls	r2, r3, #5
    7176:	d544      	bpl.n	7202 <__aeabi_fsub+0xea>
    7178:	019b      	lsls	r3, r3, #6
    717a:	099f      	lsrs	r7, r3, #6
    717c:	0038      	movs	r0, r7
    717e:	f001 ffbf 	bl	9100 <__clzsi2>
    7182:	3805      	subs	r0, #5
    7184:	4087      	lsls	r7, r0
    7186:	4284      	cmp	r4, r0
    7188:	dd00      	ble.n	718c <__aeabi_fsub+0x74>
    718a:	e096      	b.n	72ba <__aeabi_fsub+0x1a2>
    718c:	1b04      	subs	r4, r0, r4
    718e:	003a      	movs	r2, r7
    7190:	2020      	movs	r0, #32
    7192:	3401      	adds	r4, #1
    7194:	40e2      	lsrs	r2, r4
    7196:	1b04      	subs	r4, r0, r4
    7198:	40a7      	lsls	r7, r4
    719a:	003b      	movs	r3, r7
    719c:	1e5f      	subs	r7, r3, #1
    719e:	41bb      	sbcs	r3, r7
    71a0:	2400      	movs	r4, #0
    71a2:	4313      	orrs	r3, r2
    71a4:	075a      	lsls	r2, r3, #29
    71a6:	d004      	beq.n	71b2 <__aeabi_fsub+0x9a>
    71a8:	220f      	movs	r2, #15
    71aa:	401a      	ands	r2, r3
    71ac:	2a04      	cmp	r2, #4
    71ae:	d000      	beq.n	71b2 <__aeabi_fsub+0x9a>
    71b0:	3304      	adds	r3, #4
    71b2:	015a      	lsls	r2, r3, #5
    71b4:	d527      	bpl.n	7206 <__aeabi_fsub+0xee>
    71b6:	3401      	adds	r4, #1
    71b8:	2cff      	cmp	r4, #255	; 0xff
    71ba:	d100      	bne.n	71be <__aeabi_fsub+0xa6>
    71bc:	e079      	b.n	72b2 <__aeabi_fsub+0x19a>
    71be:	2201      	movs	r2, #1
    71c0:	019b      	lsls	r3, r3, #6
    71c2:	0a5b      	lsrs	r3, r3, #9
    71c4:	b2e4      	uxtb	r4, r4
    71c6:	402a      	ands	r2, r5
    71c8:	025b      	lsls	r3, r3, #9
    71ca:	05e4      	lsls	r4, r4, #23
    71cc:	0a58      	lsrs	r0, r3, #9
    71ce:	07d2      	lsls	r2, r2, #31
    71d0:	4320      	orrs	r0, r4
    71d2:	4310      	orrs	r0, r2
    71d4:	bc1c      	pop	{r2, r3, r4}
    71d6:	4690      	mov	r8, r2
    71d8:	4699      	mov	r9, r3
    71da:	46a2      	mov	sl, r4
    71dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    71de:	2cff      	cmp	r4, #255	; 0xff
    71e0:	d0e0      	beq.n	71a4 <__aeabi_fsub+0x8c>
    71e2:	2180      	movs	r1, #128	; 0x80
    71e4:	04c9      	lsls	r1, r1, #19
    71e6:	430e      	orrs	r6, r1
    71e8:	2a1b      	cmp	r2, #27
    71ea:	dc7b      	bgt.n	72e4 <__aeabi_fsub+0x1cc>
    71ec:	0031      	movs	r1, r6
    71ee:	2020      	movs	r0, #32
    71f0:	40d1      	lsrs	r1, r2
    71f2:	1a82      	subs	r2, r0, r2
    71f4:	4096      	lsls	r6, r2
    71f6:	1e72      	subs	r2, r6, #1
    71f8:	4196      	sbcs	r6, r2
    71fa:	430e      	orrs	r6, r1
    71fc:	1b9b      	subs	r3, r3, r6
    71fe:	015a      	lsls	r2, r3, #5
    7200:	d4ba      	bmi.n	7178 <__aeabi_fsub+0x60>
    7202:	075a      	lsls	r2, r3, #29
    7204:	d1d0      	bne.n	71a8 <__aeabi_fsub+0x90>
    7206:	2201      	movs	r2, #1
    7208:	08df      	lsrs	r7, r3, #3
    720a:	402a      	ands	r2, r5
    720c:	2cff      	cmp	r4, #255	; 0xff
    720e:	d133      	bne.n	7278 <__aeabi_fsub+0x160>
    7210:	2f00      	cmp	r7, #0
    7212:	d100      	bne.n	7216 <__aeabi_fsub+0xfe>
    7214:	e0a8      	b.n	7368 <__aeabi_fsub+0x250>
    7216:	2380      	movs	r3, #128	; 0x80
    7218:	03db      	lsls	r3, r3, #15
    721a:	433b      	orrs	r3, r7
    721c:	025b      	lsls	r3, r3, #9
    721e:	0a5b      	lsrs	r3, r3, #9
    7220:	24ff      	movs	r4, #255	; 0xff
    7222:	e7d1      	b.n	71c8 <__aeabi_fsub+0xb0>
    7224:	1a21      	subs	r1, r4, r0
    7226:	2900      	cmp	r1, #0
    7228:	dd4c      	ble.n	72c4 <__aeabi_fsub+0x1ac>
    722a:	2800      	cmp	r0, #0
    722c:	d02a      	beq.n	7284 <__aeabi_fsub+0x16c>
    722e:	2cff      	cmp	r4, #255	; 0xff
    7230:	d0b8      	beq.n	71a4 <__aeabi_fsub+0x8c>
    7232:	2080      	movs	r0, #128	; 0x80
    7234:	04c0      	lsls	r0, r0, #19
    7236:	4306      	orrs	r6, r0
    7238:	291b      	cmp	r1, #27
    723a:	dd00      	ble.n	723e <__aeabi_fsub+0x126>
    723c:	e0af      	b.n	739e <__aeabi_fsub+0x286>
    723e:	0030      	movs	r0, r6
    7240:	2720      	movs	r7, #32
    7242:	40c8      	lsrs	r0, r1
    7244:	1a79      	subs	r1, r7, r1
    7246:	408e      	lsls	r6, r1
    7248:	1e71      	subs	r1, r6, #1
    724a:	418e      	sbcs	r6, r1
    724c:	4306      	orrs	r6, r0
    724e:	199b      	adds	r3, r3, r6
    7250:	0159      	lsls	r1, r3, #5
    7252:	d5d6      	bpl.n	7202 <__aeabi_fsub+0xea>
    7254:	3401      	adds	r4, #1
    7256:	2cff      	cmp	r4, #255	; 0xff
    7258:	d100      	bne.n	725c <__aeabi_fsub+0x144>
    725a:	e085      	b.n	7368 <__aeabi_fsub+0x250>
    725c:	2201      	movs	r2, #1
    725e:	497a      	ldr	r1, [pc, #488]	; (7448 <__aeabi_fsub+0x330>)
    7260:	401a      	ands	r2, r3
    7262:	085b      	lsrs	r3, r3, #1
    7264:	400b      	ands	r3, r1
    7266:	4313      	orrs	r3, r2
    7268:	e79c      	b.n	71a4 <__aeabi_fsub+0x8c>
    726a:	2e00      	cmp	r6, #0
    726c:	d000      	beq.n	7270 <__aeabi_fsub+0x158>
    726e:	e770      	b.n	7152 <__aeabi_fsub+0x3a>
    7270:	e76b      	b.n	714a <__aeabi_fsub+0x32>
    7272:	1e3b      	subs	r3, r7, #0
    7274:	d1c5      	bne.n	7202 <__aeabi_fsub+0xea>
    7276:	2200      	movs	r2, #0
    7278:	027b      	lsls	r3, r7, #9
    727a:	0a5b      	lsrs	r3, r3, #9
    727c:	b2e4      	uxtb	r4, r4
    727e:	e7a3      	b.n	71c8 <__aeabi_fsub+0xb0>
    7280:	0014      	movs	r4, r2
    7282:	e78f      	b.n	71a4 <__aeabi_fsub+0x8c>
    7284:	2e00      	cmp	r6, #0
    7286:	d04d      	beq.n	7324 <__aeabi_fsub+0x20c>
    7288:	1e48      	subs	r0, r1, #1
    728a:	2800      	cmp	r0, #0
    728c:	d157      	bne.n	733e <__aeabi_fsub+0x226>
    728e:	199b      	adds	r3, r3, r6
    7290:	2401      	movs	r4, #1
    7292:	015a      	lsls	r2, r3, #5
    7294:	d5b5      	bpl.n	7202 <__aeabi_fsub+0xea>
    7296:	2402      	movs	r4, #2
    7298:	e7e0      	b.n	725c <__aeabi_fsub+0x144>
    729a:	2a00      	cmp	r2, #0
    729c:	d125      	bne.n	72ea <__aeabi_fsub+0x1d2>
    729e:	1c62      	adds	r2, r4, #1
    72a0:	b2d2      	uxtb	r2, r2
    72a2:	2a01      	cmp	r2, #1
    72a4:	dd72      	ble.n	738c <__aeabi_fsub+0x274>
    72a6:	1b9f      	subs	r7, r3, r6
    72a8:	017a      	lsls	r2, r7, #5
    72aa:	d535      	bpl.n	7318 <__aeabi_fsub+0x200>
    72ac:	1af7      	subs	r7, r6, r3
    72ae:	000d      	movs	r5, r1
    72b0:	e764      	b.n	717c <__aeabi_fsub+0x64>
    72b2:	2201      	movs	r2, #1
    72b4:	2300      	movs	r3, #0
    72b6:	402a      	ands	r2, r5
    72b8:	e786      	b.n	71c8 <__aeabi_fsub+0xb0>
    72ba:	003b      	movs	r3, r7
    72bc:	4a63      	ldr	r2, [pc, #396]	; (744c <__aeabi_fsub+0x334>)
    72be:	1a24      	subs	r4, r4, r0
    72c0:	4013      	ands	r3, r2
    72c2:	e76f      	b.n	71a4 <__aeabi_fsub+0x8c>
    72c4:	2900      	cmp	r1, #0
    72c6:	d16c      	bne.n	73a2 <__aeabi_fsub+0x28a>
    72c8:	1c61      	adds	r1, r4, #1
    72ca:	b2c8      	uxtb	r0, r1
    72cc:	2801      	cmp	r0, #1
    72ce:	dd4e      	ble.n	736e <__aeabi_fsub+0x256>
    72d0:	29ff      	cmp	r1, #255	; 0xff
    72d2:	d049      	beq.n	7368 <__aeabi_fsub+0x250>
    72d4:	199b      	adds	r3, r3, r6
    72d6:	085b      	lsrs	r3, r3, #1
    72d8:	000c      	movs	r4, r1
    72da:	e763      	b.n	71a4 <__aeabi_fsub+0x8c>
    72dc:	2aff      	cmp	r2, #255	; 0xff
    72de:	d041      	beq.n	7364 <__aeabi_fsub+0x24c>
    72e0:	000a      	movs	r2, r1
    72e2:	e781      	b.n	71e8 <__aeabi_fsub+0xd0>
    72e4:	2601      	movs	r6, #1
    72e6:	1b9b      	subs	r3, r3, r6
    72e8:	e789      	b.n	71fe <__aeabi_fsub+0xe6>
    72ea:	2c00      	cmp	r4, #0
    72ec:	d01c      	beq.n	7328 <__aeabi_fsub+0x210>
    72ee:	28ff      	cmp	r0, #255	; 0xff
    72f0:	d021      	beq.n	7336 <__aeabi_fsub+0x21e>
    72f2:	2480      	movs	r4, #128	; 0x80
    72f4:	04e4      	lsls	r4, r4, #19
    72f6:	4252      	negs	r2, r2
    72f8:	4323      	orrs	r3, r4
    72fa:	2a1b      	cmp	r2, #27
    72fc:	dd00      	ble.n	7300 <__aeabi_fsub+0x1e8>
    72fe:	e096      	b.n	742e <__aeabi_fsub+0x316>
    7300:	001c      	movs	r4, r3
    7302:	2520      	movs	r5, #32
    7304:	40d4      	lsrs	r4, r2
    7306:	1aaa      	subs	r2, r5, r2
    7308:	4093      	lsls	r3, r2
    730a:	1e5a      	subs	r2, r3, #1
    730c:	4193      	sbcs	r3, r2
    730e:	4323      	orrs	r3, r4
    7310:	1af3      	subs	r3, r6, r3
    7312:	0004      	movs	r4, r0
    7314:	000d      	movs	r5, r1
    7316:	e72d      	b.n	7174 <__aeabi_fsub+0x5c>
    7318:	2f00      	cmp	r7, #0
    731a:	d000      	beq.n	731e <__aeabi_fsub+0x206>
    731c:	e72e      	b.n	717c <__aeabi_fsub+0x64>
    731e:	2200      	movs	r2, #0
    7320:	2400      	movs	r4, #0
    7322:	e7a9      	b.n	7278 <__aeabi_fsub+0x160>
    7324:	000c      	movs	r4, r1
    7326:	e73d      	b.n	71a4 <__aeabi_fsub+0x8c>
    7328:	2b00      	cmp	r3, #0
    732a:	d058      	beq.n	73de <__aeabi_fsub+0x2c6>
    732c:	43d2      	mvns	r2, r2
    732e:	2a00      	cmp	r2, #0
    7330:	d0ee      	beq.n	7310 <__aeabi_fsub+0x1f8>
    7332:	28ff      	cmp	r0, #255	; 0xff
    7334:	d1e1      	bne.n	72fa <__aeabi_fsub+0x1e2>
    7336:	0033      	movs	r3, r6
    7338:	24ff      	movs	r4, #255	; 0xff
    733a:	000d      	movs	r5, r1
    733c:	e732      	b.n	71a4 <__aeabi_fsub+0x8c>
    733e:	29ff      	cmp	r1, #255	; 0xff
    7340:	d010      	beq.n	7364 <__aeabi_fsub+0x24c>
    7342:	0001      	movs	r1, r0
    7344:	e778      	b.n	7238 <__aeabi_fsub+0x120>
    7346:	2b00      	cmp	r3, #0
    7348:	d06e      	beq.n	7428 <__aeabi_fsub+0x310>
    734a:	24ff      	movs	r4, #255	; 0xff
    734c:	2e00      	cmp	r6, #0
    734e:	d100      	bne.n	7352 <__aeabi_fsub+0x23a>
    7350:	e728      	b.n	71a4 <__aeabi_fsub+0x8c>
    7352:	2280      	movs	r2, #128	; 0x80
    7354:	4651      	mov	r1, sl
    7356:	03d2      	lsls	r2, r2, #15
    7358:	4211      	tst	r1, r2
    735a:	d003      	beq.n	7364 <__aeabi_fsub+0x24c>
    735c:	4661      	mov	r1, ip
    735e:	4211      	tst	r1, r2
    7360:	d100      	bne.n	7364 <__aeabi_fsub+0x24c>
    7362:	0033      	movs	r3, r6
    7364:	24ff      	movs	r4, #255	; 0xff
    7366:	e71d      	b.n	71a4 <__aeabi_fsub+0x8c>
    7368:	24ff      	movs	r4, #255	; 0xff
    736a:	2300      	movs	r3, #0
    736c:	e72c      	b.n	71c8 <__aeabi_fsub+0xb0>
    736e:	2c00      	cmp	r4, #0
    7370:	d1e9      	bne.n	7346 <__aeabi_fsub+0x22e>
    7372:	2b00      	cmp	r3, #0
    7374:	d063      	beq.n	743e <__aeabi_fsub+0x326>
    7376:	2e00      	cmp	r6, #0
    7378:	d100      	bne.n	737c <__aeabi_fsub+0x264>
    737a:	e713      	b.n	71a4 <__aeabi_fsub+0x8c>
    737c:	199b      	adds	r3, r3, r6
    737e:	015a      	lsls	r2, r3, #5
    7380:	d400      	bmi.n	7384 <__aeabi_fsub+0x26c>
    7382:	e73e      	b.n	7202 <__aeabi_fsub+0xea>
    7384:	4a31      	ldr	r2, [pc, #196]	; (744c <__aeabi_fsub+0x334>)
    7386:	000c      	movs	r4, r1
    7388:	4013      	ands	r3, r2
    738a:	e70b      	b.n	71a4 <__aeabi_fsub+0x8c>
    738c:	2c00      	cmp	r4, #0
    738e:	d11e      	bne.n	73ce <__aeabi_fsub+0x2b6>
    7390:	2b00      	cmp	r3, #0
    7392:	d12f      	bne.n	73f4 <__aeabi_fsub+0x2dc>
    7394:	2e00      	cmp	r6, #0
    7396:	d04f      	beq.n	7438 <__aeabi_fsub+0x320>
    7398:	0033      	movs	r3, r6
    739a:	000d      	movs	r5, r1
    739c:	e702      	b.n	71a4 <__aeabi_fsub+0x8c>
    739e:	2601      	movs	r6, #1
    73a0:	e755      	b.n	724e <__aeabi_fsub+0x136>
    73a2:	2c00      	cmp	r4, #0
    73a4:	d11f      	bne.n	73e6 <__aeabi_fsub+0x2ce>
    73a6:	2b00      	cmp	r3, #0
    73a8:	d043      	beq.n	7432 <__aeabi_fsub+0x31a>
    73aa:	43c9      	mvns	r1, r1
    73ac:	2900      	cmp	r1, #0
    73ae:	d00b      	beq.n	73c8 <__aeabi_fsub+0x2b0>
    73b0:	28ff      	cmp	r0, #255	; 0xff
    73b2:	d039      	beq.n	7428 <__aeabi_fsub+0x310>
    73b4:	291b      	cmp	r1, #27
    73b6:	dc44      	bgt.n	7442 <__aeabi_fsub+0x32a>
    73b8:	001c      	movs	r4, r3
    73ba:	2720      	movs	r7, #32
    73bc:	40cc      	lsrs	r4, r1
    73be:	1a79      	subs	r1, r7, r1
    73c0:	408b      	lsls	r3, r1
    73c2:	1e59      	subs	r1, r3, #1
    73c4:	418b      	sbcs	r3, r1
    73c6:	4323      	orrs	r3, r4
    73c8:	199b      	adds	r3, r3, r6
    73ca:	0004      	movs	r4, r0
    73cc:	e740      	b.n	7250 <__aeabi_fsub+0x138>
    73ce:	2b00      	cmp	r3, #0
    73d0:	d11a      	bne.n	7408 <__aeabi_fsub+0x2f0>
    73d2:	2e00      	cmp	r6, #0
    73d4:	d124      	bne.n	7420 <__aeabi_fsub+0x308>
    73d6:	2780      	movs	r7, #128	; 0x80
    73d8:	2200      	movs	r2, #0
    73da:	03ff      	lsls	r7, r7, #15
    73dc:	e71b      	b.n	7216 <__aeabi_fsub+0xfe>
    73de:	0033      	movs	r3, r6
    73e0:	0004      	movs	r4, r0
    73e2:	000d      	movs	r5, r1
    73e4:	e6de      	b.n	71a4 <__aeabi_fsub+0x8c>
    73e6:	28ff      	cmp	r0, #255	; 0xff
    73e8:	d01e      	beq.n	7428 <__aeabi_fsub+0x310>
    73ea:	2480      	movs	r4, #128	; 0x80
    73ec:	04e4      	lsls	r4, r4, #19
    73ee:	4249      	negs	r1, r1
    73f0:	4323      	orrs	r3, r4
    73f2:	e7df      	b.n	73b4 <__aeabi_fsub+0x29c>
    73f4:	2e00      	cmp	r6, #0
    73f6:	d100      	bne.n	73fa <__aeabi_fsub+0x2e2>
    73f8:	e6d4      	b.n	71a4 <__aeabi_fsub+0x8c>
    73fa:	1b9f      	subs	r7, r3, r6
    73fc:	017a      	lsls	r2, r7, #5
    73fe:	d400      	bmi.n	7402 <__aeabi_fsub+0x2ea>
    7400:	e737      	b.n	7272 <__aeabi_fsub+0x15a>
    7402:	1af3      	subs	r3, r6, r3
    7404:	000d      	movs	r5, r1
    7406:	e6cd      	b.n	71a4 <__aeabi_fsub+0x8c>
    7408:	24ff      	movs	r4, #255	; 0xff
    740a:	2e00      	cmp	r6, #0
    740c:	d100      	bne.n	7410 <__aeabi_fsub+0x2f8>
    740e:	e6c9      	b.n	71a4 <__aeabi_fsub+0x8c>
    7410:	2280      	movs	r2, #128	; 0x80
    7412:	4650      	mov	r0, sl
    7414:	03d2      	lsls	r2, r2, #15
    7416:	4210      	tst	r0, r2
    7418:	d0a4      	beq.n	7364 <__aeabi_fsub+0x24c>
    741a:	4660      	mov	r0, ip
    741c:	4210      	tst	r0, r2
    741e:	d1a1      	bne.n	7364 <__aeabi_fsub+0x24c>
    7420:	0033      	movs	r3, r6
    7422:	000d      	movs	r5, r1
    7424:	24ff      	movs	r4, #255	; 0xff
    7426:	e6bd      	b.n	71a4 <__aeabi_fsub+0x8c>
    7428:	0033      	movs	r3, r6
    742a:	24ff      	movs	r4, #255	; 0xff
    742c:	e6ba      	b.n	71a4 <__aeabi_fsub+0x8c>
    742e:	2301      	movs	r3, #1
    7430:	e76e      	b.n	7310 <__aeabi_fsub+0x1f8>
    7432:	0033      	movs	r3, r6
    7434:	0004      	movs	r4, r0
    7436:	e6b5      	b.n	71a4 <__aeabi_fsub+0x8c>
    7438:	2700      	movs	r7, #0
    743a:	2200      	movs	r2, #0
    743c:	e71c      	b.n	7278 <__aeabi_fsub+0x160>
    743e:	0033      	movs	r3, r6
    7440:	e6b0      	b.n	71a4 <__aeabi_fsub+0x8c>
    7442:	2301      	movs	r3, #1
    7444:	e7c0      	b.n	73c8 <__aeabi_fsub+0x2b0>
    7446:	46c0      	nop			; (mov r8, r8)
    7448:	7dffffff 	.word	0x7dffffff
    744c:	fbffffff 	.word	0xfbffffff

00007450 <__aeabi_f2iz>:
    7450:	0241      	lsls	r1, r0, #9
    7452:	0043      	lsls	r3, r0, #1
    7454:	0fc2      	lsrs	r2, r0, #31
    7456:	0a49      	lsrs	r1, r1, #9
    7458:	0e1b      	lsrs	r3, r3, #24
    745a:	2000      	movs	r0, #0
    745c:	2b7e      	cmp	r3, #126	; 0x7e
    745e:	dd0d      	ble.n	747c <__aeabi_f2iz+0x2c>
    7460:	2b9d      	cmp	r3, #157	; 0x9d
    7462:	dc0c      	bgt.n	747e <__aeabi_f2iz+0x2e>
    7464:	2080      	movs	r0, #128	; 0x80
    7466:	0400      	lsls	r0, r0, #16
    7468:	4301      	orrs	r1, r0
    746a:	2b95      	cmp	r3, #149	; 0x95
    746c:	dc0a      	bgt.n	7484 <__aeabi_f2iz+0x34>
    746e:	2096      	movs	r0, #150	; 0x96
    7470:	1ac3      	subs	r3, r0, r3
    7472:	40d9      	lsrs	r1, r3
    7474:	4248      	negs	r0, r1
    7476:	2a00      	cmp	r2, #0
    7478:	d100      	bne.n	747c <__aeabi_f2iz+0x2c>
    747a:	0008      	movs	r0, r1
    747c:	4770      	bx	lr
    747e:	4b03      	ldr	r3, [pc, #12]	; (748c <__aeabi_f2iz+0x3c>)
    7480:	18d0      	adds	r0, r2, r3
    7482:	e7fb      	b.n	747c <__aeabi_f2iz+0x2c>
    7484:	3b96      	subs	r3, #150	; 0x96
    7486:	4099      	lsls	r1, r3
    7488:	e7f4      	b.n	7474 <__aeabi_f2iz+0x24>
    748a:	46c0      	nop			; (mov r8, r8)
    748c:	7fffffff 	.word	0x7fffffff

00007490 <__aeabi_dadd>:
    7490:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    7492:	4645      	mov	r5, r8
    7494:	46de      	mov	lr, fp
    7496:	4657      	mov	r7, sl
    7498:	464e      	mov	r6, r9
    749a:	030c      	lsls	r4, r1, #12
    749c:	b5e0      	push	{r5, r6, r7, lr}
    749e:	004e      	lsls	r6, r1, #1
    74a0:	0fc9      	lsrs	r1, r1, #31
    74a2:	4688      	mov	r8, r1
    74a4:	000d      	movs	r5, r1
    74a6:	0a61      	lsrs	r1, r4, #9
    74a8:	0f44      	lsrs	r4, r0, #29
    74aa:	430c      	orrs	r4, r1
    74ac:	00c7      	lsls	r7, r0, #3
    74ae:	0319      	lsls	r1, r3, #12
    74b0:	0058      	lsls	r0, r3, #1
    74b2:	0fdb      	lsrs	r3, r3, #31
    74b4:	469b      	mov	fp, r3
    74b6:	0a4b      	lsrs	r3, r1, #9
    74b8:	0f51      	lsrs	r1, r2, #29
    74ba:	430b      	orrs	r3, r1
    74bc:	0d76      	lsrs	r6, r6, #21
    74be:	0d40      	lsrs	r0, r0, #21
    74c0:	0019      	movs	r1, r3
    74c2:	00d2      	lsls	r2, r2, #3
    74c4:	45d8      	cmp	r8, fp
    74c6:	d100      	bne.n	74ca <__aeabi_dadd+0x3a>
    74c8:	e0ae      	b.n	7628 <__aeabi_dadd+0x198>
    74ca:	1a35      	subs	r5, r6, r0
    74cc:	2d00      	cmp	r5, #0
    74ce:	dc00      	bgt.n	74d2 <__aeabi_dadd+0x42>
    74d0:	e0f6      	b.n	76c0 <__aeabi_dadd+0x230>
    74d2:	2800      	cmp	r0, #0
    74d4:	d10f      	bne.n	74f6 <__aeabi_dadd+0x66>
    74d6:	4313      	orrs	r3, r2
    74d8:	d100      	bne.n	74dc <__aeabi_dadd+0x4c>
    74da:	e0db      	b.n	7694 <__aeabi_dadd+0x204>
    74dc:	1e6b      	subs	r3, r5, #1
    74de:	2b00      	cmp	r3, #0
    74e0:	d000      	beq.n	74e4 <__aeabi_dadd+0x54>
    74e2:	e137      	b.n	7754 <__aeabi_dadd+0x2c4>
    74e4:	1aba      	subs	r2, r7, r2
    74e6:	4297      	cmp	r7, r2
    74e8:	41bf      	sbcs	r7, r7
    74ea:	1a64      	subs	r4, r4, r1
    74ec:	427f      	negs	r7, r7
    74ee:	1be4      	subs	r4, r4, r7
    74f0:	2601      	movs	r6, #1
    74f2:	0017      	movs	r7, r2
    74f4:	e024      	b.n	7540 <__aeabi_dadd+0xb0>
    74f6:	4bc6      	ldr	r3, [pc, #792]	; (7810 <__aeabi_dadd+0x380>)
    74f8:	429e      	cmp	r6, r3
    74fa:	d04d      	beq.n	7598 <__aeabi_dadd+0x108>
    74fc:	2380      	movs	r3, #128	; 0x80
    74fe:	041b      	lsls	r3, r3, #16
    7500:	4319      	orrs	r1, r3
    7502:	2d38      	cmp	r5, #56	; 0x38
    7504:	dd00      	ble.n	7508 <__aeabi_dadd+0x78>
    7506:	e107      	b.n	7718 <__aeabi_dadd+0x288>
    7508:	2d1f      	cmp	r5, #31
    750a:	dd00      	ble.n	750e <__aeabi_dadd+0x7e>
    750c:	e138      	b.n	7780 <__aeabi_dadd+0x2f0>
    750e:	2020      	movs	r0, #32
    7510:	1b43      	subs	r3, r0, r5
    7512:	469a      	mov	sl, r3
    7514:	000b      	movs	r3, r1
    7516:	4650      	mov	r0, sl
    7518:	4083      	lsls	r3, r0
    751a:	4699      	mov	r9, r3
    751c:	0013      	movs	r3, r2
    751e:	4648      	mov	r0, r9
    7520:	40eb      	lsrs	r3, r5
    7522:	4318      	orrs	r0, r3
    7524:	0003      	movs	r3, r0
    7526:	4650      	mov	r0, sl
    7528:	4082      	lsls	r2, r0
    752a:	1e50      	subs	r0, r2, #1
    752c:	4182      	sbcs	r2, r0
    752e:	40e9      	lsrs	r1, r5
    7530:	431a      	orrs	r2, r3
    7532:	1aba      	subs	r2, r7, r2
    7534:	1a61      	subs	r1, r4, r1
    7536:	4297      	cmp	r7, r2
    7538:	41a4      	sbcs	r4, r4
    753a:	0017      	movs	r7, r2
    753c:	4264      	negs	r4, r4
    753e:	1b0c      	subs	r4, r1, r4
    7540:	0223      	lsls	r3, r4, #8
    7542:	d562      	bpl.n	760a <__aeabi_dadd+0x17a>
    7544:	0264      	lsls	r4, r4, #9
    7546:	0a65      	lsrs	r5, r4, #9
    7548:	2d00      	cmp	r5, #0
    754a:	d100      	bne.n	754e <__aeabi_dadd+0xbe>
    754c:	e0df      	b.n	770e <__aeabi_dadd+0x27e>
    754e:	0028      	movs	r0, r5
    7550:	f001 fdd6 	bl	9100 <__clzsi2>
    7554:	0003      	movs	r3, r0
    7556:	3b08      	subs	r3, #8
    7558:	2b1f      	cmp	r3, #31
    755a:	dd00      	ble.n	755e <__aeabi_dadd+0xce>
    755c:	e0d2      	b.n	7704 <__aeabi_dadd+0x274>
    755e:	2220      	movs	r2, #32
    7560:	003c      	movs	r4, r7
    7562:	1ad2      	subs	r2, r2, r3
    7564:	409d      	lsls	r5, r3
    7566:	40d4      	lsrs	r4, r2
    7568:	409f      	lsls	r7, r3
    756a:	4325      	orrs	r5, r4
    756c:	429e      	cmp	r6, r3
    756e:	dd00      	ble.n	7572 <__aeabi_dadd+0xe2>
    7570:	e0c4      	b.n	76fc <__aeabi_dadd+0x26c>
    7572:	1b9e      	subs	r6, r3, r6
    7574:	1c73      	adds	r3, r6, #1
    7576:	2b1f      	cmp	r3, #31
    7578:	dd00      	ble.n	757c <__aeabi_dadd+0xec>
    757a:	e0f1      	b.n	7760 <__aeabi_dadd+0x2d0>
    757c:	2220      	movs	r2, #32
    757e:	0038      	movs	r0, r7
    7580:	0029      	movs	r1, r5
    7582:	1ad2      	subs	r2, r2, r3
    7584:	40d8      	lsrs	r0, r3
    7586:	4091      	lsls	r1, r2
    7588:	4097      	lsls	r7, r2
    758a:	002c      	movs	r4, r5
    758c:	4301      	orrs	r1, r0
    758e:	1e78      	subs	r0, r7, #1
    7590:	4187      	sbcs	r7, r0
    7592:	40dc      	lsrs	r4, r3
    7594:	2600      	movs	r6, #0
    7596:	430f      	orrs	r7, r1
    7598:	077b      	lsls	r3, r7, #29
    759a:	d009      	beq.n	75b0 <__aeabi_dadd+0x120>
    759c:	230f      	movs	r3, #15
    759e:	403b      	ands	r3, r7
    75a0:	2b04      	cmp	r3, #4
    75a2:	d005      	beq.n	75b0 <__aeabi_dadd+0x120>
    75a4:	1d3b      	adds	r3, r7, #4
    75a6:	42bb      	cmp	r3, r7
    75a8:	41bf      	sbcs	r7, r7
    75aa:	427f      	negs	r7, r7
    75ac:	19e4      	adds	r4, r4, r7
    75ae:	001f      	movs	r7, r3
    75b0:	0223      	lsls	r3, r4, #8
    75b2:	d52c      	bpl.n	760e <__aeabi_dadd+0x17e>
    75b4:	4b96      	ldr	r3, [pc, #600]	; (7810 <__aeabi_dadd+0x380>)
    75b6:	3601      	adds	r6, #1
    75b8:	429e      	cmp	r6, r3
    75ba:	d100      	bne.n	75be <__aeabi_dadd+0x12e>
    75bc:	e09a      	b.n	76f4 <__aeabi_dadd+0x264>
    75be:	4645      	mov	r5, r8
    75c0:	4b94      	ldr	r3, [pc, #592]	; (7814 <__aeabi_dadd+0x384>)
    75c2:	08ff      	lsrs	r7, r7, #3
    75c4:	401c      	ands	r4, r3
    75c6:	0760      	lsls	r0, r4, #29
    75c8:	0576      	lsls	r6, r6, #21
    75ca:	0264      	lsls	r4, r4, #9
    75cc:	4307      	orrs	r7, r0
    75ce:	0b24      	lsrs	r4, r4, #12
    75d0:	0d76      	lsrs	r6, r6, #21
    75d2:	2100      	movs	r1, #0
    75d4:	0324      	lsls	r4, r4, #12
    75d6:	0b23      	lsrs	r3, r4, #12
    75d8:	0d0c      	lsrs	r4, r1, #20
    75da:	4a8f      	ldr	r2, [pc, #572]	; (7818 <__aeabi_dadd+0x388>)
    75dc:	0524      	lsls	r4, r4, #20
    75de:	431c      	orrs	r4, r3
    75e0:	4014      	ands	r4, r2
    75e2:	0533      	lsls	r3, r6, #20
    75e4:	4323      	orrs	r3, r4
    75e6:	005b      	lsls	r3, r3, #1
    75e8:	07ed      	lsls	r5, r5, #31
    75ea:	085b      	lsrs	r3, r3, #1
    75ec:	432b      	orrs	r3, r5
    75ee:	0038      	movs	r0, r7
    75f0:	0019      	movs	r1, r3
    75f2:	bc3c      	pop	{r2, r3, r4, r5}
    75f4:	4690      	mov	r8, r2
    75f6:	4699      	mov	r9, r3
    75f8:	46a2      	mov	sl, r4
    75fa:	46ab      	mov	fp, r5
    75fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    75fe:	4664      	mov	r4, ip
    7600:	4304      	orrs	r4, r0
    7602:	d100      	bne.n	7606 <__aeabi_dadd+0x176>
    7604:	e211      	b.n	7a2a <__aeabi_dadd+0x59a>
    7606:	0004      	movs	r4, r0
    7608:	4667      	mov	r7, ip
    760a:	077b      	lsls	r3, r7, #29
    760c:	d1c6      	bne.n	759c <__aeabi_dadd+0x10c>
    760e:	4645      	mov	r5, r8
    7610:	0760      	lsls	r0, r4, #29
    7612:	08ff      	lsrs	r7, r7, #3
    7614:	4307      	orrs	r7, r0
    7616:	08e4      	lsrs	r4, r4, #3
    7618:	4b7d      	ldr	r3, [pc, #500]	; (7810 <__aeabi_dadd+0x380>)
    761a:	429e      	cmp	r6, r3
    761c:	d030      	beq.n	7680 <__aeabi_dadd+0x1f0>
    761e:	0324      	lsls	r4, r4, #12
    7620:	0576      	lsls	r6, r6, #21
    7622:	0b24      	lsrs	r4, r4, #12
    7624:	0d76      	lsrs	r6, r6, #21
    7626:	e7d4      	b.n	75d2 <__aeabi_dadd+0x142>
    7628:	1a33      	subs	r3, r6, r0
    762a:	469a      	mov	sl, r3
    762c:	2b00      	cmp	r3, #0
    762e:	dd78      	ble.n	7722 <__aeabi_dadd+0x292>
    7630:	2800      	cmp	r0, #0
    7632:	d031      	beq.n	7698 <__aeabi_dadd+0x208>
    7634:	4876      	ldr	r0, [pc, #472]	; (7810 <__aeabi_dadd+0x380>)
    7636:	4286      	cmp	r6, r0
    7638:	d0ae      	beq.n	7598 <__aeabi_dadd+0x108>
    763a:	2080      	movs	r0, #128	; 0x80
    763c:	0400      	lsls	r0, r0, #16
    763e:	4301      	orrs	r1, r0
    7640:	4653      	mov	r3, sl
    7642:	2b38      	cmp	r3, #56	; 0x38
    7644:	dc00      	bgt.n	7648 <__aeabi_dadd+0x1b8>
    7646:	e0e9      	b.n	781c <__aeabi_dadd+0x38c>
    7648:	430a      	orrs	r2, r1
    764a:	1e51      	subs	r1, r2, #1
    764c:	418a      	sbcs	r2, r1
    764e:	2100      	movs	r1, #0
    7650:	19d2      	adds	r2, r2, r7
    7652:	42ba      	cmp	r2, r7
    7654:	41bf      	sbcs	r7, r7
    7656:	1909      	adds	r1, r1, r4
    7658:	427c      	negs	r4, r7
    765a:	0017      	movs	r7, r2
    765c:	190c      	adds	r4, r1, r4
    765e:	0223      	lsls	r3, r4, #8
    7660:	d5d3      	bpl.n	760a <__aeabi_dadd+0x17a>
    7662:	4b6b      	ldr	r3, [pc, #428]	; (7810 <__aeabi_dadd+0x380>)
    7664:	3601      	adds	r6, #1
    7666:	429e      	cmp	r6, r3
    7668:	d100      	bne.n	766c <__aeabi_dadd+0x1dc>
    766a:	e13a      	b.n	78e2 <__aeabi_dadd+0x452>
    766c:	2001      	movs	r0, #1
    766e:	4b69      	ldr	r3, [pc, #420]	; (7814 <__aeabi_dadd+0x384>)
    7670:	401c      	ands	r4, r3
    7672:	087b      	lsrs	r3, r7, #1
    7674:	4007      	ands	r7, r0
    7676:	431f      	orrs	r7, r3
    7678:	07e0      	lsls	r0, r4, #31
    767a:	4307      	orrs	r7, r0
    767c:	0864      	lsrs	r4, r4, #1
    767e:	e78b      	b.n	7598 <__aeabi_dadd+0x108>
    7680:	0023      	movs	r3, r4
    7682:	433b      	orrs	r3, r7
    7684:	d100      	bne.n	7688 <__aeabi_dadd+0x1f8>
    7686:	e1cb      	b.n	7a20 <__aeabi_dadd+0x590>
    7688:	2280      	movs	r2, #128	; 0x80
    768a:	0312      	lsls	r2, r2, #12
    768c:	4314      	orrs	r4, r2
    768e:	0324      	lsls	r4, r4, #12
    7690:	0b24      	lsrs	r4, r4, #12
    7692:	e79e      	b.n	75d2 <__aeabi_dadd+0x142>
    7694:	002e      	movs	r6, r5
    7696:	e77f      	b.n	7598 <__aeabi_dadd+0x108>
    7698:	0008      	movs	r0, r1
    769a:	4310      	orrs	r0, r2
    769c:	d100      	bne.n	76a0 <__aeabi_dadd+0x210>
    769e:	e0b4      	b.n	780a <__aeabi_dadd+0x37a>
    76a0:	1e58      	subs	r0, r3, #1
    76a2:	2800      	cmp	r0, #0
    76a4:	d000      	beq.n	76a8 <__aeabi_dadd+0x218>
    76a6:	e0de      	b.n	7866 <__aeabi_dadd+0x3d6>
    76a8:	18ba      	adds	r2, r7, r2
    76aa:	42ba      	cmp	r2, r7
    76ac:	419b      	sbcs	r3, r3
    76ae:	1864      	adds	r4, r4, r1
    76b0:	425b      	negs	r3, r3
    76b2:	18e4      	adds	r4, r4, r3
    76b4:	0017      	movs	r7, r2
    76b6:	2601      	movs	r6, #1
    76b8:	0223      	lsls	r3, r4, #8
    76ba:	d5a6      	bpl.n	760a <__aeabi_dadd+0x17a>
    76bc:	2602      	movs	r6, #2
    76be:	e7d5      	b.n	766c <__aeabi_dadd+0x1dc>
    76c0:	2d00      	cmp	r5, #0
    76c2:	d16e      	bne.n	77a2 <__aeabi_dadd+0x312>
    76c4:	1c70      	adds	r0, r6, #1
    76c6:	0540      	lsls	r0, r0, #21
    76c8:	0d40      	lsrs	r0, r0, #21
    76ca:	2801      	cmp	r0, #1
    76cc:	dc00      	bgt.n	76d0 <__aeabi_dadd+0x240>
    76ce:	e0f9      	b.n	78c4 <__aeabi_dadd+0x434>
    76d0:	1ab8      	subs	r0, r7, r2
    76d2:	4684      	mov	ip, r0
    76d4:	4287      	cmp	r7, r0
    76d6:	4180      	sbcs	r0, r0
    76d8:	1ae5      	subs	r5, r4, r3
    76da:	4240      	negs	r0, r0
    76dc:	1a2d      	subs	r5, r5, r0
    76de:	0228      	lsls	r0, r5, #8
    76e0:	d400      	bmi.n	76e4 <__aeabi_dadd+0x254>
    76e2:	e089      	b.n	77f8 <__aeabi_dadd+0x368>
    76e4:	1bd7      	subs	r7, r2, r7
    76e6:	42ba      	cmp	r2, r7
    76e8:	4192      	sbcs	r2, r2
    76ea:	1b1c      	subs	r4, r3, r4
    76ec:	4252      	negs	r2, r2
    76ee:	1aa5      	subs	r5, r4, r2
    76f0:	46d8      	mov	r8, fp
    76f2:	e729      	b.n	7548 <__aeabi_dadd+0xb8>
    76f4:	4645      	mov	r5, r8
    76f6:	2400      	movs	r4, #0
    76f8:	2700      	movs	r7, #0
    76fa:	e76a      	b.n	75d2 <__aeabi_dadd+0x142>
    76fc:	4c45      	ldr	r4, [pc, #276]	; (7814 <__aeabi_dadd+0x384>)
    76fe:	1af6      	subs	r6, r6, r3
    7700:	402c      	ands	r4, r5
    7702:	e749      	b.n	7598 <__aeabi_dadd+0x108>
    7704:	003d      	movs	r5, r7
    7706:	3828      	subs	r0, #40	; 0x28
    7708:	4085      	lsls	r5, r0
    770a:	2700      	movs	r7, #0
    770c:	e72e      	b.n	756c <__aeabi_dadd+0xdc>
    770e:	0038      	movs	r0, r7
    7710:	f001 fcf6 	bl	9100 <__clzsi2>
    7714:	3020      	adds	r0, #32
    7716:	e71d      	b.n	7554 <__aeabi_dadd+0xc4>
    7718:	430a      	orrs	r2, r1
    771a:	1e51      	subs	r1, r2, #1
    771c:	418a      	sbcs	r2, r1
    771e:	2100      	movs	r1, #0
    7720:	e707      	b.n	7532 <__aeabi_dadd+0xa2>
    7722:	2b00      	cmp	r3, #0
    7724:	d000      	beq.n	7728 <__aeabi_dadd+0x298>
    7726:	e0f3      	b.n	7910 <__aeabi_dadd+0x480>
    7728:	1c70      	adds	r0, r6, #1
    772a:	0543      	lsls	r3, r0, #21
    772c:	0d5b      	lsrs	r3, r3, #21
    772e:	2b01      	cmp	r3, #1
    7730:	dc00      	bgt.n	7734 <__aeabi_dadd+0x2a4>
    7732:	e0ad      	b.n	7890 <__aeabi_dadd+0x400>
    7734:	4b36      	ldr	r3, [pc, #216]	; (7810 <__aeabi_dadd+0x380>)
    7736:	4298      	cmp	r0, r3
    7738:	d100      	bne.n	773c <__aeabi_dadd+0x2ac>
    773a:	e0d1      	b.n	78e0 <__aeabi_dadd+0x450>
    773c:	18ba      	adds	r2, r7, r2
    773e:	42ba      	cmp	r2, r7
    7740:	41bf      	sbcs	r7, r7
    7742:	1864      	adds	r4, r4, r1
    7744:	427f      	negs	r7, r7
    7746:	19e4      	adds	r4, r4, r7
    7748:	07e7      	lsls	r7, r4, #31
    774a:	0852      	lsrs	r2, r2, #1
    774c:	4317      	orrs	r7, r2
    774e:	0864      	lsrs	r4, r4, #1
    7750:	0006      	movs	r6, r0
    7752:	e721      	b.n	7598 <__aeabi_dadd+0x108>
    7754:	482e      	ldr	r0, [pc, #184]	; (7810 <__aeabi_dadd+0x380>)
    7756:	4285      	cmp	r5, r0
    7758:	d100      	bne.n	775c <__aeabi_dadd+0x2cc>
    775a:	e093      	b.n	7884 <__aeabi_dadd+0x3f4>
    775c:	001d      	movs	r5, r3
    775e:	e6d0      	b.n	7502 <__aeabi_dadd+0x72>
    7760:	0029      	movs	r1, r5
    7762:	3e1f      	subs	r6, #31
    7764:	40f1      	lsrs	r1, r6
    7766:	2b20      	cmp	r3, #32
    7768:	d100      	bne.n	776c <__aeabi_dadd+0x2dc>
    776a:	e08d      	b.n	7888 <__aeabi_dadd+0x3f8>
    776c:	2240      	movs	r2, #64	; 0x40
    776e:	1ad3      	subs	r3, r2, r3
    7770:	409d      	lsls	r5, r3
    7772:	432f      	orrs	r7, r5
    7774:	1e7d      	subs	r5, r7, #1
    7776:	41af      	sbcs	r7, r5
    7778:	2400      	movs	r4, #0
    777a:	430f      	orrs	r7, r1
    777c:	2600      	movs	r6, #0
    777e:	e744      	b.n	760a <__aeabi_dadd+0x17a>
    7780:	002b      	movs	r3, r5
    7782:	0008      	movs	r0, r1
    7784:	3b20      	subs	r3, #32
    7786:	40d8      	lsrs	r0, r3
    7788:	0003      	movs	r3, r0
    778a:	2d20      	cmp	r5, #32
    778c:	d100      	bne.n	7790 <__aeabi_dadd+0x300>
    778e:	e07d      	b.n	788c <__aeabi_dadd+0x3fc>
    7790:	2040      	movs	r0, #64	; 0x40
    7792:	1b45      	subs	r5, r0, r5
    7794:	40a9      	lsls	r1, r5
    7796:	430a      	orrs	r2, r1
    7798:	1e51      	subs	r1, r2, #1
    779a:	418a      	sbcs	r2, r1
    779c:	2100      	movs	r1, #0
    779e:	431a      	orrs	r2, r3
    77a0:	e6c7      	b.n	7532 <__aeabi_dadd+0xa2>
    77a2:	2e00      	cmp	r6, #0
    77a4:	d050      	beq.n	7848 <__aeabi_dadd+0x3b8>
    77a6:	4e1a      	ldr	r6, [pc, #104]	; (7810 <__aeabi_dadd+0x380>)
    77a8:	42b0      	cmp	r0, r6
    77aa:	d057      	beq.n	785c <__aeabi_dadd+0x3cc>
    77ac:	2680      	movs	r6, #128	; 0x80
    77ae:	426b      	negs	r3, r5
    77b0:	4699      	mov	r9, r3
    77b2:	0436      	lsls	r6, r6, #16
    77b4:	4334      	orrs	r4, r6
    77b6:	464b      	mov	r3, r9
    77b8:	2b38      	cmp	r3, #56	; 0x38
    77ba:	dd00      	ble.n	77be <__aeabi_dadd+0x32e>
    77bc:	e0d6      	b.n	796c <__aeabi_dadd+0x4dc>
    77be:	2b1f      	cmp	r3, #31
    77c0:	dd00      	ble.n	77c4 <__aeabi_dadd+0x334>
    77c2:	e135      	b.n	7a30 <__aeabi_dadd+0x5a0>
    77c4:	2620      	movs	r6, #32
    77c6:	1af5      	subs	r5, r6, r3
    77c8:	0026      	movs	r6, r4
    77ca:	40ae      	lsls	r6, r5
    77cc:	46b2      	mov	sl, r6
    77ce:	003e      	movs	r6, r7
    77d0:	40de      	lsrs	r6, r3
    77d2:	46ac      	mov	ip, r5
    77d4:	0035      	movs	r5, r6
    77d6:	4656      	mov	r6, sl
    77d8:	432e      	orrs	r6, r5
    77da:	4665      	mov	r5, ip
    77dc:	40af      	lsls	r7, r5
    77de:	1e7d      	subs	r5, r7, #1
    77e0:	41af      	sbcs	r7, r5
    77e2:	40dc      	lsrs	r4, r3
    77e4:	4337      	orrs	r7, r6
    77e6:	1bd7      	subs	r7, r2, r7
    77e8:	42ba      	cmp	r2, r7
    77ea:	4192      	sbcs	r2, r2
    77ec:	1b0c      	subs	r4, r1, r4
    77ee:	4252      	negs	r2, r2
    77f0:	1aa4      	subs	r4, r4, r2
    77f2:	0006      	movs	r6, r0
    77f4:	46d8      	mov	r8, fp
    77f6:	e6a3      	b.n	7540 <__aeabi_dadd+0xb0>
    77f8:	4664      	mov	r4, ip
    77fa:	4667      	mov	r7, ip
    77fc:	432c      	orrs	r4, r5
    77fe:	d000      	beq.n	7802 <__aeabi_dadd+0x372>
    7800:	e6a2      	b.n	7548 <__aeabi_dadd+0xb8>
    7802:	2500      	movs	r5, #0
    7804:	2600      	movs	r6, #0
    7806:	2700      	movs	r7, #0
    7808:	e706      	b.n	7618 <__aeabi_dadd+0x188>
    780a:	001e      	movs	r6, r3
    780c:	e6c4      	b.n	7598 <__aeabi_dadd+0x108>
    780e:	46c0      	nop			; (mov r8, r8)
    7810:	000007ff 	.word	0x000007ff
    7814:	ff7fffff 	.word	0xff7fffff
    7818:	800fffff 	.word	0x800fffff
    781c:	2b1f      	cmp	r3, #31
    781e:	dc63      	bgt.n	78e8 <__aeabi_dadd+0x458>
    7820:	2020      	movs	r0, #32
    7822:	1ac3      	subs	r3, r0, r3
    7824:	0008      	movs	r0, r1
    7826:	4098      	lsls	r0, r3
    7828:	469c      	mov	ip, r3
    782a:	4683      	mov	fp, r0
    782c:	4653      	mov	r3, sl
    782e:	0010      	movs	r0, r2
    7830:	40d8      	lsrs	r0, r3
    7832:	0003      	movs	r3, r0
    7834:	4658      	mov	r0, fp
    7836:	4318      	orrs	r0, r3
    7838:	4663      	mov	r3, ip
    783a:	409a      	lsls	r2, r3
    783c:	1e53      	subs	r3, r2, #1
    783e:	419a      	sbcs	r2, r3
    7840:	4653      	mov	r3, sl
    7842:	4302      	orrs	r2, r0
    7844:	40d9      	lsrs	r1, r3
    7846:	e703      	b.n	7650 <__aeabi_dadd+0x1c0>
    7848:	0026      	movs	r6, r4
    784a:	433e      	orrs	r6, r7
    784c:	d006      	beq.n	785c <__aeabi_dadd+0x3cc>
    784e:	43eb      	mvns	r3, r5
    7850:	4699      	mov	r9, r3
    7852:	2b00      	cmp	r3, #0
    7854:	d0c7      	beq.n	77e6 <__aeabi_dadd+0x356>
    7856:	4e94      	ldr	r6, [pc, #592]	; (7aa8 <__aeabi_dadd+0x618>)
    7858:	42b0      	cmp	r0, r6
    785a:	d1ac      	bne.n	77b6 <__aeabi_dadd+0x326>
    785c:	000c      	movs	r4, r1
    785e:	0017      	movs	r7, r2
    7860:	0006      	movs	r6, r0
    7862:	46d8      	mov	r8, fp
    7864:	e698      	b.n	7598 <__aeabi_dadd+0x108>
    7866:	4b90      	ldr	r3, [pc, #576]	; (7aa8 <__aeabi_dadd+0x618>)
    7868:	459a      	cmp	sl, r3
    786a:	d00b      	beq.n	7884 <__aeabi_dadd+0x3f4>
    786c:	4682      	mov	sl, r0
    786e:	e6e7      	b.n	7640 <__aeabi_dadd+0x1b0>
    7870:	2800      	cmp	r0, #0
    7872:	d000      	beq.n	7876 <__aeabi_dadd+0x3e6>
    7874:	e09e      	b.n	79b4 <__aeabi_dadd+0x524>
    7876:	0018      	movs	r0, r3
    7878:	4310      	orrs	r0, r2
    787a:	d100      	bne.n	787e <__aeabi_dadd+0x3ee>
    787c:	e0e9      	b.n	7a52 <__aeabi_dadd+0x5c2>
    787e:	001c      	movs	r4, r3
    7880:	0017      	movs	r7, r2
    7882:	46d8      	mov	r8, fp
    7884:	4e88      	ldr	r6, [pc, #544]	; (7aa8 <__aeabi_dadd+0x618>)
    7886:	e687      	b.n	7598 <__aeabi_dadd+0x108>
    7888:	2500      	movs	r5, #0
    788a:	e772      	b.n	7772 <__aeabi_dadd+0x2e2>
    788c:	2100      	movs	r1, #0
    788e:	e782      	b.n	7796 <__aeabi_dadd+0x306>
    7890:	0023      	movs	r3, r4
    7892:	433b      	orrs	r3, r7
    7894:	2e00      	cmp	r6, #0
    7896:	d000      	beq.n	789a <__aeabi_dadd+0x40a>
    7898:	e0ab      	b.n	79f2 <__aeabi_dadd+0x562>
    789a:	2b00      	cmp	r3, #0
    789c:	d100      	bne.n	78a0 <__aeabi_dadd+0x410>
    789e:	e0e7      	b.n	7a70 <__aeabi_dadd+0x5e0>
    78a0:	000b      	movs	r3, r1
    78a2:	4313      	orrs	r3, r2
    78a4:	d100      	bne.n	78a8 <__aeabi_dadd+0x418>
    78a6:	e677      	b.n	7598 <__aeabi_dadd+0x108>
    78a8:	18ba      	adds	r2, r7, r2
    78aa:	42ba      	cmp	r2, r7
    78ac:	41bf      	sbcs	r7, r7
    78ae:	1864      	adds	r4, r4, r1
    78b0:	427f      	negs	r7, r7
    78b2:	19e4      	adds	r4, r4, r7
    78b4:	0223      	lsls	r3, r4, #8
    78b6:	d400      	bmi.n	78ba <__aeabi_dadd+0x42a>
    78b8:	e0f2      	b.n	7aa0 <__aeabi_dadd+0x610>
    78ba:	4b7c      	ldr	r3, [pc, #496]	; (7aac <__aeabi_dadd+0x61c>)
    78bc:	0017      	movs	r7, r2
    78be:	401c      	ands	r4, r3
    78c0:	0006      	movs	r6, r0
    78c2:	e669      	b.n	7598 <__aeabi_dadd+0x108>
    78c4:	0020      	movs	r0, r4
    78c6:	4338      	orrs	r0, r7
    78c8:	2e00      	cmp	r6, #0
    78ca:	d1d1      	bne.n	7870 <__aeabi_dadd+0x3e0>
    78cc:	2800      	cmp	r0, #0
    78ce:	d15b      	bne.n	7988 <__aeabi_dadd+0x4f8>
    78d0:	001c      	movs	r4, r3
    78d2:	4314      	orrs	r4, r2
    78d4:	d100      	bne.n	78d8 <__aeabi_dadd+0x448>
    78d6:	e0a8      	b.n	7a2a <__aeabi_dadd+0x59a>
    78d8:	001c      	movs	r4, r3
    78da:	0017      	movs	r7, r2
    78dc:	46d8      	mov	r8, fp
    78de:	e65b      	b.n	7598 <__aeabi_dadd+0x108>
    78e0:	0006      	movs	r6, r0
    78e2:	2400      	movs	r4, #0
    78e4:	2700      	movs	r7, #0
    78e6:	e697      	b.n	7618 <__aeabi_dadd+0x188>
    78e8:	4650      	mov	r0, sl
    78ea:	000b      	movs	r3, r1
    78ec:	3820      	subs	r0, #32
    78ee:	40c3      	lsrs	r3, r0
    78f0:	4699      	mov	r9, r3
    78f2:	4653      	mov	r3, sl
    78f4:	2b20      	cmp	r3, #32
    78f6:	d100      	bne.n	78fa <__aeabi_dadd+0x46a>
    78f8:	e095      	b.n	7a26 <__aeabi_dadd+0x596>
    78fa:	2340      	movs	r3, #64	; 0x40
    78fc:	4650      	mov	r0, sl
    78fe:	1a1b      	subs	r3, r3, r0
    7900:	4099      	lsls	r1, r3
    7902:	430a      	orrs	r2, r1
    7904:	1e51      	subs	r1, r2, #1
    7906:	418a      	sbcs	r2, r1
    7908:	464b      	mov	r3, r9
    790a:	2100      	movs	r1, #0
    790c:	431a      	orrs	r2, r3
    790e:	e69f      	b.n	7650 <__aeabi_dadd+0x1c0>
    7910:	2e00      	cmp	r6, #0
    7912:	d130      	bne.n	7976 <__aeabi_dadd+0x4e6>
    7914:	0026      	movs	r6, r4
    7916:	433e      	orrs	r6, r7
    7918:	d067      	beq.n	79ea <__aeabi_dadd+0x55a>
    791a:	43db      	mvns	r3, r3
    791c:	469a      	mov	sl, r3
    791e:	2b00      	cmp	r3, #0
    7920:	d01c      	beq.n	795c <__aeabi_dadd+0x4cc>
    7922:	4e61      	ldr	r6, [pc, #388]	; (7aa8 <__aeabi_dadd+0x618>)
    7924:	42b0      	cmp	r0, r6
    7926:	d060      	beq.n	79ea <__aeabi_dadd+0x55a>
    7928:	4653      	mov	r3, sl
    792a:	2b38      	cmp	r3, #56	; 0x38
    792c:	dd00      	ble.n	7930 <__aeabi_dadd+0x4a0>
    792e:	e096      	b.n	7a5e <__aeabi_dadd+0x5ce>
    7930:	2b1f      	cmp	r3, #31
    7932:	dd00      	ble.n	7936 <__aeabi_dadd+0x4a6>
    7934:	e09f      	b.n	7a76 <__aeabi_dadd+0x5e6>
    7936:	2620      	movs	r6, #32
    7938:	1af3      	subs	r3, r6, r3
    793a:	0026      	movs	r6, r4
    793c:	409e      	lsls	r6, r3
    793e:	469c      	mov	ip, r3
    7940:	46b3      	mov	fp, r6
    7942:	4653      	mov	r3, sl
    7944:	003e      	movs	r6, r7
    7946:	40de      	lsrs	r6, r3
    7948:	0033      	movs	r3, r6
    794a:	465e      	mov	r6, fp
    794c:	431e      	orrs	r6, r3
    794e:	4663      	mov	r3, ip
    7950:	409f      	lsls	r7, r3
    7952:	1e7b      	subs	r3, r7, #1
    7954:	419f      	sbcs	r7, r3
    7956:	4653      	mov	r3, sl
    7958:	40dc      	lsrs	r4, r3
    795a:	4337      	orrs	r7, r6
    795c:	18bf      	adds	r7, r7, r2
    795e:	4297      	cmp	r7, r2
    7960:	4192      	sbcs	r2, r2
    7962:	1864      	adds	r4, r4, r1
    7964:	4252      	negs	r2, r2
    7966:	18a4      	adds	r4, r4, r2
    7968:	0006      	movs	r6, r0
    796a:	e678      	b.n	765e <__aeabi_dadd+0x1ce>
    796c:	4327      	orrs	r7, r4
    796e:	1e7c      	subs	r4, r7, #1
    7970:	41a7      	sbcs	r7, r4
    7972:	2400      	movs	r4, #0
    7974:	e737      	b.n	77e6 <__aeabi_dadd+0x356>
    7976:	4e4c      	ldr	r6, [pc, #304]	; (7aa8 <__aeabi_dadd+0x618>)
    7978:	42b0      	cmp	r0, r6
    797a:	d036      	beq.n	79ea <__aeabi_dadd+0x55a>
    797c:	2680      	movs	r6, #128	; 0x80
    797e:	425b      	negs	r3, r3
    7980:	0436      	lsls	r6, r6, #16
    7982:	469a      	mov	sl, r3
    7984:	4334      	orrs	r4, r6
    7986:	e7cf      	b.n	7928 <__aeabi_dadd+0x498>
    7988:	0018      	movs	r0, r3
    798a:	4310      	orrs	r0, r2
    798c:	d100      	bne.n	7990 <__aeabi_dadd+0x500>
    798e:	e603      	b.n	7598 <__aeabi_dadd+0x108>
    7990:	1ab8      	subs	r0, r7, r2
    7992:	4684      	mov	ip, r0
    7994:	4567      	cmp	r7, ip
    7996:	41ad      	sbcs	r5, r5
    7998:	1ae0      	subs	r0, r4, r3
    799a:	426d      	negs	r5, r5
    799c:	1b40      	subs	r0, r0, r5
    799e:	0205      	lsls	r5, r0, #8
    79a0:	d400      	bmi.n	79a4 <__aeabi_dadd+0x514>
    79a2:	e62c      	b.n	75fe <__aeabi_dadd+0x16e>
    79a4:	1bd7      	subs	r7, r2, r7
    79a6:	42ba      	cmp	r2, r7
    79a8:	4192      	sbcs	r2, r2
    79aa:	1b1c      	subs	r4, r3, r4
    79ac:	4252      	negs	r2, r2
    79ae:	1aa4      	subs	r4, r4, r2
    79b0:	46d8      	mov	r8, fp
    79b2:	e5f1      	b.n	7598 <__aeabi_dadd+0x108>
    79b4:	0018      	movs	r0, r3
    79b6:	4310      	orrs	r0, r2
    79b8:	d100      	bne.n	79bc <__aeabi_dadd+0x52c>
    79ba:	e763      	b.n	7884 <__aeabi_dadd+0x3f4>
    79bc:	08f8      	lsrs	r0, r7, #3
    79be:	0767      	lsls	r7, r4, #29
    79c0:	4307      	orrs	r7, r0
    79c2:	2080      	movs	r0, #128	; 0x80
    79c4:	08e4      	lsrs	r4, r4, #3
    79c6:	0300      	lsls	r0, r0, #12
    79c8:	4204      	tst	r4, r0
    79ca:	d008      	beq.n	79de <__aeabi_dadd+0x54e>
    79cc:	08dd      	lsrs	r5, r3, #3
    79ce:	4205      	tst	r5, r0
    79d0:	d105      	bne.n	79de <__aeabi_dadd+0x54e>
    79d2:	08d2      	lsrs	r2, r2, #3
    79d4:	0759      	lsls	r1, r3, #29
    79d6:	4311      	orrs	r1, r2
    79d8:	000f      	movs	r7, r1
    79da:	002c      	movs	r4, r5
    79dc:	46d8      	mov	r8, fp
    79de:	0f7b      	lsrs	r3, r7, #29
    79e0:	00e4      	lsls	r4, r4, #3
    79e2:	431c      	orrs	r4, r3
    79e4:	00ff      	lsls	r7, r7, #3
    79e6:	4e30      	ldr	r6, [pc, #192]	; (7aa8 <__aeabi_dadd+0x618>)
    79e8:	e5d6      	b.n	7598 <__aeabi_dadd+0x108>
    79ea:	000c      	movs	r4, r1
    79ec:	0017      	movs	r7, r2
    79ee:	0006      	movs	r6, r0
    79f0:	e5d2      	b.n	7598 <__aeabi_dadd+0x108>
    79f2:	2b00      	cmp	r3, #0
    79f4:	d038      	beq.n	7a68 <__aeabi_dadd+0x5d8>
    79f6:	000b      	movs	r3, r1
    79f8:	4313      	orrs	r3, r2
    79fa:	d100      	bne.n	79fe <__aeabi_dadd+0x56e>
    79fc:	e742      	b.n	7884 <__aeabi_dadd+0x3f4>
    79fe:	08f8      	lsrs	r0, r7, #3
    7a00:	0767      	lsls	r7, r4, #29
    7a02:	4307      	orrs	r7, r0
    7a04:	2080      	movs	r0, #128	; 0x80
    7a06:	08e4      	lsrs	r4, r4, #3
    7a08:	0300      	lsls	r0, r0, #12
    7a0a:	4204      	tst	r4, r0
    7a0c:	d0e7      	beq.n	79de <__aeabi_dadd+0x54e>
    7a0e:	08cb      	lsrs	r3, r1, #3
    7a10:	4203      	tst	r3, r0
    7a12:	d1e4      	bne.n	79de <__aeabi_dadd+0x54e>
    7a14:	08d2      	lsrs	r2, r2, #3
    7a16:	0749      	lsls	r1, r1, #29
    7a18:	4311      	orrs	r1, r2
    7a1a:	000f      	movs	r7, r1
    7a1c:	001c      	movs	r4, r3
    7a1e:	e7de      	b.n	79de <__aeabi_dadd+0x54e>
    7a20:	2700      	movs	r7, #0
    7a22:	2400      	movs	r4, #0
    7a24:	e5d5      	b.n	75d2 <__aeabi_dadd+0x142>
    7a26:	2100      	movs	r1, #0
    7a28:	e76b      	b.n	7902 <__aeabi_dadd+0x472>
    7a2a:	2500      	movs	r5, #0
    7a2c:	2700      	movs	r7, #0
    7a2e:	e5f3      	b.n	7618 <__aeabi_dadd+0x188>
    7a30:	464e      	mov	r6, r9
    7a32:	0025      	movs	r5, r4
    7a34:	3e20      	subs	r6, #32
    7a36:	40f5      	lsrs	r5, r6
    7a38:	464b      	mov	r3, r9
    7a3a:	002e      	movs	r6, r5
    7a3c:	2b20      	cmp	r3, #32
    7a3e:	d02d      	beq.n	7a9c <__aeabi_dadd+0x60c>
    7a40:	2540      	movs	r5, #64	; 0x40
    7a42:	1aed      	subs	r5, r5, r3
    7a44:	40ac      	lsls	r4, r5
    7a46:	4327      	orrs	r7, r4
    7a48:	1e7c      	subs	r4, r7, #1
    7a4a:	41a7      	sbcs	r7, r4
    7a4c:	2400      	movs	r4, #0
    7a4e:	4337      	orrs	r7, r6
    7a50:	e6c9      	b.n	77e6 <__aeabi_dadd+0x356>
    7a52:	2480      	movs	r4, #128	; 0x80
    7a54:	2500      	movs	r5, #0
    7a56:	0324      	lsls	r4, r4, #12
    7a58:	4e13      	ldr	r6, [pc, #76]	; (7aa8 <__aeabi_dadd+0x618>)
    7a5a:	2700      	movs	r7, #0
    7a5c:	e5dc      	b.n	7618 <__aeabi_dadd+0x188>
    7a5e:	4327      	orrs	r7, r4
    7a60:	1e7c      	subs	r4, r7, #1
    7a62:	41a7      	sbcs	r7, r4
    7a64:	2400      	movs	r4, #0
    7a66:	e779      	b.n	795c <__aeabi_dadd+0x4cc>
    7a68:	000c      	movs	r4, r1
    7a6a:	0017      	movs	r7, r2
    7a6c:	4e0e      	ldr	r6, [pc, #56]	; (7aa8 <__aeabi_dadd+0x618>)
    7a6e:	e593      	b.n	7598 <__aeabi_dadd+0x108>
    7a70:	000c      	movs	r4, r1
    7a72:	0017      	movs	r7, r2
    7a74:	e590      	b.n	7598 <__aeabi_dadd+0x108>
    7a76:	4656      	mov	r6, sl
    7a78:	0023      	movs	r3, r4
    7a7a:	3e20      	subs	r6, #32
    7a7c:	40f3      	lsrs	r3, r6
    7a7e:	4699      	mov	r9, r3
    7a80:	4653      	mov	r3, sl
    7a82:	2b20      	cmp	r3, #32
    7a84:	d00e      	beq.n	7aa4 <__aeabi_dadd+0x614>
    7a86:	2340      	movs	r3, #64	; 0x40
    7a88:	4656      	mov	r6, sl
    7a8a:	1b9b      	subs	r3, r3, r6
    7a8c:	409c      	lsls	r4, r3
    7a8e:	4327      	orrs	r7, r4
    7a90:	1e7c      	subs	r4, r7, #1
    7a92:	41a7      	sbcs	r7, r4
    7a94:	464b      	mov	r3, r9
    7a96:	2400      	movs	r4, #0
    7a98:	431f      	orrs	r7, r3
    7a9a:	e75f      	b.n	795c <__aeabi_dadd+0x4cc>
    7a9c:	2400      	movs	r4, #0
    7a9e:	e7d2      	b.n	7a46 <__aeabi_dadd+0x5b6>
    7aa0:	0017      	movs	r7, r2
    7aa2:	e5b2      	b.n	760a <__aeabi_dadd+0x17a>
    7aa4:	2400      	movs	r4, #0
    7aa6:	e7f2      	b.n	7a8e <__aeabi_dadd+0x5fe>
    7aa8:	000007ff 	.word	0x000007ff
    7aac:	ff7fffff 	.word	0xff7fffff

00007ab0 <__aeabi_ddiv>:
    7ab0:	b5f0      	push	{r4, r5, r6, r7, lr}
    7ab2:	4657      	mov	r7, sl
    7ab4:	4645      	mov	r5, r8
    7ab6:	46de      	mov	lr, fp
    7ab8:	464e      	mov	r6, r9
    7aba:	b5e0      	push	{r5, r6, r7, lr}
    7abc:	004c      	lsls	r4, r1, #1
    7abe:	030e      	lsls	r6, r1, #12
    7ac0:	b087      	sub	sp, #28
    7ac2:	4683      	mov	fp, r0
    7ac4:	4692      	mov	sl, r2
    7ac6:	001d      	movs	r5, r3
    7ac8:	4680      	mov	r8, r0
    7aca:	0b36      	lsrs	r6, r6, #12
    7acc:	0d64      	lsrs	r4, r4, #21
    7ace:	0fcf      	lsrs	r7, r1, #31
    7ad0:	2c00      	cmp	r4, #0
    7ad2:	d04f      	beq.n	7b74 <__aeabi_ddiv+0xc4>
    7ad4:	4b6f      	ldr	r3, [pc, #444]	; (7c94 <__aeabi_ddiv+0x1e4>)
    7ad6:	429c      	cmp	r4, r3
    7ad8:	d035      	beq.n	7b46 <__aeabi_ddiv+0x96>
    7ada:	2380      	movs	r3, #128	; 0x80
    7adc:	0f42      	lsrs	r2, r0, #29
    7ade:	041b      	lsls	r3, r3, #16
    7ae0:	00f6      	lsls	r6, r6, #3
    7ae2:	4313      	orrs	r3, r2
    7ae4:	4333      	orrs	r3, r6
    7ae6:	4699      	mov	r9, r3
    7ae8:	00c3      	lsls	r3, r0, #3
    7aea:	4698      	mov	r8, r3
    7aec:	4b6a      	ldr	r3, [pc, #424]	; (7c98 <__aeabi_ddiv+0x1e8>)
    7aee:	2600      	movs	r6, #0
    7af0:	469c      	mov	ip, r3
    7af2:	2300      	movs	r3, #0
    7af4:	4464      	add	r4, ip
    7af6:	9303      	str	r3, [sp, #12]
    7af8:	032b      	lsls	r3, r5, #12
    7afa:	0b1b      	lsrs	r3, r3, #12
    7afc:	469b      	mov	fp, r3
    7afe:	006b      	lsls	r3, r5, #1
    7b00:	0fed      	lsrs	r5, r5, #31
    7b02:	4650      	mov	r0, sl
    7b04:	0d5b      	lsrs	r3, r3, #21
    7b06:	9501      	str	r5, [sp, #4]
    7b08:	d05e      	beq.n	7bc8 <__aeabi_ddiv+0x118>
    7b0a:	4a62      	ldr	r2, [pc, #392]	; (7c94 <__aeabi_ddiv+0x1e4>)
    7b0c:	4293      	cmp	r3, r2
    7b0e:	d053      	beq.n	7bb8 <__aeabi_ddiv+0x108>
    7b10:	465a      	mov	r2, fp
    7b12:	00d1      	lsls	r1, r2, #3
    7b14:	2280      	movs	r2, #128	; 0x80
    7b16:	0f40      	lsrs	r0, r0, #29
    7b18:	0412      	lsls	r2, r2, #16
    7b1a:	4302      	orrs	r2, r0
    7b1c:	430a      	orrs	r2, r1
    7b1e:	4693      	mov	fp, r2
    7b20:	4652      	mov	r2, sl
    7b22:	00d1      	lsls	r1, r2, #3
    7b24:	4a5c      	ldr	r2, [pc, #368]	; (7c98 <__aeabi_ddiv+0x1e8>)
    7b26:	4694      	mov	ip, r2
    7b28:	2200      	movs	r2, #0
    7b2a:	4463      	add	r3, ip
    7b2c:	0038      	movs	r0, r7
    7b2e:	4068      	eors	r0, r5
    7b30:	4684      	mov	ip, r0
    7b32:	9002      	str	r0, [sp, #8]
    7b34:	1ae4      	subs	r4, r4, r3
    7b36:	4316      	orrs	r6, r2
    7b38:	2e0f      	cmp	r6, #15
    7b3a:	d900      	bls.n	7b3e <__aeabi_ddiv+0x8e>
    7b3c:	e0b4      	b.n	7ca8 <__aeabi_ddiv+0x1f8>
    7b3e:	4b57      	ldr	r3, [pc, #348]	; (7c9c <__aeabi_ddiv+0x1ec>)
    7b40:	00b6      	lsls	r6, r6, #2
    7b42:	599b      	ldr	r3, [r3, r6]
    7b44:	469f      	mov	pc, r3
    7b46:	0003      	movs	r3, r0
    7b48:	4333      	orrs	r3, r6
    7b4a:	4699      	mov	r9, r3
    7b4c:	d16c      	bne.n	7c28 <__aeabi_ddiv+0x178>
    7b4e:	2300      	movs	r3, #0
    7b50:	4698      	mov	r8, r3
    7b52:	3302      	adds	r3, #2
    7b54:	2608      	movs	r6, #8
    7b56:	9303      	str	r3, [sp, #12]
    7b58:	e7ce      	b.n	7af8 <__aeabi_ddiv+0x48>
    7b5a:	46cb      	mov	fp, r9
    7b5c:	4641      	mov	r1, r8
    7b5e:	9a03      	ldr	r2, [sp, #12]
    7b60:	9701      	str	r7, [sp, #4]
    7b62:	2a02      	cmp	r2, #2
    7b64:	d165      	bne.n	7c32 <__aeabi_ddiv+0x182>
    7b66:	9b01      	ldr	r3, [sp, #4]
    7b68:	4c4a      	ldr	r4, [pc, #296]	; (7c94 <__aeabi_ddiv+0x1e4>)
    7b6a:	469c      	mov	ip, r3
    7b6c:	2300      	movs	r3, #0
    7b6e:	2200      	movs	r2, #0
    7b70:	4698      	mov	r8, r3
    7b72:	e06b      	b.n	7c4c <__aeabi_ddiv+0x19c>
    7b74:	0003      	movs	r3, r0
    7b76:	4333      	orrs	r3, r6
    7b78:	4699      	mov	r9, r3
    7b7a:	d04e      	beq.n	7c1a <__aeabi_ddiv+0x16a>
    7b7c:	2e00      	cmp	r6, #0
    7b7e:	d100      	bne.n	7b82 <__aeabi_ddiv+0xd2>
    7b80:	e1bc      	b.n	7efc <__aeabi_ddiv+0x44c>
    7b82:	0030      	movs	r0, r6
    7b84:	f001 fabc 	bl	9100 <__clzsi2>
    7b88:	0003      	movs	r3, r0
    7b8a:	3b0b      	subs	r3, #11
    7b8c:	2b1c      	cmp	r3, #28
    7b8e:	dd00      	ble.n	7b92 <__aeabi_ddiv+0xe2>
    7b90:	e1ac      	b.n	7eec <__aeabi_ddiv+0x43c>
    7b92:	221d      	movs	r2, #29
    7b94:	1ad3      	subs	r3, r2, r3
    7b96:	465a      	mov	r2, fp
    7b98:	0001      	movs	r1, r0
    7b9a:	40da      	lsrs	r2, r3
    7b9c:	3908      	subs	r1, #8
    7b9e:	408e      	lsls	r6, r1
    7ba0:	0013      	movs	r3, r2
    7ba2:	4333      	orrs	r3, r6
    7ba4:	4699      	mov	r9, r3
    7ba6:	465b      	mov	r3, fp
    7ba8:	408b      	lsls	r3, r1
    7baa:	4698      	mov	r8, r3
    7bac:	2300      	movs	r3, #0
    7bae:	4c3c      	ldr	r4, [pc, #240]	; (7ca0 <__aeabi_ddiv+0x1f0>)
    7bb0:	2600      	movs	r6, #0
    7bb2:	1a24      	subs	r4, r4, r0
    7bb4:	9303      	str	r3, [sp, #12]
    7bb6:	e79f      	b.n	7af8 <__aeabi_ddiv+0x48>
    7bb8:	4651      	mov	r1, sl
    7bba:	465a      	mov	r2, fp
    7bbc:	4311      	orrs	r1, r2
    7bbe:	d129      	bne.n	7c14 <__aeabi_ddiv+0x164>
    7bc0:	2200      	movs	r2, #0
    7bc2:	4693      	mov	fp, r2
    7bc4:	3202      	adds	r2, #2
    7bc6:	e7b1      	b.n	7b2c <__aeabi_ddiv+0x7c>
    7bc8:	4659      	mov	r1, fp
    7bca:	4301      	orrs	r1, r0
    7bcc:	d01e      	beq.n	7c0c <__aeabi_ddiv+0x15c>
    7bce:	465b      	mov	r3, fp
    7bd0:	2b00      	cmp	r3, #0
    7bd2:	d100      	bne.n	7bd6 <__aeabi_ddiv+0x126>
    7bd4:	e19e      	b.n	7f14 <__aeabi_ddiv+0x464>
    7bd6:	4658      	mov	r0, fp
    7bd8:	f001 fa92 	bl	9100 <__clzsi2>
    7bdc:	0003      	movs	r3, r0
    7bde:	3b0b      	subs	r3, #11
    7be0:	2b1c      	cmp	r3, #28
    7be2:	dd00      	ble.n	7be6 <__aeabi_ddiv+0x136>
    7be4:	e18f      	b.n	7f06 <__aeabi_ddiv+0x456>
    7be6:	0002      	movs	r2, r0
    7be8:	4659      	mov	r1, fp
    7bea:	3a08      	subs	r2, #8
    7bec:	4091      	lsls	r1, r2
    7bee:	468b      	mov	fp, r1
    7bf0:	211d      	movs	r1, #29
    7bf2:	1acb      	subs	r3, r1, r3
    7bf4:	4651      	mov	r1, sl
    7bf6:	40d9      	lsrs	r1, r3
    7bf8:	000b      	movs	r3, r1
    7bfa:	4659      	mov	r1, fp
    7bfc:	430b      	orrs	r3, r1
    7bfe:	4651      	mov	r1, sl
    7c00:	469b      	mov	fp, r3
    7c02:	4091      	lsls	r1, r2
    7c04:	4b26      	ldr	r3, [pc, #152]	; (7ca0 <__aeabi_ddiv+0x1f0>)
    7c06:	2200      	movs	r2, #0
    7c08:	1a1b      	subs	r3, r3, r0
    7c0a:	e78f      	b.n	7b2c <__aeabi_ddiv+0x7c>
    7c0c:	2300      	movs	r3, #0
    7c0e:	2201      	movs	r2, #1
    7c10:	469b      	mov	fp, r3
    7c12:	e78b      	b.n	7b2c <__aeabi_ddiv+0x7c>
    7c14:	4651      	mov	r1, sl
    7c16:	2203      	movs	r2, #3
    7c18:	e788      	b.n	7b2c <__aeabi_ddiv+0x7c>
    7c1a:	2300      	movs	r3, #0
    7c1c:	4698      	mov	r8, r3
    7c1e:	3301      	adds	r3, #1
    7c20:	2604      	movs	r6, #4
    7c22:	2400      	movs	r4, #0
    7c24:	9303      	str	r3, [sp, #12]
    7c26:	e767      	b.n	7af8 <__aeabi_ddiv+0x48>
    7c28:	2303      	movs	r3, #3
    7c2a:	46b1      	mov	r9, r6
    7c2c:	9303      	str	r3, [sp, #12]
    7c2e:	260c      	movs	r6, #12
    7c30:	e762      	b.n	7af8 <__aeabi_ddiv+0x48>
    7c32:	2a03      	cmp	r2, #3
    7c34:	d100      	bne.n	7c38 <__aeabi_ddiv+0x188>
    7c36:	e25c      	b.n	80f2 <__aeabi_ddiv+0x642>
    7c38:	9b01      	ldr	r3, [sp, #4]
    7c3a:	2a01      	cmp	r2, #1
    7c3c:	d000      	beq.n	7c40 <__aeabi_ddiv+0x190>
    7c3e:	e1e4      	b.n	800a <__aeabi_ddiv+0x55a>
    7c40:	4013      	ands	r3, r2
    7c42:	469c      	mov	ip, r3
    7c44:	2300      	movs	r3, #0
    7c46:	2400      	movs	r4, #0
    7c48:	2200      	movs	r2, #0
    7c4a:	4698      	mov	r8, r3
    7c4c:	2100      	movs	r1, #0
    7c4e:	0312      	lsls	r2, r2, #12
    7c50:	0b13      	lsrs	r3, r2, #12
    7c52:	0d0a      	lsrs	r2, r1, #20
    7c54:	0512      	lsls	r2, r2, #20
    7c56:	431a      	orrs	r2, r3
    7c58:	0523      	lsls	r3, r4, #20
    7c5a:	4c12      	ldr	r4, [pc, #72]	; (7ca4 <__aeabi_ddiv+0x1f4>)
    7c5c:	4640      	mov	r0, r8
    7c5e:	4022      	ands	r2, r4
    7c60:	4313      	orrs	r3, r2
    7c62:	4662      	mov	r2, ip
    7c64:	005b      	lsls	r3, r3, #1
    7c66:	07d2      	lsls	r2, r2, #31
    7c68:	085b      	lsrs	r3, r3, #1
    7c6a:	4313      	orrs	r3, r2
    7c6c:	0019      	movs	r1, r3
    7c6e:	b007      	add	sp, #28
    7c70:	bc3c      	pop	{r2, r3, r4, r5}
    7c72:	4690      	mov	r8, r2
    7c74:	4699      	mov	r9, r3
    7c76:	46a2      	mov	sl, r4
    7c78:	46ab      	mov	fp, r5
    7c7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7c7c:	2300      	movs	r3, #0
    7c7e:	2280      	movs	r2, #128	; 0x80
    7c80:	469c      	mov	ip, r3
    7c82:	0312      	lsls	r2, r2, #12
    7c84:	4698      	mov	r8, r3
    7c86:	4c03      	ldr	r4, [pc, #12]	; (7c94 <__aeabi_ddiv+0x1e4>)
    7c88:	e7e0      	b.n	7c4c <__aeabi_ddiv+0x19c>
    7c8a:	2300      	movs	r3, #0
    7c8c:	4c01      	ldr	r4, [pc, #4]	; (7c94 <__aeabi_ddiv+0x1e4>)
    7c8e:	2200      	movs	r2, #0
    7c90:	4698      	mov	r8, r3
    7c92:	e7db      	b.n	7c4c <__aeabi_ddiv+0x19c>
    7c94:	000007ff 	.word	0x000007ff
    7c98:	fffffc01 	.word	0xfffffc01
    7c9c:	00009cf0 	.word	0x00009cf0
    7ca0:	fffffc0d 	.word	0xfffffc0d
    7ca4:	800fffff 	.word	0x800fffff
    7ca8:	45d9      	cmp	r9, fp
    7caa:	d900      	bls.n	7cae <__aeabi_ddiv+0x1fe>
    7cac:	e139      	b.n	7f22 <__aeabi_ddiv+0x472>
    7cae:	d100      	bne.n	7cb2 <__aeabi_ddiv+0x202>
    7cb0:	e134      	b.n	7f1c <__aeabi_ddiv+0x46c>
    7cb2:	2300      	movs	r3, #0
    7cb4:	4646      	mov	r6, r8
    7cb6:	464d      	mov	r5, r9
    7cb8:	469a      	mov	sl, r3
    7cba:	3c01      	subs	r4, #1
    7cbc:	465b      	mov	r3, fp
    7cbe:	0e0a      	lsrs	r2, r1, #24
    7cc0:	021b      	lsls	r3, r3, #8
    7cc2:	431a      	orrs	r2, r3
    7cc4:	020b      	lsls	r3, r1, #8
    7cc6:	0c17      	lsrs	r7, r2, #16
    7cc8:	9303      	str	r3, [sp, #12]
    7cca:	0413      	lsls	r3, r2, #16
    7ccc:	0c1b      	lsrs	r3, r3, #16
    7cce:	0039      	movs	r1, r7
    7cd0:	0028      	movs	r0, r5
    7cd2:	4690      	mov	r8, r2
    7cd4:	9301      	str	r3, [sp, #4]
    7cd6:	f7ff f93d 	bl	6f54 <__udivsi3>
    7cda:	0002      	movs	r2, r0
    7cdc:	9b01      	ldr	r3, [sp, #4]
    7cde:	4683      	mov	fp, r0
    7ce0:	435a      	muls	r2, r3
    7ce2:	0028      	movs	r0, r5
    7ce4:	0039      	movs	r1, r7
    7ce6:	4691      	mov	r9, r2
    7ce8:	f7ff f9ba 	bl	7060 <__aeabi_uidivmod>
    7cec:	0c35      	lsrs	r5, r6, #16
    7cee:	0409      	lsls	r1, r1, #16
    7cf0:	430d      	orrs	r5, r1
    7cf2:	45a9      	cmp	r9, r5
    7cf4:	d90d      	bls.n	7d12 <__aeabi_ddiv+0x262>
    7cf6:	465b      	mov	r3, fp
    7cf8:	4445      	add	r5, r8
    7cfa:	3b01      	subs	r3, #1
    7cfc:	45a8      	cmp	r8, r5
    7cfe:	d900      	bls.n	7d02 <__aeabi_ddiv+0x252>
    7d00:	e13a      	b.n	7f78 <__aeabi_ddiv+0x4c8>
    7d02:	45a9      	cmp	r9, r5
    7d04:	d800      	bhi.n	7d08 <__aeabi_ddiv+0x258>
    7d06:	e137      	b.n	7f78 <__aeabi_ddiv+0x4c8>
    7d08:	2302      	movs	r3, #2
    7d0a:	425b      	negs	r3, r3
    7d0c:	469c      	mov	ip, r3
    7d0e:	4445      	add	r5, r8
    7d10:	44e3      	add	fp, ip
    7d12:	464b      	mov	r3, r9
    7d14:	1aeb      	subs	r3, r5, r3
    7d16:	0039      	movs	r1, r7
    7d18:	0018      	movs	r0, r3
    7d1a:	9304      	str	r3, [sp, #16]
    7d1c:	f7ff f91a 	bl	6f54 <__udivsi3>
    7d20:	9b01      	ldr	r3, [sp, #4]
    7d22:	0005      	movs	r5, r0
    7d24:	4343      	muls	r3, r0
    7d26:	0039      	movs	r1, r7
    7d28:	9804      	ldr	r0, [sp, #16]
    7d2a:	4699      	mov	r9, r3
    7d2c:	f7ff f998 	bl	7060 <__aeabi_uidivmod>
    7d30:	0433      	lsls	r3, r6, #16
    7d32:	0409      	lsls	r1, r1, #16
    7d34:	0c1b      	lsrs	r3, r3, #16
    7d36:	430b      	orrs	r3, r1
    7d38:	4599      	cmp	r9, r3
    7d3a:	d909      	bls.n	7d50 <__aeabi_ddiv+0x2a0>
    7d3c:	4443      	add	r3, r8
    7d3e:	1e6a      	subs	r2, r5, #1
    7d40:	4598      	cmp	r8, r3
    7d42:	d900      	bls.n	7d46 <__aeabi_ddiv+0x296>
    7d44:	e11a      	b.n	7f7c <__aeabi_ddiv+0x4cc>
    7d46:	4599      	cmp	r9, r3
    7d48:	d800      	bhi.n	7d4c <__aeabi_ddiv+0x29c>
    7d4a:	e117      	b.n	7f7c <__aeabi_ddiv+0x4cc>
    7d4c:	3d02      	subs	r5, #2
    7d4e:	4443      	add	r3, r8
    7d50:	464a      	mov	r2, r9
    7d52:	1a9b      	subs	r3, r3, r2
    7d54:	465a      	mov	r2, fp
    7d56:	0412      	lsls	r2, r2, #16
    7d58:	432a      	orrs	r2, r5
    7d5a:	9903      	ldr	r1, [sp, #12]
    7d5c:	4693      	mov	fp, r2
    7d5e:	0c10      	lsrs	r0, r2, #16
    7d60:	0c0a      	lsrs	r2, r1, #16
    7d62:	4691      	mov	r9, r2
    7d64:	0409      	lsls	r1, r1, #16
    7d66:	465a      	mov	r2, fp
    7d68:	0c09      	lsrs	r1, r1, #16
    7d6a:	464e      	mov	r6, r9
    7d6c:	000d      	movs	r5, r1
    7d6e:	0412      	lsls	r2, r2, #16
    7d70:	0c12      	lsrs	r2, r2, #16
    7d72:	4345      	muls	r5, r0
    7d74:	9105      	str	r1, [sp, #20]
    7d76:	4351      	muls	r1, r2
    7d78:	4372      	muls	r2, r6
    7d7a:	4370      	muls	r0, r6
    7d7c:	1952      	adds	r2, r2, r5
    7d7e:	0c0e      	lsrs	r6, r1, #16
    7d80:	18b2      	adds	r2, r6, r2
    7d82:	4295      	cmp	r5, r2
    7d84:	d903      	bls.n	7d8e <__aeabi_ddiv+0x2de>
    7d86:	2580      	movs	r5, #128	; 0x80
    7d88:	026d      	lsls	r5, r5, #9
    7d8a:	46ac      	mov	ip, r5
    7d8c:	4460      	add	r0, ip
    7d8e:	0c15      	lsrs	r5, r2, #16
    7d90:	0409      	lsls	r1, r1, #16
    7d92:	0412      	lsls	r2, r2, #16
    7d94:	0c09      	lsrs	r1, r1, #16
    7d96:	1828      	adds	r0, r5, r0
    7d98:	1852      	adds	r2, r2, r1
    7d9a:	4283      	cmp	r3, r0
    7d9c:	d200      	bcs.n	7da0 <__aeabi_ddiv+0x2f0>
    7d9e:	e0ce      	b.n	7f3e <__aeabi_ddiv+0x48e>
    7da0:	d100      	bne.n	7da4 <__aeabi_ddiv+0x2f4>
    7da2:	e0c8      	b.n	7f36 <__aeabi_ddiv+0x486>
    7da4:	1a1d      	subs	r5, r3, r0
    7da6:	4653      	mov	r3, sl
    7da8:	1a9e      	subs	r6, r3, r2
    7daa:	45b2      	cmp	sl, r6
    7dac:	4192      	sbcs	r2, r2
    7dae:	4252      	negs	r2, r2
    7db0:	1aab      	subs	r3, r5, r2
    7db2:	469a      	mov	sl, r3
    7db4:	4598      	cmp	r8, r3
    7db6:	d100      	bne.n	7dba <__aeabi_ddiv+0x30a>
    7db8:	e117      	b.n	7fea <__aeabi_ddiv+0x53a>
    7dba:	0039      	movs	r1, r7
    7dbc:	0018      	movs	r0, r3
    7dbe:	f7ff f8c9 	bl	6f54 <__udivsi3>
    7dc2:	9b01      	ldr	r3, [sp, #4]
    7dc4:	0005      	movs	r5, r0
    7dc6:	4343      	muls	r3, r0
    7dc8:	0039      	movs	r1, r7
    7dca:	4650      	mov	r0, sl
    7dcc:	9304      	str	r3, [sp, #16]
    7dce:	f7ff f947 	bl	7060 <__aeabi_uidivmod>
    7dd2:	9804      	ldr	r0, [sp, #16]
    7dd4:	040b      	lsls	r3, r1, #16
    7dd6:	0c31      	lsrs	r1, r6, #16
    7dd8:	4319      	orrs	r1, r3
    7dda:	4288      	cmp	r0, r1
    7ddc:	d909      	bls.n	7df2 <__aeabi_ddiv+0x342>
    7dde:	4441      	add	r1, r8
    7de0:	1e6b      	subs	r3, r5, #1
    7de2:	4588      	cmp	r8, r1
    7de4:	d900      	bls.n	7de8 <__aeabi_ddiv+0x338>
    7de6:	e107      	b.n	7ff8 <__aeabi_ddiv+0x548>
    7de8:	4288      	cmp	r0, r1
    7dea:	d800      	bhi.n	7dee <__aeabi_ddiv+0x33e>
    7dec:	e104      	b.n	7ff8 <__aeabi_ddiv+0x548>
    7dee:	3d02      	subs	r5, #2
    7df0:	4441      	add	r1, r8
    7df2:	9b04      	ldr	r3, [sp, #16]
    7df4:	1acb      	subs	r3, r1, r3
    7df6:	0018      	movs	r0, r3
    7df8:	0039      	movs	r1, r7
    7dfa:	9304      	str	r3, [sp, #16]
    7dfc:	f7ff f8aa 	bl	6f54 <__udivsi3>
    7e00:	9b01      	ldr	r3, [sp, #4]
    7e02:	4682      	mov	sl, r0
    7e04:	4343      	muls	r3, r0
    7e06:	0039      	movs	r1, r7
    7e08:	9804      	ldr	r0, [sp, #16]
    7e0a:	9301      	str	r3, [sp, #4]
    7e0c:	f7ff f928 	bl	7060 <__aeabi_uidivmod>
    7e10:	9801      	ldr	r0, [sp, #4]
    7e12:	040b      	lsls	r3, r1, #16
    7e14:	0431      	lsls	r1, r6, #16
    7e16:	0c09      	lsrs	r1, r1, #16
    7e18:	4319      	orrs	r1, r3
    7e1a:	4288      	cmp	r0, r1
    7e1c:	d90d      	bls.n	7e3a <__aeabi_ddiv+0x38a>
    7e1e:	4653      	mov	r3, sl
    7e20:	4441      	add	r1, r8
    7e22:	3b01      	subs	r3, #1
    7e24:	4588      	cmp	r8, r1
    7e26:	d900      	bls.n	7e2a <__aeabi_ddiv+0x37a>
    7e28:	e0e8      	b.n	7ffc <__aeabi_ddiv+0x54c>
    7e2a:	4288      	cmp	r0, r1
    7e2c:	d800      	bhi.n	7e30 <__aeabi_ddiv+0x380>
    7e2e:	e0e5      	b.n	7ffc <__aeabi_ddiv+0x54c>
    7e30:	2302      	movs	r3, #2
    7e32:	425b      	negs	r3, r3
    7e34:	469c      	mov	ip, r3
    7e36:	4441      	add	r1, r8
    7e38:	44e2      	add	sl, ip
    7e3a:	9b01      	ldr	r3, [sp, #4]
    7e3c:	042d      	lsls	r5, r5, #16
    7e3e:	1ace      	subs	r6, r1, r3
    7e40:	4651      	mov	r1, sl
    7e42:	4329      	orrs	r1, r5
    7e44:	9d05      	ldr	r5, [sp, #20]
    7e46:	464f      	mov	r7, r9
    7e48:	002a      	movs	r2, r5
    7e4a:	040b      	lsls	r3, r1, #16
    7e4c:	0c08      	lsrs	r0, r1, #16
    7e4e:	0c1b      	lsrs	r3, r3, #16
    7e50:	435a      	muls	r2, r3
    7e52:	4345      	muls	r5, r0
    7e54:	437b      	muls	r3, r7
    7e56:	4378      	muls	r0, r7
    7e58:	195b      	adds	r3, r3, r5
    7e5a:	0c17      	lsrs	r7, r2, #16
    7e5c:	18fb      	adds	r3, r7, r3
    7e5e:	429d      	cmp	r5, r3
    7e60:	d903      	bls.n	7e6a <__aeabi_ddiv+0x3ba>
    7e62:	2580      	movs	r5, #128	; 0x80
    7e64:	026d      	lsls	r5, r5, #9
    7e66:	46ac      	mov	ip, r5
    7e68:	4460      	add	r0, ip
    7e6a:	0c1d      	lsrs	r5, r3, #16
    7e6c:	0412      	lsls	r2, r2, #16
    7e6e:	041b      	lsls	r3, r3, #16
    7e70:	0c12      	lsrs	r2, r2, #16
    7e72:	1828      	adds	r0, r5, r0
    7e74:	189b      	adds	r3, r3, r2
    7e76:	4286      	cmp	r6, r0
    7e78:	d200      	bcs.n	7e7c <__aeabi_ddiv+0x3cc>
    7e7a:	e093      	b.n	7fa4 <__aeabi_ddiv+0x4f4>
    7e7c:	d100      	bne.n	7e80 <__aeabi_ddiv+0x3d0>
    7e7e:	e08e      	b.n	7f9e <__aeabi_ddiv+0x4ee>
    7e80:	2301      	movs	r3, #1
    7e82:	4319      	orrs	r1, r3
    7e84:	4ba0      	ldr	r3, [pc, #640]	; (8108 <__aeabi_ddiv+0x658>)
    7e86:	18e3      	adds	r3, r4, r3
    7e88:	2b00      	cmp	r3, #0
    7e8a:	dc00      	bgt.n	7e8e <__aeabi_ddiv+0x3de>
    7e8c:	e099      	b.n	7fc2 <__aeabi_ddiv+0x512>
    7e8e:	074a      	lsls	r2, r1, #29
    7e90:	d000      	beq.n	7e94 <__aeabi_ddiv+0x3e4>
    7e92:	e09e      	b.n	7fd2 <__aeabi_ddiv+0x522>
    7e94:	465a      	mov	r2, fp
    7e96:	01d2      	lsls	r2, r2, #7
    7e98:	d506      	bpl.n	7ea8 <__aeabi_ddiv+0x3f8>
    7e9a:	465a      	mov	r2, fp
    7e9c:	4b9b      	ldr	r3, [pc, #620]	; (810c <__aeabi_ddiv+0x65c>)
    7e9e:	401a      	ands	r2, r3
    7ea0:	2380      	movs	r3, #128	; 0x80
    7ea2:	4693      	mov	fp, r2
    7ea4:	00db      	lsls	r3, r3, #3
    7ea6:	18e3      	adds	r3, r4, r3
    7ea8:	4a99      	ldr	r2, [pc, #612]	; (8110 <__aeabi_ddiv+0x660>)
    7eaa:	4293      	cmp	r3, r2
    7eac:	dd68      	ble.n	7f80 <__aeabi_ddiv+0x4d0>
    7eae:	2301      	movs	r3, #1
    7eb0:	9a02      	ldr	r2, [sp, #8]
    7eb2:	4c98      	ldr	r4, [pc, #608]	; (8114 <__aeabi_ddiv+0x664>)
    7eb4:	401a      	ands	r2, r3
    7eb6:	2300      	movs	r3, #0
    7eb8:	4694      	mov	ip, r2
    7eba:	4698      	mov	r8, r3
    7ebc:	2200      	movs	r2, #0
    7ebe:	e6c5      	b.n	7c4c <__aeabi_ddiv+0x19c>
    7ec0:	2280      	movs	r2, #128	; 0x80
    7ec2:	464b      	mov	r3, r9
    7ec4:	0312      	lsls	r2, r2, #12
    7ec6:	4213      	tst	r3, r2
    7ec8:	d00a      	beq.n	7ee0 <__aeabi_ddiv+0x430>
    7eca:	465b      	mov	r3, fp
    7ecc:	4213      	tst	r3, r2
    7ece:	d106      	bne.n	7ede <__aeabi_ddiv+0x42e>
    7ed0:	431a      	orrs	r2, r3
    7ed2:	0312      	lsls	r2, r2, #12
    7ed4:	0b12      	lsrs	r2, r2, #12
    7ed6:	46ac      	mov	ip, r5
    7ed8:	4688      	mov	r8, r1
    7eda:	4c8e      	ldr	r4, [pc, #568]	; (8114 <__aeabi_ddiv+0x664>)
    7edc:	e6b6      	b.n	7c4c <__aeabi_ddiv+0x19c>
    7ede:	464b      	mov	r3, r9
    7ee0:	431a      	orrs	r2, r3
    7ee2:	0312      	lsls	r2, r2, #12
    7ee4:	0b12      	lsrs	r2, r2, #12
    7ee6:	46bc      	mov	ip, r7
    7ee8:	4c8a      	ldr	r4, [pc, #552]	; (8114 <__aeabi_ddiv+0x664>)
    7eea:	e6af      	b.n	7c4c <__aeabi_ddiv+0x19c>
    7eec:	0003      	movs	r3, r0
    7eee:	465a      	mov	r2, fp
    7ef0:	3b28      	subs	r3, #40	; 0x28
    7ef2:	409a      	lsls	r2, r3
    7ef4:	2300      	movs	r3, #0
    7ef6:	4691      	mov	r9, r2
    7ef8:	4698      	mov	r8, r3
    7efa:	e657      	b.n	7bac <__aeabi_ddiv+0xfc>
    7efc:	4658      	mov	r0, fp
    7efe:	f001 f8ff 	bl	9100 <__clzsi2>
    7f02:	3020      	adds	r0, #32
    7f04:	e640      	b.n	7b88 <__aeabi_ddiv+0xd8>
    7f06:	0003      	movs	r3, r0
    7f08:	4652      	mov	r2, sl
    7f0a:	3b28      	subs	r3, #40	; 0x28
    7f0c:	409a      	lsls	r2, r3
    7f0e:	2100      	movs	r1, #0
    7f10:	4693      	mov	fp, r2
    7f12:	e677      	b.n	7c04 <__aeabi_ddiv+0x154>
    7f14:	f001 f8f4 	bl	9100 <__clzsi2>
    7f18:	3020      	adds	r0, #32
    7f1a:	e65f      	b.n	7bdc <__aeabi_ddiv+0x12c>
    7f1c:	4588      	cmp	r8, r1
    7f1e:	d200      	bcs.n	7f22 <__aeabi_ddiv+0x472>
    7f20:	e6c7      	b.n	7cb2 <__aeabi_ddiv+0x202>
    7f22:	464b      	mov	r3, r9
    7f24:	07de      	lsls	r6, r3, #31
    7f26:	085d      	lsrs	r5, r3, #1
    7f28:	4643      	mov	r3, r8
    7f2a:	085b      	lsrs	r3, r3, #1
    7f2c:	431e      	orrs	r6, r3
    7f2e:	4643      	mov	r3, r8
    7f30:	07db      	lsls	r3, r3, #31
    7f32:	469a      	mov	sl, r3
    7f34:	e6c2      	b.n	7cbc <__aeabi_ddiv+0x20c>
    7f36:	2500      	movs	r5, #0
    7f38:	4592      	cmp	sl, r2
    7f3a:	d300      	bcc.n	7f3e <__aeabi_ddiv+0x48e>
    7f3c:	e733      	b.n	7da6 <__aeabi_ddiv+0x2f6>
    7f3e:	9e03      	ldr	r6, [sp, #12]
    7f40:	4659      	mov	r1, fp
    7f42:	46b4      	mov	ip, r6
    7f44:	44e2      	add	sl, ip
    7f46:	45b2      	cmp	sl, r6
    7f48:	41ad      	sbcs	r5, r5
    7f4a:	426d      	negs	r5, r5
    7f4c:	4445      	add	r5, r8
    7f4e:	18eb      	adds	r3, r5, r3
    7f50:	3901      	subs	r1, #1
    7f52:	4598      	cmp	r8, r3
    7f54:	d207      	bcs.n	7f66 <__aeabi_ddiv+0x4b6>
    7f56:	4298      	cmp	r0, r3
    7f58:	d900      	bls.n	7f5c <__aeabi_ddiv+0x4ac>
    7f5a:	e07f      	b.n	805c <__aeabi_ddiv+0x5ac>
    7f5c:	d100      	bne.n	7f60 <__aeabi_ddiv+0x4b0>
    7f5e:	e0bc      	b.n	80da <__aeabi_ddiv+0x62a>
    7f60:	1a1d      	subs	r5, r3, r0
    7f62:	468b      	mov	fp, r1
    7f64:	e71f      	b.n	7da6 <__aeabi_ddiv+0x2f6>
    7f66:	4598      	cmp	r8, r3
    7f68:	d1fa      	bne.n	7f60 <__aeabi_ddiv+0x4b0>
    7f6a:	9d03      	ldr	r5, [sp, #12]
    7f6c:	4555      	cmp	r5, sl
    7f6e:	d9f2      	bls.n	7f56 <__aeabi_ddiv+0x4a6>
    7f70:	4643      	mov	r3, r8
    7f72:	468b      	mov	fp, r1
    7f74:	1a1d      	subs	r5, r3, r0
    7f76:	e716      	b.n	7da6 <__aeabi_ddiv+0x2f6>
    7f78:	469b      	mov	fp, r3
    7f7a:	e6ca      	b.n	7d12 <__aeabi_ddiv+0x262>
    7f7c:	0015      	movs	r5, r2
    7f7e:	e6e7      	b.n	7d50 <__aeabi_ddiv+0x2a0>
    7f80:	465a      	mov	r2, fp
    7f82:	08c9      	lsrs	r1, r1, #3
    7f84:	0752      	lsls	r2, r2, #29
    7f86:	430a      	orrs	r2, r1
    7f88:	055b      	lsls	r3, r3, #21
    7f8a:	4690      	mov	r8, r2
    7f8c:	0d5c      	lsrs	r4, r3, #21
    7f8e:	465a      	mov	r2, fp
    7f90:	2301      	movs	r3, #1
    7f92:	9902      	ldr	r1, [sp, #8]
    7f94:	0252      	lsls	r2, r2, #9
    7f96:	4019      	ands	r1, r3
    7f98:	0b12      	lsrs	r2, r2, #12
    7f9a:	468c      	mov	ip, r1
    7f9c:	e656      	b.n	7c4c <__aeabi_ddiv+0x19c>
    7f9e:	2b00      	cmp	r3, #0
    7fa0:	d100      	bne.n	7fa4 <__aeabi_ddiv+0x4f4>
    7fa2:	e76f      	b.n	7e84 <__aeabi_ddiv+0x3d4>
    7fa4:	4446      	add	r6, r8
    7fa6:	1e4a      	subs	r2, r1, #1
    7fa8:	45b0      	cmp	r8, r6
    7faa:	d929      	bls.n	8000 <__aeabi_ddiv+0x550>
    7fac:	0011      	movs	r1, r2
    7fae:	4286      	cmp	r6, r0
    7fb0:	d000      	beq.n	7fb4 <__aeabi_ddiv+0x504>
    7fb2:	e765      	b.n	7e80 <__aeabi_ddiv+0x3d0>
    7fb4:	9a03      	ldr	r2, [sp, #12]
    7fb6:	4293      	cmp	r3, r2
    7fb8:	d000      	beq.n	7fbc <__aeabi_ddiv+0x50c>
    7fba:	e761      	b.n	7e80 <__aeabi_ddiv+0x3d0>
    7fbc:	e762      	b.n	7e84 <__aeabi_ddiv+0x3d4>
    7fbe:	2101      	movs	r1, #1
    7fc0:	4249      	negs	r1, r1
    7fc2:	2001      	movs	r0, #1
    7fc4:	1ac2      	subs	r2, r0, r3
    7fc6:	2a38      	cmp	r2, #56	; 0x38
    7fc8:	dd21      	ble.n	800e <__aeabi_ddiv+0x55e>
    7fca:	9b02      	ldr	r3, [sp, #8]
    7fcc:	4003      	ands	r3, r0
    7fce:	469c      	mov	ip, r3
    7fd0:	e638      	b.n	7c44 <__aeabi_ddiv+0x194>
    7fd2:	220f      	movs	r2, #15
    7fd4:	400a      	ands	r2, r1
    7fd6:	2a04      	cmp	r2, #4
    7fd8:	d100      	bne.n	7fdc <__aeabi_ddiv+0x52c>
    7fda:	e75b      	b.n	7e94 <__aeabi_ddiv+0x3e4>
    7fdc:	000a      	movs	r2, r1
    7fde:	1d11      	adds	r1, r2, #4
    7fe0:	4291      	cmp	r1, r2
    7fe2:	4192      	sbcs	r2, r2
    7fe4:	4252      	negs	r2, r2
    7fe6:	4493      	add	fp, r2
    7fe8:	e754      	b.n	7e94 <__aeabi_ddiv+0x3e4>
    7fea:	4b47      	ldr	r3, [pc, #284]	; (8108 <__aeabi_ddiv+0x658>)
    7fec:	18e3      	adds	r3, r4, r3
    7fee:	2b00      	cmp	r3, #0
    7ff0:	dde5      	ble.n	7fbe <__aeabi_ddiv+0x50e>
    7ff2:	2201      	movs	r2, #1
    7ff4:	4252      	negs	r2, r2
    7ff6:	e7f2      	b.n	7fde <__aeabi_ddiv+0x52e>
    7ff8:	001d      	movs	r5, r3
    7ffa:	e6fa      	b.n	7df2 <__aeabi_ddiv+0x342>
    7ffc:	469a      	mov	sl, r3
    7ffe:	e71c      	b.n	7e3a <__aeabi_ddiv+0x38a>
    8000:	42b0      	cmp	r0, r6
    8002:	d839      	bhi.n	8078 <__aeabi_ddiv+0x5c8>
    8004:	d06e      	beq.n	80e4 <__aeabi_ddiv+0x634>
    8006:	0011      	movs	r1, r2
    8008:	e73a      	b.n	7e80 <__aeabi_ddiv+0x3d0>
    800a:	9302      	str	r3, [sp, #8]
    800c:	e73a      	b.n	7e84 <__aeabi_ddiv+0x3d4>
    800e:	2a1f      	cmp	r2, #31
    8010:	dc3c      	bgt.n	808c <__aeabi_ddiv+0x5dc>
    8012:	2320      	movs	r3, #32
    8014:	1a9b      	subs	r3, r3, r2
    8016:	000c      	movs	r4, r1
    8018:	4658      	mov	r0, fp
    801a:	4099      	lsls	r1, r3
    801c:	4098      	lsls	r0, r3
    801e:	1e4b      	subs	r3, r1, #1
    8020:	4199      	sbcs	r1, r3
    8022:	465b      	mov	r3, fp
    8024:	40d4      	lsrs	r4, r2
    8026:	40d3      	lsrs	r3, r2
    8028:	4320      	orrs	r0, r4
    802a:	4308      	orrs	r0, r1
    802c:	001a      	movs	r2, r3
    802e:	0743      	lsls	r3, r0, #29
    8030:	d009      	beq.n	8046 <__aeabi_ddiv+0x596>
    8032:	230f      	movs	r3, #15
    8034:	4003      	ands	r3, r0
    8036:	2b04      	cmp	r3, #4
    8038:	d005      	beq.n	8046 <__aeabi_ddiv+0x596>
    803a:	0001      	movs	r1, r0
    803c:	1d08      	adds	r0, r1, #4
    803e:	4288      	cmp	r0, r1
    8040:	419b      	sbcs	r3, r3
    8042:	425b      	negs	r3, r3
    8044:	18d2      	adds	r2, r2, r3
    8046:	0213      	lsls	r3, r2, #8
    8048:	d53a      	bpl.n	80c0 <__aeabi_ddiv+0x610>
    804a:	2301      	movs	r3, #1
    804c:	9a02      	ldr	r2, [sp, #8]
    804e:	2401      	movs	r4, #1
    8050:	401a      	ands	r2, r3
    8052:	2300      	movs	r3, #0
    8054:	4694      	mov	ip, r2
    8056:	4698      	mov	r8, r3
    8058:	2200      	movs	r2, #0
    805a:	e5f7      	b.n	7c4c <__aeabi_ddiv+0x19c>
    805c:	2102      	movs	r1, #2
    805e:	4249      	negs	r1, r1
    8060:	468c      	mov	ip, r1
    8062:	9d03      	ldr	r5, [sp, #12]
    8064:	44e3      	add	fp, ip
    8066:	46ac      	mov	ip, r5
    8068:	44e2      	add	sl, ip
    806a:	45aa      	cmp	sl, r5
    806c:	41ad      	sbcs	r5, r5
    806e:	426d      	negs	r5, r5
    8070:	4445      	add	r5, r8
    8072:	18ed      	adds	r5, r5, r3
    8074:	1a2d      	subs	r5, r5, r0
    8076:	e696      	b.n	7da6 <__aeabi_ddiv+0x2f6>
    8078:	1e8a      	subs	r2, r1, #2
    807a:	9903      	ldr	r1, [sp, #12]
    807c:	004d      	lsls	r5, r1, #1
    807e:	428d      	cmp	r5, r1
    8080:	4189      	sbcs	r1, r1
    8082:	4249      	negs	r1, r1
    8084:	4441      	add	r1, r8
    8086:	1876      	adds	r6, r6, r1
    8088:	9503      	str	r5, [sp, #12]
    808a:	e78f      	b.n	7fac <__aeabi_ddiv+0x4fc>
    808c:	201f      	movs	r0, #31
    808e:	4240      	negs	r0, r0
    8090:	1ac3      	subs	r3, r0, r3
    8092:	4658      	mov	r0, fp
    8094:	40d8      	lsrs	r0, r3
    8096:	0003      	movs	r3, r0
    8098:	2a20      	cmp	r2, #32
    809a:	d028      	beq.n	80ee <__aeabi_ddiv+0x63e>
    809c:	2040      	movs	r0, #64	; 0x40
    809e:	465d      	mov	r5, fp
    80a0:	1a82      	subs	r2, r0, r2
    80a2:	4095      	lsls	r5, r2
    80a4:	4329      	orrs	r1, r5
    80a6:	1e4a      	subs	r2, r1, #1
    80a8:	4191      	sbcs	r1, r2
    80aa:	4319      	orrs	r1, r3
    80ac:	2307      	movs	r3, #7
    80ae:	2200      	movs	r2, #0
    80b0:	400b      	ands	r3, r1
    80b2:	d009      	beq.n	80c8 <__aeabi_ddiv+0x618>
    80b4:	230f      	movs	r3, #15
    80b6:	2200      	movs	r2, #0
    80b8:	400b      	ands	r3, r1
    80ba:	0008      	movs	r0, r1
    80bc:	2b04      	cmp	r3, #4
    80be:	d1bd      	bne.n	803c <__aeabi_ddiv+0x58c>
    80c0:	0001      	movs	r1, r0
    80c2:	0753      	lsls	r3, r2, #29
    80c4:	0252      	lsls	r2, r2, #9
    80c6:	0b12      	lsrs	r2, r2, #12
    80c8:	08c9      	lsrs	r1, r1, #3
    80ca:	4319      	orrs	r1, r3
    80cc:	2301      	movs	r3, #1
    80ce:	4688      	mov	r8, r1
    80d0:	9902      	ldr	r1, [sp, #8]
    80d2:	2400      	movs	r4, #0
    80d4:	4019      	ands	r1, r3
    80d6:	468c      	mov	ip, r1
    80d8:	e5b8      	b.n	7c4c <__aeabi_ddiv+0x19c>
    80da:	4552      	cmp	r2, sl
    80dc:	d8be      	bhi.n	805c <__aeabi_ddiv+0x5ac>
    80de:	468b      	mov	fp, r1
    80e0:	2500      	movs	r5, #0
    80e2:	e660      	b.n	7da6 <__aeabi_ddiv+0x2f6>
    80e4:	9d03      	ldr	r5, [sp, #12]
    80e6:	429d      	cmp	r5, r3
    80e8:	d3c6      	bcc.n	8078 <__aeabi_ddiv+0x5c8>
    80ea:	0011      	movs	r1, r2
    80ec:	e762      	b.n	7fb4 <__aeabi_ddiv+0x504>
    80ee:	2500      	movs	r5, #0
    80f0:	e7d8      	b.n	80a4 <__aeabi_ddiv+0x5f4>
    80f2:	2280      	movs	r2, #128	; 0x80
    80f4:	465b      	mov	r3, fp
    80f6:	0312      	lsls	r2, r2, #12
    80f8:	431a      	orrs	r2, r3
    80fa:	9b01      	ldr	r3, [sp, #4]
    80fc:	0312      	lsls	r2, r2, #12
    80fe:	0b12      	lsrs	r2, r2, #12
    8100:	469c      	mov	ip, r3
    8102:	4688      	mov	r8, r1
    8104:	4c03      	ldr	r4, [pc, #12]	; (8114 <__aeabi_ddiv+0x664>)
    8106:	e5a1      	b.n	7c4c <__aeabi_ddiv+0x19c>
    8108:	000003ff 	.word	0x000003ff
    810c:	feffffff 	.word	0xfeffffff
    8110:	000007fe 	.word	0x000007fe
    8114:	000007ff 	.word	0x000007ff

00008118 <__eqdf2>:
    8118:	b5f0      	push	{r4, r5, r6, r7, lr}
    811a:	464f      	mov	r7, r9
    811c:	4646      	mov	r6, r8
    811e:	46d6      	mov	lr, sl
    8120:	005c      	lsls	r4, r3, #1
    8122:	b5c0      	push	{r6, r7, lr}
    8124:	031f      	lsls	r7, r3, #12
    8126:	0fdb      	lsrs	r3, r3, #31
    8128:	469a      	mov	sl, r3
    812a:	4b17      	ldr	r3, [pc, #92]	; (8188 <__eqdf2+0x70>)
    812c:	030e      	lsls	r6, r1, #12
    812e:	004d      	lsls	r5, r1, #1
    8130:	4684      	mov	ip, r0
    8132:	4680      	mov	r8, r0
    8134:	0b36      	lsrs	r6, r6, #12
    8136:	0d6d      	lsrs	r5, r5, #21
    8138:	0fc9      	lsrs	r1, r1, #31
    813a:	4691      	mov	r9, r2
    813c:	0b3f      	lsrs	r7, r7, #12
    813e:	0d64      	lsrs	r4, r4, #21
    8140:	2001      	movs	r0, #1
    8142:	429d      	cmp	r5, r3
    8144:	d008      	beq.n	8158 <__eqdf2+0x40>
    8146:	429c      	cmp	r4, r3
    8148:	d001      	beq.n	814e <__eqdf2+0x36>
    814a:	42a5      	cmp	r5, r4
    814c:	d00b      	beq.n	8166 <__eqdf2+0x4e>
    814e:	bc1c      	pop	{r2, r3, r4}
    8150:	4690      	mov	r8, r2
    8152:	4699      	mov	r9, r3
    8154:	46a2      	mov	sl, r4
    8156:	bdf0      	pop	{r4, r5, r6, r7, pc}
    8158:	4663      	mov	r3, ip
    815a:	4333      	orrs	r3, r6
    815c:	d1f7      	bne.n	814e <__eqdf2+0x36>
    815e:	42ac      	cmp	r4, r5
    8160:	d1f5      	bne.n	814e <__eqdf2+0x36>
    8162:	433a      	orrs	r2, r7
    8164:	d1f3      	bne.n	814e <__eqdf2+0x36>
    8166:	2001      	movs	r0, #1
    8168:	42be      	cmp	r6, r7
    816a:	d1f0      	bne.n	814e <__eqdf2+0x36>
    816c:	45c8      	cmp	r8, r9
    816e:	d1ee      	bne.n	814e <__eqdf2+0x36>
    8170:	4551      	cmp	r1, sl
    8172:	d007      	beq.n	8184 <__eqdf2+0x6c>
    8174:	2d00      	cmp	r5, #0
    8176:	d1ea      	bne.n	814e <__eqdf2+0x36>
    8178:	4663      	mov	r3, ip
    817a:	431e      	orrs	r6, r3
    817c:	0030      	movs	r0, r6
    817e:	1e46      	subs	r6, r0, #1
    8180:	41b0      	sbcs	r0, r6
    8182:	e7e4      	b.n	814e <__eqdf2+0x36>
    8184:	2000      	movs	r0, #0
    8186:	e7e2      	b.n	814e <__eqdf2+0x36>
    8188:	000007ff 	.word	0x000007ff

0000818c <__gedf2>:
    818c:	b5f0      	push	{r4, r5, r6, r7, lr}
    818e:	4645      	mov	r5, r8
    8190:	46de      	mov	lr, fp
    8192:	4657      	mov	r7, sl
    8194:	464e      	mov	r6, r9
    8196:	b5e0      	push	{r5, r6, r7, lr}
    8198:	031f      	lsls	r7, r3, #12
    819a:	0b3d      	lsrs	r5, r7, #12
    819c:	4f2c      	ldr	r7, [pc, #176]	; (8250 <__gedf2+0xc4>)
    819e:	030e      	lsls	r6, r1, #12
    81a0:	004c      	lsls	r4, r1, #1
    81a2:	46ab      	mov	fp, r5
    81a4:	005d      	lsls	r5, r3, #1
    81a6:	4684      	mov	ip, r0
    81a8:	0b36      	lsrs	r6, r6, #12
    81aa:	0d64      	lsrs	r4, r4, #21
    81ac:	0fc9      	lsrs	r1, r1, #31
    81ae:	4690      	mov	r8, r2
    81b0:	0d6d      	lsrs	r5, r5, #21
    81b2:	0fdb      	lsrs	r3, r3, #31
    81b4:	42bc      	cmp	r4, r7
    81b6:	d02a      	beq.n	820e <__gedf2+0x82>
    81b8:	4f25      	ldr	r7, [pc, #148]	; (8250 <__gedf2+0xc4>)
    81ba:	42bd      	cmp	r5, r7
    81bc:	d02d      	beq.n	821a <__gedf2+0x8e>
    81be:	2c00      	cmp	r4, #0
    81c0:	d10f      	bne.n	81e2 <__gedf2+0x56>
    81c2:	4330      	orrs	r0, r6
    81c4:	0007      	movs	r7, r0
    81c6:	4681      	mov	r9, r0
    81c8:	4278      	negs	r0, r7
    81ca:	4178      	adcs	r0, r7
    81cc:	b2c0      	uxtb	r0, r0
    81ce:	2d00      	cmp	r5, #0
    81d0:	d117      	bne.n	8202 <__gedf2+0x76>
    81d2:	465f      	mov	r7, fp
    81d4:	433a      	orrs	r2, r7
    81d6:	d114      	bne.n	8202 <__gedf2+0x76>
    81d8:	464b      	mov	r3, r9
    81da:	2000      	movs	r0, #0
    81dc:	2b00      	cmp	r3, #0
    81de:	d00a      	beq.n	81f6 <__gedf2+0x6a>
    81e0:	e006      	b.n	81f0 <__gedf2+0x64>
    81e2:	2d00      	cmp	r5, #0
    81e4:	d102      	bne.n	81ec <__gedf2+0x60>
    81e6:	4658      	mov	r0, fp
    81e8:	4302      	orrs	r2, r0
    81ea:	d001      	beq.n	81f0 <__gedf2+0x64>
    81ec:	4299      	cmp	r1, r3
    81ee:	d018      	beq.n	8222 <__gedf2+0x96>
    81f0:	4248      	negs	r0, r1
    81f2:	2101      	movs	r1, #1
    81f4:	4308      	orrs	r0, r1
    81f6:	bc3c      	pop	{r2, r3, r4, r5}
    81f8:	4690      	mov	r8, r2
    81fa:	4699      	mov	r9, r3
    81fc:	46a2      	mov	sl, r4
    81fe:	46ab      	mov	fp, r5
    8200:	bdf0      	pop	{r4, r5, r6, r7, pc}
    8202:	2800      	cmp	r0, #0
    8204:	d0f2      	beq.n	81ec <__gedf2+0x60>
    8206:	2001      	movs	r0, #1
    8208:	3b01      	subs	r3, #1
    820a:	4318      	orrs	r0, r3
    820c:	e7f3      	b.n	81f6 <__gedf2+0x6a>
    820e:	0037      	movs	r7, r6
    8210:	4307      	orrs	r7, r0
    8212:	d0d1      	beq.n	81b8 <__gedf2+0x2c>
    8214:	2002      	movs	r0, #2
    8216:	4240      	negs	r0, r0
    8218:	e7ed      	b.n	81f6 <__gedf2+0x6a>
    821a:	465f      	mov	r7, fp
    821c:	4317      	orrs	r7, r2
    821e:	d0ce      	beq.n	81be <__gedf2+0x32>
    8220:	e7f8      	b.n	8214 <__gedf2+0x88>
    8222:	42ac      	cmp	r4, r5
    8224:	dce4      	bgt.n	81f0 <__gedf2+0x64>
    8226:	da03      	bge.n	8230 <__gedf2+0xa4>
    8228:	1e48      	subs	r0, r1, #1
    822a:	2101      	movs	r1, #1
    822c:	4308      	orrs	r0, r1
    822e:	e7e2      	b.n	81f6 <__gedf2+0x6a>
    8230:	455e      	cmp	r6, fp
    8232:	d8dd      	bhi.n	81f0 <__gedf2+0x64>
    8234:	d006      	beq.n	8244 <__gedf2+0xb8>
    8236:	2000      	movs	r0, #0
    8238:	455e      	cmp	r6, fp
    823a:	d2dc      	bcs.n	81f6 <__gedf2+0x6a>
    823c:	2301      	movs	r3, #1
    823e:	1e48      	subs	r0, r1, #1
    8240:	4318      	orrs	r0, r3
    8242:	e7d8      	b.n	81f6 <__gedf2+0x6a>
    8244:	45c4      	cmp	ip, r8
    8246:	d8d3      	bhi.n	81f0 <__gedf2+0x64>
    8248:	2000      	movs	r0, #0
    824a:	45c4      	cmp	ip, r8
    824c:	d3f6      	bcc.n	823c <__gedf2+0xb0>
    824e:	e7d2      	b.n	81f6 <__gedf2+0x6a>
    8250:	000007ff 	.word	0x000007ff

00008254 <__ledf2>:
    8254:	b5f0      	push	{r4, r5, r6, r7, lr}
    8256:	464e      	mov	r6, r9
    8258:	4645      	mov	r5, r8
    825a:	46de      	mov	lr, fp
    825c:	4657      	mov	r7, sl
    825e:	005c      	lsls	r4, r3, #1
    8260:	b5e0      	push	{r5, r6, r7, lr}
    8262:	031f      	lsls	r7, r3, #12
    8264:	0fdb      	lsrs	r3, r3, #31
    8266:	4699      	mov	r9, r3
    8268:	4b2a      	ldr	r3, [pc, #168]	; (8314 <__ledf2+0xc0>)
    826a:	030e      	lsls	r6, r1, #12
    826c:	004d      	lsls	r5, r1, #1
    826e:	0fc9      	lsrs	r1, r1, #31
    8270:	4684      	mov	ip, r0
    8272:	0b36      	lsrs	r6, r6, #12
    8274:	0d6d      	lsrs	r5, r5, #21
    8276:	468b      	mov	fp, r1
    8278:	4690      	mov	r8, r2
    827a:	0b3f      	lsrs	r7, r7, #12
    827c:	0d64      	lsrs	r4, r4, #21
    827e:	429d      	cmp	r5, r3
    8280:	d020      	beq.n	82c4 <__ledf2+0x70>
    8282:	4b24      	ldr	r3, [pc, #144]	; (8314 <__ledf2+0xc0>)
    8284:	429c      	cmp	r4, r3
    8286:	d022      	beq.n	82ce <__ledf2+0x7a>
    8288:	2d00      	cmp	r5, #0
    828a:	d112      	bne.n	82b2 <__ledf2+0x5e>
    828c:	4330      	orrs	r0, r6
    828e:	4243      	negs	r3, r0
    8290:	4143      	adcs	r3, r0
    8292:	b2db      	uxtb	r3, r3
    8294:	2c00      	cmp	r4, #0
    8296:	d01f      	beq.n	82d8 <__ledf2+0x84>
    8298:	2b00      	cmp	r3, #0
    829a:	d00c      	beq.n	82b6 <__ledf2+0x62>
    829c:	464b      	mov	r3, r9
    829e:	2001      	movs	r0, #1
    82a0:	3b01      	subs	r3, #1
    82a2:	4303      	orrs	r3, r0
    82a4:	0018      	movs	r0, r3
    82a6:	bc3c      	pop	{r2, r3, r4, r5}
    82a8:	4690      	mov	r8, r2
    82aa:	4699      	mov	r9, r3
    82ac:	46a2      	mov	sl, r4
    82ae:	46ab      	mov	fp, r5
    82b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    82b2:	2c00      	cmp	r4, #0
    82b4:	d016      	beq.n	82e4 <__ledf2+0x90>
    82b6:	45cb      	cmp	fp, r9
    82b8:	d017      	beq.n	82ea <__ledf2+0x96>
    82ba:	465b      	mov	r3, fp
    82bc:	4259      	negs	r1, r3
    82be:	2301      	movs	r3, #1
    82c0:	430b      	orrs	r3, r1
    82c2:	e7ef      	b.n	82a4 <__ledf2+0x50>
    82c4:	0031      	movs	r1, r6
    82c6:	2302      	movs	r3, #2
    82c8:	4301      	orrs	r1, r0
    82ca:	d1eb      	bne.n	82a4 <__ledf2+0x50>
    82cc:	e7d9      	b.n	8282 <__ledf2+0x2e>
    82ce:	0039      	movs	r1, r7
    82d0:	2302      	movs	r3, #2
    82d2:	4311      	orrs	r1, r2
    82d4:	d1e6      	bne.n	82a4 <__ledf2+0x50>
    82d6:	e7d7      	b.n	8288 <__ledf2+0x34>
    82d8:	433a      	orrs	r2, r7
    82da:	d1dd      	bne.n	8298 <__ledf2+0x44>
    82dc:	2300      	movs	r3, #0
    82de:	2800      	cmp	r0, #0
    82e0:	d0e0      	beq.n	82a4 <__ledf2+0x50>
    82e2:	e7ea      	b.n	82ba <__ledf2+0x66>
    82e4:	433a      	orrs	r2, r7
    82e6:	d1e6      	bne.n	82b6 <__ledf2+0x62>
    82e8:	e7e7      	b.n	82ba <__ledf2+0x66>
    82ea:	42a5      	cmp	r5, r4
    82ec:	dce5      	bgt.n	82ba <__ledf2+0x66>
    82ee:	db05      	blt.n	82fc <__ledf2+0xa8>
    82f0:	42be      	cmp	r6, r7
    82f2:	d8e2      	bhi.n	82ba <__ledf2+0x66>
    82f4:	d007      	beq.n	8306 <__ledf2+0xb2>
    82f6:	2300      	movs	r3, #0
    82f8:	42be      	cmp	r6, r7
    82fa:	d2d3      	bcs.n	82a4 <__ledf2+0x50>
    82fc:	4659      	mov	r1, fp
    82fe:	2301      	movs	r3, #1
    8300:	3901      	subs	r1, #1
    8302:	430b      	orrs	r3, r1
    8304:	e7ce      	b.n	82a4 <__ledf2+0x50>
    8306:	45c4      	cmp	ip, r8
    8308:	d8d7      	bhi.n	82ba <__ledf2+0x66>
    830a:	2300      	movs	r3, #0
    830c:	45c4      	cmp	ip, r8
    830e:	d3f5      	bcc.n	82fc <__ledf2+0xa8>
    8310:	e7c8      	b.n	82a4 <__ledf2+0x50>
    8312:	46c0      	nop			; (mov r8, r8)
    8314:	000007ff 	.word	0x000007ff

00008318 <__aeabi_dmul>:
    8318:	b5f0      	push	{r4, r5, r6, r7, lr}
    831a:	4657      	mov	r7, sl
    831c:	4645      	mov	r5, r8
    831e:	46de      	mov	lr, fp
    8320:	464e      	mov	r6, r9
    8322:	b5e0      	push	{r5, r6, r7, lr}
    8324:	030c      	lsls	r4, r1, #12
    8326:	4698      	mov	r8, r3
    8328:	004e      	lsls	r6, r1, #1
    832a:	0b23      	lsrs	r3, r4, #12
    832c:	b087      	sub	sp, #28
    832e:	0007      	movs	r7, r0
    8330:	4692      	mov	sl, r2
    8332:	469b      	mov	fp, r3
    8334:	0d76      	lsrs	r6, r6, #21
    8336:	0fcd      	lsrs	r5, r1, #31
    8338:	2e00      	cmp	r6, #0
    833a:	d06b      	beq.n	8414 <__aeabi_dmul+0xfc>
    833c:	4b6d      	ldr	r3, [pc, #436]	; (84f4 <__aeabi_dmul+0x1dc>)
    833e:	429e      	cmp	r6, r3
    8340:	d035      	beq.n	83ae <__aeabi_dmul+0x96>
    8342:	2480      	movs	r4, #128	; 0x80
    8344:	465b      	mov	r3, fp
    8346:	0f42      	lsrs	r2, r0, #29
    8348:	0424      	lsls	r4, r4, #16
    834a:	00db      	lsls	r3, r3, #3
    834c:	4314      	orrs	r4, r2
    834e:	431c      	orrs	r4, r3
    8350:	00c3      	lsls	r3, r0, #3
    8352:	4699      	mov	r9, r3
    8354:	4b68      	ldr	r3, [pc, #416]	; (84f8 <__aeabi_dmul+0x1e0>)
    8356:	46a3      	mov	fp, r4
    8358:	469c      	mov	ip, r3
    835a:	2300      	movs	r3, #0
    835c:	2700      	movs	r7, #0
    835e:	4466      	add	r6, ip
    8360:	9302      	str	r3, [sp, #8]
    8362:	4643      	mov	r3, r8
    8364:	031c      	lsls	r4, r3, #12
    8366:	005a      	lsls	r2, r3, #1
    8368:	0fdb      	lsrs	r3, r3, #31
    836a:	4650      	mov	r0, sl
    836c:	0b24      	lsrs	r4, r4, #12
    836e:	0d52      	lsrs	r2, r2, #21
    8370:	4698      	mov	r8, r3
    8372:	d100      	bne.n	8376 <__aeabi_dmul+0x5e>
    8374:	e076      	b.n	8464 <__aeabi_dmul+0x14c>
    8376:	4b5f      	ldr	r3, [pc, #380]	; (84f4 <__aeabi_dmul+0x1dc>)
    8378:	429a      	cmp	r2, r3
    837a:	d06d      	beq.n	8458 <__aeabi_dmul+0x140>
    837c:	2380      	movs	r3, #128	; 0x80
    837e:	0f41      	lsrs	r1, r0, #29
    8380:	041b      	lsls	r3, r3, #16
    8382:	430b      	orrs	r3, r1
    8384:	495c      	ldr	r1, [pc, #368]	; (84f8 <__aeabi_dmul+0x1e0>)
    8386:	00e4      	lsls	r4, r4, #3
    8388:	468c      	mov	ip, r1
    838a:	431c      	orrs	r4, r3
    838c:	00c3      	lsls	r3, r0, #3
    838e:	2000      	movs	r0, #0
    8390:	4462      	add	r2, ip
    8392:	4641      	mov	r1, r8
    8394:	18b6      	adds	r6, r6, r2
    8396:	4069      	eors	r1, r5
    8398:	1c72      	adds	r2, r6, #1
    839a:	9101      	str	r1, [sp, #4]
    839c:	4694      	mov	ip, r2
    839e:	4307      	orrs	r7, r0
    83a0:	2f0f      	cmp	r7, #15
    83a2:	d900      	bls.n	83a6 <__aeabi_dmul+0x8e>
    83a4:	e0b0      	b.n	8508 <__aeabi_dmul+0x1f0>
    83a6:	4a55      	ldr	r2, [pc, #340]	; (84fc <__aeabi_dmul+0x1e4>)
    83a8:	00bf      	lsls	r7, r7, #2
    83aa:	59d2      	ldr	r2, [r2, r7]
    83ac:	4697      	mov	pc, r2
    83ae:	465b      	mov	r3, fp
    83b0:	4303      	orrs	r3, r0
    83b2:	4699      	mov	r9, r3
    83b4:	d000      	beq.n	83b8 <__aeabi_dmul+0xa0>
    83b6:	e087      	b.n	84c8 <__aeabi_dmul+0x1b0>
    83b8:	2300      	movs	r3, #0
    83ba:	469b      	mov	fp, r3
    83bc:	3302      	adds	r3, #2
    83be:	2708      	movs	r7, #8
    83c0:	9302      	str	r3, [sp, #8]
    83c2:	e7ce      	b.n	8362 <__aeabi_dmul+0x4a>
    83c4:	4642      	mov	r2, r8
    83c6:	9201      	str	r2, [sp, #4]
    83c8:	2802      	cmp	r0, #2
    83ca:	d067      	beq.n	849c <__aeabi_dmul+0x184>
    83cc:	2803      	cmp	r0, #3
    83ce:	d100      	bne.n	83d2 <__aeabi_dmul+0xba>
    83d0:	e20e      	b.n	87f0 <__aeabi_dmul+0x4d8>
    83d2:	2801      	cmp	r0, #1
    83d4:	d000      	beq.n	83d8 <__aeabi_dmul+0xc0>
    83d6:	e162      	b.n	869e <__aeabi_dmul+0x386>
    83d8:	2300      	movs	r3, #0
    83da:	2400      	movs	r4, #0
    83dc:	2200      	movs	r2, #0
    83de:	4699      	mov	r9, r3
    83e0:	9901      	ldr	r1, [sp, #4]
    83e2:	4001      	ands	r1, r0
    83e4:	b2cd      	uxtb	r5, r1
    83e6:	2100      	movs	r1, #0
    83e8:	0312      	lsls	r2, r2, #12
    83ea:	0d0b      	lsrs	r3, r1, #20
    83ec:	0b12      	lsrs	r2, r2, #12
    83ee:	051b      	lsls	r3, r3, #20
    83f0:	4313      	orrs	r3, r2
    83f2:	4a43      	ldr	r2, [pc, #268]	; (8500 <__aeabi_dmul+0x1e8>)
    83f4:	0524      	lsls	r4, r4, #20
    83f6:	4013      	ands	r3, r2
    83f8:	431c      	orrs	r4, r3
    83fa:	0064      	lsls	r4, r4, #1
    83fc:	07ed      	lsls	r5, r5, #31
    83fe:	0864      	lsrs	r4, r4, #1
    8400:	432c      	orrs	r4, r5
    8402:	4648      	mov	r0, r9
    8404:	0021      	movs	r1, r4
    8406:	b007      	add	sp, #28
    8408:	bc3c      	pop	{r2, r3, r4, r5}
    840a:	4690      	mov	r8, r2
    840c:	4699      	mov	r9, r3
    840e:	46a2      	mov	sl, r4
    8410:	46ab      	mov	fp, r5
    8412:	bdf0      	pop	{r4, r5, r6, r7, pc}
    8414:	4303      	orrs	r3, r0
    8416:	4699      	mov	r9, r3
    8418:	d04f      	beq.n	84ba <__aeabi_dmul+0x1a2>
    841a:	465b      	mov	r3, fp
    841c:	2b00      	cmp	r3, #0
    841e:	d100      	bne.n	8422 <__aeabi_dmul+0x10a>
    8420:	e189      	b.n	8736 <__aeabi_dmul+0x41e>
    8422:	4658      	mov	r0, fp
    8424:	f000 fe6c 	bl	9100 <__clzsi2>
    8428:	0003      	movs	r3, r0
    842a:	3b0b      	subs	r3, #11
    842c:	2b1c      	cmp	r3, #28
    842e:	dd00      	ble.n	8432 <__aeabi_dmul+0x11a>
    8430:	e17a      	b.n	8728 <__aeabi_dmul+0x410>
    8432:	221d      	movs	r2, #29
    8434:	1ad3      	subs	r3, r2, r3
    8436:	003a      	movs	r2, r7
    8438:	0001      	movs	r1, r0
    843a:	465c      	mov	r4, fp
    843c:	40da      	lsrs	r2, r3
    843e:	3908      	subs	r1, #8
    8440:	408c      	lsls	r4, r1
    8442:	0013      	movs	r3, r2
    8444:	408f      	lsls	r7, r1
    8446:	4323      	orrs	r3, r4
    8448:	469b      	mov	fp, r3
    844a:	46b9      	mov	r9, r7
    844c:	2300      	movs	r3, #0
    844e:	4e2d      	ldr	r6, [pc, #180]	; (8504 <__aeabi_dmul+0x1ec>)
    8450:	2700      	movs	r7, #0
    8452:	1a36      	subs	r6, r6, r0
    8454:	9302      	str	r3, [sp, #8]
    8456:	e784      	b.n	8362 <__aeabi_dmul+0x4a>
    8458:	4653      	mov	r3, sl
    845a:	4323      	orrs	r3, r4
    845c:	d12a      	bne.n	84b4 <__aeabi_dmul+0x19c>
    845e:	2400      	movs	r4, #0
    8460:	2002      	movs	r0, #2
    8462:	e796      	b.n	8392 <__aeabi_dmul+0x7a>
    8464:	4653      	mov	r3, sl
    8466:	4323      	orrs	r3, r4
    8468:	d020      	beq.n	84ac <__aeabi_dmul+0x194>
    846a:	2c00      	cmp	r4, #0
    846c:	d100      	bne.n	8470 <__aeabi_dmul+0x158>
    846e:	e157      	b.n	8720 <__aeabi_dmul+0x408>
    8470:	0020      	movs	r0, r4
    8472:	f000 fe45 	bl	9100 <__clzsi2>
    8476:	0003      	movs	r3, r0
    8478:	3b0b      	subs	r3, #11
    847a:	2b1c      	cmp	r3, #28
    847c:	dd00      	ble.n	8480 <__aeabi_dmul+0x168>
    847e:	e149      	b.n	8714 <__aeabi_dmul+0x3fc>
    8480:	211d      	movs	r1, #29
    8482:	1acb      	subs	r3, r1, r3
    8484:	4651      	mov	r1, sl
    8486:	0002      	movs	r2, r0
    8488:	40d9      	lsrs	r1, r3
    848a:	4653      	mov	r3, sl
    848c:	3a08      	subs	r2, #8
    848e:	4094      	lsls	r4, r2
    8490:	4093      	lsls	r3, r2
    8492:	430c      	orrs	r4, r1
    8494:	4a1b      	ldr	r2, [pc, #108]	; (8504 <__aeabi_dmul+0x1ec>)
    8496:	1a12      	subs	r2, r2, r0
    8498:	2000      	movs	r0, #0
    849a:	e77a      	b.n	8392 <__aeabi_dmul+0x7a>
    849c:	2501      	movs	r5, #1
    849e:	9b01      	ldr	r3, [sp, #4]
    84a0:	4c14      	ldr	r4, [pc, #80]	; (84f4 <__aeabi_dmul+0x1dc>)
    84a2:	401d      	ands	r5, r3
    84a4:	2300      	movs	r3, #0
    84a6:	2200      	movs	r2, #0
    84a8:	4699      	mov	r9, r3
    84aa:	e79c      	b.n	83e6 <__aeabi_dmul+0xce>
    84ac:	2400      	movs	r4, #0
    84ae:	2200      	movs	r2, #0
    84b0:	2001      	movs	r0, #1
    84b2:	e76e      	b.n	8392 <__aeabi_dmul+0x7a>
    84b4:	4653      	mov	r3, sl
    84b6:	2003      	movs	r0, #3
    84b8:	e76b      	b.n	8392 <__aeabi_dmul+0x7a>
    84ba:	2300      	movs	r3, #0
    84bc:	469b      	mov	fp, r3
    84be:	3301      	adds	r3, #1
    84c0:	2704      	movs	r7, #4
    84c2:	2600      	movs	r6, #0
    84c4:	9302      	str	r3, [sp, #8]
    84c6:	e74c      	b.n	8362 <__aeabi_dmul+0x4a>
    84c8:	2303      	movs	r3, #3
    84ca:	4681      	mov	r9, r0
    84cc:	270c      	movs	r7, #12
    84ce:	9302      	str	r3, [sp, #8]
    84d0:	e747      	b.n	8362 <__aeabi_dmul+0x4a>
    84d2:	2280      	movs	r2, #128	; 0x80
    84d4:	2300      	movs	r3, #0
    84d6:	2500      	movs	r5, #0
    84d8:	0312      	lsls	r2, r2, #12
    84da:	4699      	mov	r9, r3
    84dc:	4c05      	ldr	r4, [pc, #20]	; (84f4 <__aeabi_dmul+0x1dc>)
    84de:	e782      	b.n	83e6 <__aeabi_dmul+0xce>
    84e0:	465c      	mov	r4, fp
    84e2:	464b      	mov	r3, r9
    84e4:	9802      	ldr	r0, [sp, #8]
    84e6:	e76f      	b.n	83c8 <__aeabi_dmul+0xb0>
    84e8:	465c      	mov	r4, fp
    84ea:	464b      	mov	r3, r9
    84ec:	9501      	str	r5, [sp, #4]
    84ee:	9802      	ldr	r0, [sp, #8]
    84f0:	e76a      	b.n	83c8 <__aeabi_dmul+0xb0>
    84f2:	46c0      	nop			; (mov r8, r8)
    84f4:	000007ff 	.word	0x000007ff
    84f8:	fffffc01 	.word	0xfffffc01
    84fc:	00009d30 	.word	0x00009d30
    8500:	800fffff 	.word	0x800fffff
    8504:	fffffc0d 	.word	0xfffffc0d
    8508:	464a      	mov	r2, r9
    850a:	4649      	mov	r1, r9
    850c:	0c17      	lsrs	r7, r2, #16
    850e:	0c1a      	lsrs	r2, r3, #16
    8510:	041b      	lsls	r3, r3, #16
    8512:	0c1b      	lsrs	r3, r3, #16
    8514:	0408      	lsls	r0, r1, #16
    8516:	0019      	movs	r1, r3
    8518:	0c00      	lsrs	r0, r0, #16
    851a:	4341      	muls	r1, r0
    851c:	0015      	movs	r5, r2
    851e:	4688      	mov	r8, r1
    8520:	0019      	movs	r1, r3
    8522:	437d      	muls	r5, r7
    8524:	4379      	muls	r1, r7
    8526:	9503      	str	r5, [sp, #12]
    8528:	4689      	mov	r9, r1
    852a:	0029      	movs	r1, r5
    852c:	0015      	movs	r5, r2
    852e:	4345      	muls	r5, r0
    8530:	444d      	add	r5, r9
    8532:	9502      	str	r5, [sp, #8]
    8534:	4645      	mov	r5, r8
    8536:	0c2d      	lsrs	r5, r5, #16
    8538:	46aa      	mov	sl, r5
    853a:	9d02      	ldr	r5, [sp, #8]
    853c:	4455      	add	r5, sl
    853e:	45a9      	cmp	r9, r5
    8540:	d906      	bls.n	8550 <__aeabi_dmul+0x238>
    8542:	468a      	mov	sl, r1
    8544:	2180      	movs	r1, #128	; 0x80
    8546:	0249      	lsls	r1, r1, #9
    8548:	4689      	mov	r9, r1
    854a:	44ca      	add	sl, r9
    854c:	4651      	mov	r1, sl
    854e:	9103      	str	r1, [sp, #12]
    8550:	0c29      	lsrs	r1, r5, #16
    8552:	9104      	str	r1, [sp, #16]
    8554:	4641      	mov	r1, r8
    8556:	0409      	lsls	r1, r1, #16
    8558:	042d      	lsls	r5, r5, #16
    855a:	0c09      	lsrs	r1, r1, #16
    855c:	4688      	mov	r8, r1
    855e:	0029      	movs	r1, r5
    8560:	0c25      	lsrs	r5, r4, #16
    8562:	0424      	lsls	r4, r4, #16
    8564:	4441      	add	r1, r8
    8566:	0c24      	lsrs	r4, r4, #16
    8568:	9105      	str	r1, [sp, #20]
    856a:	0021      	movs	r1, r4
    856c:	4341      	muls	r1, r0
    856e:	4688      	mov	r8, r1
    8570:	0021      	movs	r1, r4
    8572:	4379      	muls	r1, r7
    8574:	468a      	mov	sl, r1
    8576:	4368      	muls	r0, r5
    8578:	4641      	mov	r1, r8
    857a:	4450      	add	r0, sl
    857c:	4681      	mov	r9, r0
    857e:	0c08      	lsrs	r0, r1, #16
    8580:	4448      	add	r0, r9
    8582:	436f      	muls	r7, r5
    8584:	4582      	cmp	sl, r0
    8586:	d903      	bls.n	8590 <__aeabi_dmul+0x278>
    8588:	2180      	movs	r1, #128	; 0x80
    858a:	0249      	lsls	r1, r1, #9
    858c:	4689      	mov	r9, r1
    858e:	444f      	add	r7, r9
    8590:	0c01      	lsrs	r1, r0, #16
    8592:	4689      	mov	r9, r1
    8594:	0039      	movs	r1, r7
    8596:	4449      	add	r1, r9
    8598:	9102      	str	r1, [sp, #8]
    859a:	4641      	mov	r1, r8
    859c:	040f      	lsls	r7, r1, #16
    859e:	9904      	ldr	r1, [sp, #16]
    85a0:	0c3f      	lsrs	r7, r7, #16
    85a2:	4688      	mov	r8, r1
    85a4:	0400      	lsls	r0, r0, #16
    85a6:	19c0      	adds	r0, r0, r7
    85a8:	4480      	add	r8, r0
    85aa:	4641      	mov	r1, r8
    85ac:	9104      	str	r1, [sp, #16]
    85ae:	4659      	mov	r1, fp
    85b0:	0c0f      	lsrs	r7, r1, #16
    85b2:	0409      	lsls	r1, r1, #16
    85b4:	0c09      	lsrs	r1, r1, #16
    85b6:	4688      	mov	r8, r1
    85b8:	4359      	muls	r1, r3
    85ba:	468a      	mov	sl, r1
    85bc:	0039      	movs	r1, r7
    85be:	4351      	muls	r1, r2
    85c0:	4689      	mov	r9, r1
    85c2:	4641      	mov	r1, r8
    85c4:	434a      	muls	r2, r1
    85c6:	4651      	mov	r1, sl
    85c8:	0c09      	lsrs	r1, r1, #16
    85ca:	468b      	mov	fp, r1
    85cc:	437b      	muls	r3, r7
    85ce:	18d2      	adds	r2, r2, r3
    85d0:	445a      	add	r2, fp
    85d2:	4293      	cmp	r3, r2
    85d4:	d903      	bls.n	85de <__aeabi_dmul+0x2c6>
    85d6:	2380      	movs	r3, #128	; 0x80
    85d8:	025b      	lsls	r3, r3, #9
    85da:	469b      	mov	fp, r3
    85dc:	44d9      	add	r9, fp
    85de:	4651      	mov	r1, sl
    85e0:	0409      	lsls	r1, r1, #16
    85e2:	0c09      	lsrs	r1, r1, #16
    85e4:	468a      	mov	sl, r1
    85e6:	4641      	mov	r1, r8
    85e8:	4361      	muls	r1, r4
    85ea:	437c      	muls	r4, r7
    85ec:	0c13      	lsrs	r3, r2, #16
    85ee:	0412      	lsls	r2, r2, #16
    85f0:	444b      	add	r3, r9
    85f2:	4452      	add	r2, sl
    85f4:	46a1      	mov	r9, r4
    85f6:	468a      	mov	sl, r1
    85f8:	003c      	movs	r4, r7
    85fa:	4641      	mov	r1, r8
    85fc:	436c      	muls	r4, r5
    85fe:	434d      	muls	r5, r1
    8600:	4651      	mov	r1, sl
    8602:	444d      	add	r5, r9
    8604:	0c0f      	lsrs	r7, r1, #16
    8606:	197d      	adds	r5, r7, r5
    8608:	45a9      	cmp	r9, r5
    860a:	d903      	bls.n	8614 <__aeabi_dmul+0x2fc>
    860c:	2180      	movs	r1, #128	; 0x80
    860e:	0249      	lsls	r1, r1, #9
    8610:	4688      	mov	r8, r1
    8612:	4444      	add	r4, r8
    8614:	9f04      	ldr	r7, [sp, #16]
    8616:	9903      	ldr	r1, [sp, #12]
    8618:	46b8      	mov	r8, r7
    861a:	4441      	add	r1, r8
    861c:	468b      	mov	fp, r1
    861e:	4583      	cmp	fp, r0
    8620:	4180      	sbcs	r0, r0
    8622:	4241      	negs	r1, r0
    8624:	4688      	mov	r8, r1
    8626:	4651      	mov	r1, sl
    8628:	0408      	lsls	r0, r1, #16
    862a:	042f      	lsls	r7, r5, #16
    862c:	0c00      	lsrs	r0, r0, #16
    862e:	183f      	adds	r7, r7, r0
    8630:	4658      	mov	r0, fp
    8632:	9902      	ldr	r1, [sp, #8]
    8634:	1810      	adds	r0, r2, r0
    8636:	4689      	mov	r9, r1
    8638:	4290      	cmp	r0, r2
    863a:	4192      	sbcs	r2, r2
    863c:	444f      	add	r7, r9
    863e:	46ba      	mov	sl, r7
    8640:	4252      	negs	r2, r2
    8642:	4699      	mov	r9, r3
    8644:	4693      	mov	fp, r2
    8646:	44c2      	add	sl, r8
    8648:	44d1      	add	r9, sl
    864a:	44cb      	add	fp, r9
    864c:	428f      	cmp	r7, r1
    864e:	41bf      	sbcs	r7, r7
    8650:	45c2      	cmp	sl, r8
    8652:	4189      	sbcs	r1, r1
    8654:	4599      	cmp	r9, r3
    8656:	419b      	sbcs	r3, r3
    8658:	4593      	cmp	fp, r2
    865a:	4192      	sbcs	r2, r2
    865c:	427f      	negs	r7, r7
    865e:	4249      	negs	r1, r1
    8660:	0c2d      	lsrs	r5, r5, #16
    8662:	4252      	negs	r2, r2
    8664:	430f      	orrs	r7, r1
    8666:	425b      	negs	r3, r3
    8668:	4313      	orrs	r3, r2
    866a:	197f      	adds	r7, r7, r5
    866c:	18ff      	adds	r7, r7, r3
    866e:	465b      	mov	r3, fp
    8670:	193c      	adds	r4, r7, r4
    8672:	0ddb      	lsrs	r3, r3, #23
    8674:	9a05      	ldr	r2, [sp, #20]
    8676:	0264      	lsls	r4, r4, #9
    8678:	431c      	orrs	r4, r3
    867a:	0243      	lsls	r3, r0, #9
    867c:	4313      	orrs	r3, r2
    867e:	1e5d      	subs	r5, r3, #1
    8680:	41ab      	sbcs	r3, r5
    8682:	465a      	mov	r2, fp
    8684:	0dc0      	lsrs	r0, r0, #23
    8686:	4303      	orrs	r3, r0
    8688:	0252      	lsls	r2, r2, #9
    868a:	4313      	orrs	r3, r2
    868c:	01e2      	lsls	r2, r4, #7
    868e:	d556      	bpl.n	873e <__aeabi_dmul+0x426>
    8690:	2001      	movs	r0, #1
    8692:	085a      	lsrs	r2, r3, #1
    8694:	4003      	ands	r3, r0
    8696:	4313      	orrs	r3, r2
    8698:	07e2      	lsls	r2, r4, #31
    869a:	4313      	orrs	r3, r2
    869c:	0864      	lsrs	r4, r4, #1
    869e:	485a      	ldr	r0, [pc, #360]	; (8808 <__aeabi_dmul+0x4f0>)
    86a0:	4460      	add	r0, ip
    86a2:	2800      	cmp	r0, #0
    86a4:	dd4d      	ble.n	8742 <__aeabi_dmul+0x42a>
    86a6:	075a      	lsls	r2, r3, #29
    86a8:	d009      	beq.n	86be <__aeabi_dmul+0x3a6>
    86aa:	220f      	movs	r2, #15
    86ac:	401a      	ands	r2, r3
    86ae:	2a04      	cmp	r2, #4
    86b0:	d005      	beq.n	86be <__aeabi_dmul+0x3a6>
    86b2:	1d1a      	adds	r2, r3, #4
    86b4:	429a      	cmp	r2, r3
    86b6:	419b      	sbcs	r3, r3
    86b8:	425b      	negs	r3, r3
    86ba:	18e4      	adds	r4, r4, r3
    86bc:	0013      	movs	r3, r2
    86be:	01e2      	lsls	r2, r4, #7
    86c0:	d504      	bpl.n	86cc <__aeabi_dmul+0x3b4>
    86c2:	2080      	movs	r0, #128	; 0x80
    86c4:	4a51      	ldr	r2, [pc, #324]	; (880c <__aeabi_dmul+0x4f4>)
    86c6:	00c0      	lsls	r0, r0, #3
    86c8:	4014      	ands	r4, r2
    86ca:	4460      	add	r0, ip
    86cc:	4a50      	ldr	r2, [pc, #320]	; (8810 <__aeabi_dmul+0x4f8>)
    86ce:	4290      	cmp	r0, r2
    86d0:	dd00      	ble.n	86d4 <__aeabi_dmul+0x3bc>
    86d2:	e6e3      	b.n	849c <__aeabi_dmul+0x184>
    86d4:	2501      	movs	r5, #1
    86d6:	08db      	lsrs	r3, r3, #3
    86d8:	0762      	lsls	r2, r4, #29
    86da:	431a      	orrs	r2, r3
    86dc:	0264      	lsls	r4, r4, #9
    86de:	9b01      	ldr	r3, [sp, #4]
    86e0:	4691      	mov	r9, r2
    86e2:	0b22      	lsrs	r2, r4, #12
    86e4:	0544      	lsls	r4, r0, #21
    86e6:	0d64      	lsrs	r4, r4, #21
    86e8:	401d      	ands	r5, r3
    86ea:	e67c      	b.n	83e6 <__aeabi_dmul+0xce>
    86ec:	2280      	movs	r2, #128	; 0x80
    86ee:	4659      	mov	r1, fp
    86f0:	0312      	lsls	r2, r2, #12
    86f2:	4211      	tst	r1, r2
    86f4:	d008      	beq.n	8708 <__aeabi_dmul+0x3f0>
    86f6:	4214      	tst	r4, r2
    86f8:	d106      	bne.n	8708 <__aeabi_dmul+0x3f0>
    86fa:	4322      	orrs	r2, r4
    86fc:	0312      	lsls	r2, r2, #12
    86fe:	0b12      	lsrs	r2, r2, #12
    8700:	4645      	mov	r5, r8
    8702:	4699      	mov	r9, r3
    8704:	4c43      	ldr	r4, [pc, #268]	; (8814 <__aeabi_dmul+0x4fc>)
    8706:	e66e      	b.n	83e6 <__aeabi_dmul+0xce>
    8708:	465b      	mov	r3, fp
    870a:	431a      	orrs	r2, r3
    870c:	0312      	lsls	r2, r2, #12
    870e:	0b12      	lsrs	r2, r2, #12
    8710:	4c40      	ldr	r4, [pc, #256]	; (8814 <__aeabi_dmul+0x4fc>)
    8712:	e668      	b.n	83e6 <__aeabi_dmul+0xce>
    8714:	0003      	movs	r3, r0
    8716:	4654      	mov	r4, sl
    8718:	3b28      	subs	r3, #40	; 0x28
    871a:	409c      	lsls	r4, r3
    871c:	2300      	movs	r3, #0
    871e:	e6b9      	b.n	8494 <__aeabi_dmul+0x17c>
    8720:	f000 fcee 	bl	9100 <__clzsi2>
    8724:	3020      	adds	r0, #32
    8726:	e6a6      	b.n	8476 <__aeabi_dmul+0x15e>
    8728:	0003      	movs	r3, r0
    872a:	3b28      	subs	r3, #40	; 0x28
    872c:	409f      	lsls	r7, r3
    872e:	2300      	movs	r3, #0
    8730:	46bb      	mov	fp, r7
    8732:	4699      	mov	r9, r3
    8734:	e68a      	b.n	844c <__aeabi_dmul+0x134>
    8736:	f000 fce3 	bl	9100 <__clzsi2>
    873a:	3020      	adds	r0, #32
    873c:	e674      	b.n	8428 <__aeabi_dmul+0x110>
    873e:	46b4      	mov	ip, r6
    8740:	e7ad      	b.n	869e <__aeabi_dmul+0x386>
    8742:	2501      	movs	r5, #1
    8744:	1a2a      	subs	r2, r5, r0
    8746:	2a38      	cmp	r2, #56	; 0x38
    8748:	dd06      	ble.n	8758 <__aeabi_dmul+0x440>
    874a:	9b01      	ldr	r3, [sp, #4]
    874c:	2400      	movs	r4, #0
    874e:	401d      	ands	r5, r3
    8750:	2300      	movs	r3, #0
    8752:	2200      	movs	r2, #0
    8754:	4699      	mov	r9, r3
    8756:	e646      	b.n	83e6 <__aeabi_dmul+0xce>
    8758:	2a1f      	cmp	r2, #31
    875a:	dc21      	bgt.n	87a0 <__aeabi_dmul+0x488>
    875c:	2520      	movs	r5, #32
    875e:	0020      	movs	r0, r4
    8760:	1aad      	subs	r5, r5, r2
    8762:	001e      	movs	r6, r3
    8764:	40ab      	lsls	r3, r5
    8766:	40a8      	lsls	r0, r5
    8768:	40d6      	lsrs	r6, r2
    876a:	1e5d      	subs	r5, r3, #1
    876c:	41ab      	sbcs	r3, r5
    876e:	4330      	orrs	r0, r6
    8770:	4318      	orrs	r0, r3
    8772:	40d4      	lsrs	r4, r2
    8774:	0743      	lsls	r3, r0, #29
    8776:	d009      	beq.n	878c <__aeabi_dmul+0x474>
    8778:	230f      	movs	r3, #15
    877a:	4003      	ands	r3, r0
    877c:	2b04      	cmp	r3, #4
    877e:	d005      	beq.n	878c <__aeabi_dmul+0x474>
    8780:	0003      	movs	r3, r0
    8782:	1d18      	adds	r0, r3, #4
    8784:	4298      	cmp	r0, r3
    8786:	419b      	sbcs	r3, r3
    8788:	425b      	negs	r3, r3
    878a:	18e4      	adds	r4, r4, r3
    878c:	0223      	lsls	r3, r4, #8
    878e:	d521      	bpl.n	87d4 <__aeabi_dmul+0x4bc>
    8790:	2501      	movs	r5, #1
    8792:	9b01      	ldr	r3, [sp, #4]
    8794:	2401      	movs	r4, #1
    8796:	401d      	ands	r5, r3
    8798:	2300      	movs	r3, #0
    879a:	2200      	movs	r2, #0
    879c:	4699      	mov	r9, r3
    879e:	e622      	b.n	83e6 <__aeabi_dmul+0xce>
    87a0:	251f      	movs	r5, #31
    87a2:	0021      	movs	r1, r4
    87a4:	426d      	negs	r5, r5
    87a6:	1a28      	subs	r0, r5, r0
    87a8:	40c1      	lsrs	r1, r0
    87aa:	0008      	movs	r0, r1
    87ac:	2a20      	cmp	r2, #32
    87ae:	d01d      	beq.n	87ec <__aeabi_dmul+0x4d4>
    87b0:	355f      	adds	r5, #95	; 0x5f
    87b2:	1aaa      	subs	r2, r5, r2
    87b4:	4094      	lsls	r4, r2
    87b6:	4323      	orrs	r3, r4
    87b8:	1e5c      	subs	r4, r3, #1
    87ba:	41a3      	sbcs	r3, r4
    87bc:	2507      	movs	r5, #7
    87be:	4303      	orrs	r3, r0
    87c0:	401d      	ands	r5, r3
    87c2:	2200      	movs	r2, #0
    87c4:	2d00      	cmp	r5, #0
    87c6:	d009      	beq.n	87dc <__aeabi_dmul+0x4c4>
    87c8:	220f      	movs	r2, #15
    87ca:	2400      	movs	r4, #0
    87cc:	401a      	ands	r2, r3
    87ce:	0018      	movs	r0, r3
    87d0:	2a04      	cmp	r2, #4
    87d2:	d1d6      	bne.n	8782 <__aeabi_dmul+0x46a>
    87d4:	0003      	movs	r3, r0
    87d6:	0765      	lsls	r5, r4, #29
    87d8:	0264      	lsls	r4, r4, #9
    87da:	0b22      	lsrs	r2, r4, #12
    87dc:	08db      	lsrs	r3, r3, #3
    87de:	432b      	orrs	r3, r5
    87e0:	2501      	movs	r5, #1
    87e2:	4699      	mov	r9, r3
    87e4:	9b01      	ldr	r3, [sp, #4]
    87e6:	2400      	movs	r4, #0
    87e8:	401d      	ands	r5, r3
    87ea:	e5fc      	b.n	83e6 <__aeabi_dmul+0xce>
    87ec:	2400      	movs	r4, #0
    87ee:	e7e2      	b.n	87b6 <__aeabi_dmul+0x49e>
    87f0:	2280      	movs	r2, #128	; 0x80
    87f2:	2501      	movs	r5, #1
    87f4:	0312      	lsls	r2, r2, #12
    87f6:	4322      	orrs	r2, r4
    87f8:	9901      	ldr	r1, [sp, #4]
    87fa:	0312      	lsls	r2, r2, #12
    87fc:	0b12      	lsrs	r2, r2, #12
    87fe:	400d      	ands	r5, r1
    8800:	4699      	mov	r9, r3
    8802:	4c04      	ldr	r4, [pc, #16]	; (8814 <__aeabi_dmul+0x4fc>)
    8804:	e5ef      	b.n	83e6 <__aeabi_dmul+0xce>
    8806:	46c0      	nop			; (mov r8, r8)
    8808:	000003ff 	.word	0x000003ff
    880c:	feffffff 	.word	0xfeffffff
    8810:	000007fe 	.word	0x000007fe
    8814:	000007ff 	.word	0x000007ff

00008818 <__aeabi_dsub>:
    8818:	b5f0      	push	{r4, r5, r6, r7, lr}
    881a:	4646      	mov	r6, r8
    881c:	46d6      	mov	lr, sl
    881e:	464f      	mov	r7, r9
    8820:	030c      	lsls	r4, r1, #12
    8822:	b5c0      	push	{r6, r7, lr}
    8824:	0fcd      	lsrs	r5, r1, #31
    8826:	004e      	lsls	r6, r1, #1
    8828:	0a61      	lsrs	r1, r4, #9
    882a:	0f44      	lsrs	r4, r0, #29
    882c:	430c      	orrs	r4, r1
    882e:	00c1      	lsls	r1, r0, #3
    8830:	0058      	lsls	r0, r3, #1
    8832:	0d40      	lsrs	r0, r0, #21
    8834:	4684      	mov	ip, r0
    8836:	468a      	mov	sl, r1
    8838:	000f      	movs	r7, r1
    883a:	0319      	lsls	r1, r3, #12
    883c:	0f50      	lsrs	r0, r2, #29
    883e:	0a49      	lsrs	r1, r1, #9
    8840:	4301      	orrs	r1, r0
    8842:	48c6      	ldr	r0, [pc, #792]	; (8b5c <__aeabi_dsub+0x344>)
    8844:	0d76      	lsrs	r6, r6, #21
    8846:	46a8      	mov	r8, r5
    8848:	0fdb      	lsrs	r3, r3, #31
    884a:	00d2      	lsls	r2, r2, #3
    884c:	4584      	cmp	ip, r0
    884e:	d100      	bne.n	8852 <__aeabi_dsub+0x3a>
    8850:	e0d8      	b.n	8a04 <__aeabi_dsub+0x1ec>
    8852:	2001      	movs	r0, #1
    8854:	4043      	eors	r3, r0
    8856:	42ab      	cmp	r3, r5
    8858:	d100      	bne.n	885c <__aeabi_dsub+0x44>
    885a:	e0a6      	b.n	89aa <__aeabi_dsub+0x192>
    885c:	4660      	mov	r0, ip
    885e:	1a35      	subs	r5, r6, r0
    8860:	2d00      	cmp	r5, #0
    8862:	dc00      	bgt.n	8866 <__aeabi_dsub+0x4e>
    8864:	e105      	b.n	8a72 <__aeabi_dsub+0x25a>
    8866:	2800      	cmp	r0, #0
    8868:	d110      	bne.n	888c <__aeabi_dsub+0x74>
    886a:	000b      	movs	r3, r1
    886c:	4313      	orrs	r3, r2
    886e:	d100      	bne.n	8872 <__aeabi_dsub+0x5a>
    8870:	e0d7      	b.n	8a22 <__aeabi_dsub+0x20a>
    8872:	1e6b      	subs	r3, r5, #1
    8874:	2b00      	cmp	r3, #0
    8876:	d000      	beq.n	887a <__aeabi_dsub+0x62>
    8878:	e14b      	b.n	8b12 <__aeabi_dsub+0x2fa>
    887a:	4653      	mov	r3, sl
    887c:	1a9f      	subs	r7, r3, r2
    887e:	45ba      	cmp	sl, r7
    8880:	4180      	sbcs	r0, r0
    8882:	1a64      	subs	r4, r4, r1
    8884:	4240      	negs	r0, r0
    8886:	1a24      	subs	r4, r4, r0
    8888:	2601      	movs	r6, #1
    888a:	e01e      	b.n	88ca <__aeabi_dsub+0xb2>
    888c:	4bb3      	ldr	r3, [pc, #716]	; (8b5c <__aeabi_dsub+0x344>)
    888e:	429e      	cmp	r6, r3
    8890:	d048      	beq.n	8924 <__aeabi_dsub+0x10c>
    8892:	2380      	movs	r3, #128	; 0x80
    8894:	041b      	lsls	r3, r3, #16
    8896:	4319      	orrs	r1, r3
    8898:	2d38      	cmp	r5, #56	; 0x38
    889a:	dd00      	ble.n	889e <__aeabi_dsub+0x86>
    889c:	e119      	b.n	8ad2 <__aeabi_dsub+0x2ba>
    889e:	2d1f      	cmp	r5, #31
    88a0:	dd00      	ble.n	88a4 <__aeabi_dsub+0x8c>
    88a2:	e14c      	b.n	8b3e <__aeabi_dsub+0x326>
    88a4:	2320      	movs	r3, #32
    88a6:	000f      	movs	r7, r1
    88a8:	1b5b      	subs	r3, r3, r5
    88aa:	0010      	movs	r0, r2
    88ac:	409a      	lsls	r2, r3
    88ae:	409f      	lsls	r7, r3
    88b0:	40e8      	lsrs	r0, r5
    88b2:	1e53      	subs	r3, r2, #1
    88b4:	419a      	sbcs	r2, r3
    88b6:	40e9      	lsrs	r1, r5
    88b8:	4307      	orrs	r7, r0
    88ba:	4317      	orrs	r7, r2
    88bc:	4653      	mov	r3, sl
    88be:	1bdf      	subs	r7, r3, r7
    88c0:	1a61      	subs	r1, r4, r1
    88c2:	45ba      	cmp	sl, r7
    88c4:	41a4      	sbcs	r4, r4
    88c6:	4264      	negs	r4, r4
    88c8:	1b0c      	subs	r4, r1, r4
    88ca:	0223      	lsls	r3, r4, #8
    88cc:	d400      	bmi.n	88d0 <__aeabi_dsub+0xb8>
    88ce:	e0c5      	b.n	8a5c <__aeabi_dsub+0x244>
    88d0:	0264      	lsls	r4, r4, #9
    88d2:	0a65      	lsrs	r5, r4, #9
    88d4:	2d00      	cmp	r5, #0
    88d6:	d100      	bne.n	88da <__aeabi_dsub+0xc2>
    88d8:	e0f6      	b.n	8ac8 <__aeabi_dsub+0x2b0>
    88da:	0028      	movs	r0, r5
    88dc:	f000 fc10 	bl	9100 <__clzsi2>
    88e0:	0003      	movs	r3, r0
    88e2:	3b08      	subs	r3, #8
    88e4:	2b1f      	cmp	r3, #31
    88e6:	dd00      	ble.n	88ea <__aeabi_dsub+0xd2>
    88e8:	e0e9      	b.n	8abe <__aeabi_dsub+0x2a6>
    88ea:	2220      	movs	r2, #32
    88ec:	003c      	movs	r4, r7
    88ee:	1ad2      	subs	r2, r2, r3
    88f0:	409d      	lsls	r5, r3
    88f2:	40d4      	lsrs	r4, r2
    88f4:	409f      	lsls	r7, r3
    88f6:	4325      	orrs	r5, r4
    88f8:	429e      	cmp	r6, r3
    88fa:	dd00      	ble.n	88fe <__aeabi_dsub+0xe6>
    88fc:	e0db      	b.n	8ab6 <__aeabi_dsub+0x29e>
    88fe:	1b9e      	subs	r6, r3, r6
    8900:	1c73      	adds	r3, r6, #1
    8902:	2b1f      	cmp	r3, #31
    8904:	dd00      	ble.n	8908 <__aeabi_dsub+0xf0>
    8906:	e10a      	b.n	8b1e <__aeabi_dsub+0x306>
    8908:	2220      	movs	r2, #32
    890a:	0038      	movs	r0, r7
    890c:	1ad2      	subs	r2, r2, r3
    890e:	0029      	movs	r1, r5
    8910:	4097      	lsls	r7, r2
    8912:	002c      	movs	r4, r5
    8914:	4091      	lsls	r1, r2
    8916:	40d8      	lsrs	r0, r3
    8918:	1e7a      	subs	r2, r7, #1
    891a:	4197      	sbcs	r7, r2
    891c:	40dc      	lsrs	r4, r3
    891e:	2600      	movs	r6, #0
    8920:	4301      	orrs	r1, r0
    8922:	430f      	orrs	r7, r1
    8924:	077b      	lsls	r3, r7, #29
    8926:	d009      	beq.n	893c <__aeabi_dsub+0x124>
    8928:	230f      	movs	r3, #15
    892a:	403b      	ands	r3, r7
    892c:	2b04      	cmp	r3, #4
    892e:	d005      	beq.n	893c <__aeabi_dsub+0x124>
    8930:	1d3b      	adds	r3, r7, #4
    8932:	42bb      	cmp	r3, r7
    8934:	41bf      	sbcs	r7, r7
    8936:	427f      	negs	r7, r7
    8938:	19e4      	adds	r4, r4, r7
    893a:	001f      	movs	r7, r3
    893c:	0223      	lsls	r3, r4, #8
    893e:	d525      	bpl.n	898c <__aeabi_dsub+0x174>
    8940:	4b86      	ldr	r3, [pc, #536]	; (8b5c <__aeabi_dsub+0x344>)
    8942:	3601      	adds	r6, #1
    8944:	429e      	cmp	r6, r3
    8946:	d100      	bne.n	894a <__aeabi_dsub+0x132>
    8948:	e0af      	b.n	8aaa <__aeabi_dsub+0x292>
    894a:	4b85      	ldr	r3, [pc, #532]	; (8b60 <__aeabi_dsub+0x348>)
    894c:	2501      	movs	r5, #1
    894e:	401c      	ands	r4, r3
    8950:	4643      	mov	r3, r8
    8952:	0762      	lsls	r2, r4, #29
    8954:	08ff      	lsrs	r7, r7, #3
    8956:	0264      	lsls	r4, r4, #9
    8958:	0576      	lsls	r6, r6, #21
    895a:	4317      	orrs	r7, r2
    895c:	0b24      	lsrs	r4, r4, #12
    895e:	0d76      	lsrs	r6, r6, #21
    8960:	401d      	ands	r5, r3
    8962:	2100      	movs	r1, #0
    8964:	0324      	lsls	r4, r4, #12
    8966:	0b23      	lsrs	r3, r4, #12
    8968:	0d0c      	lsrs	r4, r1, #20
    896a:	4a7e      	ldr	r2, [pc, #504]	; (8b64 <__aeabi_dsub+0x34c>)
    896c:	0524      	lsls	r4, r4, #20
    896e:	431c      	orrs	r4, r3
    8970:	4014      	ands	r4, r2
    8972:	0533      	lsls	r3, r6, #20
    8974:	4323      	orrs	r3, r4
    8976:	005b      	lsls	r3, r3, #1
    8978:	07ed      	lsls	r5, r5, #31
    897a:	085b      	lsrs	r3, r3, #1
    897c:	432b      	orrs	r3, r5
    897e:	0038      	movs	r0, r7
    8980:	0019      	movs	r1, r3
    8982:	bc1c      	pop	{r2, r3, r4}
    8984:	4690      	mov	r8, r2
    8986:	4699      	mov	r9, r3
    8988:	46a2      	mov	sl, r4
    898a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    898c:	2501      	movs	r5, #1
    898e:	4643      	mov	r3, r8
    8990:	0762      	lsls	r2, r4, #29
    8992:	08ff      	lsrs	r7, r7, #3
    8994:	4317      	orrs	r7, r2
    8996:	08e4      	lsrs	r4, r4, #3
    8998:	401d      	ands	r5, r3
    899a:	4b70      	ldr	r3, [pc, #448]	; (8b5c <__aeabi_dsub+0x344>)
    899c:	429e      	cmp	r6, r3
    899e:	d036      	beq.n	8a0e <__aeabi_dsub+0x1f6>
    89a0:	0324      	lsls	r4, r4, #12
    89a2:	0576      	lsls	r6, r6, #21
    89a4:	0b24      	lsrs	r4, r4, #12
    89a6:	0d76      	lsrs	r6, r6, #21
    89a8:	e7db      	b.n	8962 <__aeabi_dsub+0x14a>
    89aa:	4663      	mov	r3, ip
    89ac:	1af3      	subs	r3, r6, r3
    89ae:	2b00      	cmp	r3, #0
    89b0:	dc00      	bgt.n	89b4 <__aeabi_dsub+0x19c>
    89b2:	e094      	b.n	8ade <__aeabi_dsub+0x2c6>
    89b4:	4660      	mov	r0, ip
    89b6:	2800      	cmp	r0, #0
    89b8:	d035      	beq.n	8a26 <__aeabi_dsub+0x20e>
    89ba:	4868      	ldr	r0, [pc, #416]	; (8b5c <__aeabi_dsub+0x344>)
    89bc:	4286      	cmp	r6, r0
    89be:	d0b1      	beq.n	8924 <__aeabi_dsub+0x10c>
    89c0:	2780      	movs	r7, #128	; 0x80
    89c2:	043f      	lsls	r7, r7, #16
    89c4:	4339      	orrs	r1, r7
    89c6:	2b38      	cmp	r3, #56	; 0x38
    89c8:	dc00      	bgt.n	89cc <__aeabi_dsub+0x1b4>
    89ca:	e0fd      	b.n	8bc8 <__aeabi_dsub+0x3b0>
    89cc:	430a      	orrs	r2, r1
    89ce:	0017      	movs	r7, r2
    89d0:	2100      	movs	r1, #0
    89d2:	1e7a      	subs	r2, r7, #1
    89d4:	4197      	sbcs	r7, r2
    89d6:	4457      	add	r7, sl
    89d8:	4557      	cmp	r7, sl
    89da:	4180      	sbcs	r0, r0
    89dc:	1909      	adds	r1, r1, r4
    89de:	4244      	negs	r4, r0
    89e0:	190c      	adds	r4, r1, r4
    89e2:	0223      	lsls	r3, r4, #8
    89e4:	d53a      	bpl.n	8a5c <__aeabi_dsub+0x244>
    89e6:	4b5d      	ldr	r3, [pc, #372]	; (8b5c <__aeabi_dsub+0x344>)
    89e8:	3601      	adds	r6, #1
    89ea:	429e      	cmp	r6, r3
    89ec:	d100      	bne.n	89f0 <__aeabi_dsub+0x1d8>
    89ee:	e14b      	b.n	8c88 <__aeabi_dsub+0x470>
    89f0:	2201      	movs	r2, #1
    89f2:	4b5b      	ldr	r3, [pc, #364]	; (8b60 <__aeabi_dsub+0x348>)
    89f4:	401c      	ands	r4, r3
    89f6:	087b      	lsrs	r3, r7, #1
    89f8:	4017      	ands	r7, r2
    89fa:	431f      	orrs	r7, r3
    89fc:	07e2      	lsls	r2, r4, #31
    89fe:	4317      	orrs	r7, r2
    8a00:	0864      	lsrs	r4, r4, #1
    8a02:	e78f      	b.n	8924 <__aeabi_dsub+0x10c>
    8a04:	0008      	movs	r0, r1
    8a06:	4310      	orrs	r0, r2
    8a08:	d000      	beq.n	8a0c <__aeabi_dsub+0x1f4>
    8a0a:	e724      	b.n	8856 <__aeabi_dsub+0x3e>
    8a0c:	e721      	b.n	8852 <__aeabi_dsub+0x3a>
    8a0e:	0023      	movs	r3, r4
    8a10:	433b      	orrs	r3, r7
    8a12:	d100      	bne.n	8a16 <__aeabi_dsub+0x1fe>
    8a14:	e1b9      	b.n	8d8a <__aeabi_dsub+0x572>
    8a16:	2280      	movs	r2, #128	; 0x80
    8a18:	0312      	lsls	r2, r2, #12
    8a1a:	4314      	orrs	r4, r2
    8a1c:	0324      	lsls	r4, r4, #12
    8a1e:	0b24      	lsrs	r4, r4, #12
    8a20:	e79f      	b.n	8962 <__aeabi_dsub+0x14a>
    8a22:	002e      	movs	r6, r5
    8a24:	e77e      	b.n	8924 <__aeabi_dsub+0x10c>
    8a26:	0008      	movs	r0, r1
    8a28:	4310      	orrs	r0, r2
    8a2a:	d100      	bne.n	8a2e <__aeabi_dsub+0x216>
    8a2c:	e0ca      	b.n	8bc4 <__aeabi_dsub+0x3ac>
    8a2e:	1e58      	subs	r0, r3, #1
    8a30:	4684      	mov	ip, r0
    8a32:	2800      	cmp	r0, #0
    8a34:	d000      	beq.n	8a38 <__aeabi_dsub+0x220>
    8a36:	e0e7      	b.n	8c08 <__aeabi_dsub+0x3f0>
    8a38:	4452      	add	r2, sl
    8a3a:	4552      	cmp	r2, sl
    8a3c:	4180      	sbcs	r0, r0
    8a3e:	1864      	adds	r4, r4, r1
    8a40:	4240      	negs	r0, r0
    8a42:	1824      	adds	r4, r4, r0
    8a44:	0017      	movs	r7, r2
    8a46:	2601      	movs	r6, #1
    8a48:	0223      	lsls	r3, r4, #8
    8a4a:	d507      	bpl.n	8a5c <__aeabi_dsub+0x244>
    8a4c:	2602      	movs	r6, #2
    8a4e:	e7cf      	b.n	89f0 <__aeabi_dsub+0x1d8>
    8a50:	4664      	mov	r4, ip
    8a52:	432c      	orrs	r4, r5
    8a54:	d100      	bne.n	8a58 <__aeabi_dsub+0x240>
    8a56:	e1b3      	b.n	8dc0 <__aeabi_dsub+0x5a8>
    8a58:	002c      	movs	r4, r5
    8a5a:	4667      	mov	r7, ip
    8a5c:	077b      	lsls	r3, r7, #29
    8a5e:	d000      	beq.n	8a62 <__aeabi_dsub+0x24a>
    8a60:	e762      	b.n	8928 <__aeabi_dsub+0x110>
    8a62:	0763      	lsls	r3, r4, #29
    8a64:	08ff      	lsrs	r7, r7, #3
    8a66:	431f      	orrs	r7, r3
    8a68:	2501      	movs	r5, #1
    8a6a:	4643      	mov	r3, r8
    8a6c:	08e4      	lsrs	r4, r4, #3
    8a6e:	401d      	ands	r5, r3
    8a70:	e793      	b.n	899a <__aeabi_dsub+0x182>
    8a72:	2d00      	cmp	r5, #0
    8a74:	d178      	bne.n	8b68 <__aeabi_dsub+0x350>
    8a76:	1c75      	adds	r5, r6, #1
    8a78:	056d      	lsls	r5, r5, #21
    8a7a:	0d6d      	lsrs	r5, r5, #21
    8a7c:	2d01      	cmp	r5, #1
    8a7e:	dc00      	bgt.n	8a82 <__aeabi_dsub+0x26a>
    8a80:	e0f2      	b.n	8c68 <__aeabi_dsub+0x450>
    8a82:	4650      	mov	r0, sl
    8a84:	1a80      	subs	r0, r0, r2
    8a86:	4582      	cmp	sl, r0
    8a88:	41bf      	sbcs	r7, r7
    8a8a:	1a65      	subs	r5, r4, r1
    8a8c:	427f      	negs	r7, r7
    8a8e:	1bed      	subs	r5, r5, r7
    8a90:	4684      	mov	ip, r0
    8a92:	0228      	lsls	r0, r5, #8
    8a94:	d400      	bmi.n	8a98 <__aeabi_dsub+0x280>
    8a96:	e08c      	b.n	8bb2 <__aeabi_dsub+0x39a>
    8a98:	4650      	mov	r0, sl
    8a9a:	1a17      	subs	r7, r2, r0
    8a9c:	42ba      	cmp	r2, r7
    8a9e:	4192      	sbcs	r2, r2
    8aa0:	1b0c      	subs	r4, r1, r4
    8aa2:	4255      	negs	r5, r2
    8aa4:	1b65      	subs	r5, r4, r5
    8aa6:	4698      	mov	r8, r3
    8aa8:	e714      	b.n	88d4 <__aeabi_dsub+0xbc>
    8aaa:	2501      	movs	r5, #1
    8aac:	4643      	mov	r3, r8
    8aae:	2400      	movs	r4, #0
    8ab0:	401d      	ands	r5, r3
    8ab2:	2700      	movs	r7, #0
    8ab4:	e755      	b.n	8962 <__aeabi_dsub+0x14a>
    8ab6:	4c2a      	ldr	r4, [pc, #168]	; (8b60 <__aeabi_dsub+0x348>)
    8ab8:	1af6      	subs	r6, r6, r3
    8aba:	402c      	ands	r4, r5
    8abc:	e732      	b.n	8924 <__aeabi_dsub+0x10c>
    8abe:	003d      	movs	r5, r7
    8ac0:	3828      	subs	r0, #40	; 0x28
    8ac2:	4085      	lsls	r5, r0
    8ac4:	2700      	movs	r7, #0
    8ac6:	e717      	b.n	88f8 <__aeabi_dsub+0xe0>
    8ac8:	0038      	movs	r0, r7
    8aca:	f000 fb19 	bl	9100 <__clzsi2>
    8ace:	3020      	adds	r0, #32
    8ad0:	e706      	b.n	88e0 <__aeabi_dsub+0xc8>
    8ad2:	430a      	orrs	r2, r1
    8ad4:	0017      	movs	r7, r2
    8ad6:	2100      	movs	r1, #0
    8ad8:	1e7a      	subs	r2, r7, #1
    8ada:	4197      	sbcs	r7, r2
    8adc:	e6ee      	b.n	88bc <__aeabi_dsub+0xa4>
    8ade:	2b00      	cmp	r3, #0
    8ae0:	d000      	beq.n	8ae4 <__aeabi_dsub+0x2cc>
    8ae2:	e0e5      	b.n	8cb0 <__aeabi_dsub+0x498>
    8ae4:	1c73      	adds	r3, r6, #1
    8ae6:	469c      	mov	ip, r3
    8ae8:	055b      	lsls	r3, r3, #21
    8aea:	0d5b      	lsrs	r3, r3, #21
    8aec:	2b01      	cmp	r3, #1
    8aee:	dc00      	bgt.n	8af2 <__aeabi_dsub+0x2da>
    8af0:	e09f      	b.n	8c32 <__aeabi_dsub+0x41a>
    8af2:	4b1a      	ldr	r3, [pc, #104]	; (8b5c <__aeabi_dsub+0x344>)
    8af4:	459c      	cmp	ip, r3
    8af6:	d100      	bne.n	8afa <__aeabi_dsub+0x2e2>
    8af8:	e0c5      	b.n	8c86 <__aeabi_dsub+0x46e>
    8afa:	4452      	add	r2, sl
    8afc:	4552      	cmp	r2, sl
    8afe:	4180      	sbcs	r0, r0
    8b00:	1864      	adds	r4, r4, r1
    8b02:	4240      	negs	r0, r0
    8b04:	1824      	adds	r4, r4, r0
    8b06:	07e7      	lsls	r7, r4, #31
    8b08:	0852      	lsrs	r2, r2, #1
    8b0a:	4317      	orrs	r7, r2
    8b0c:	0864      	lsrs	r4, r4, #1
    8b0e:	4666      	mov	r6, ip
    8b10:	e708      	b.n	8924 <__aeabi_dsub+0x10c>
    8b12:	4812      	ldr	r0, [pc, #72]	; (8b5c <__aeabi_dsub+0x344>)
    8b14:	4285      	cmp	r5, r0
    8b16:	d100      	bne.n	8b1a <__aeabi_dsub+0x302>
    8b18:	e085      	b.n	8c26 <__aeabi_dsub+0x40e>
    8b1a:	001d      	movs	r5, r3
    8b1c:	e6bc      	b.n	8898 <__aeabi_dsub+0x80>
    8b1e:	0029      	movs	r1, r5
    8b20:	3e1f      	subs	r6, #31
    8b22:	40f1      	lsrs	r1, r6
    8b24:	2b20      	cmp	r3, #32
    8b26:	d100      	bne.n	8b2a <__aeabi_dsub+0x312>
    8b28:	e07f      	b.n	8c2a <__aeabi_dsub+0x412>
    8b2a:	2240      	movs	r2, #64	; 0x40
    8b2c:	1ad3      	subs	r3, r2, r3
    8b2e:	409d      	lsls	r5, r3
    8b30:	432f      	orrs	r7, r5
    8b32:	1e7d      	subs	r5, r7, #1
    8b34:	41af      	sbcs	r7, r5
    8b36:	2400      	movs	r4, #0
    8b38:	430f      	orrs	r7, r1
    8b3a:	2600      	movs	r6, #0
    8b3c:	e78e      	b.n	8a5c <__aeabi_dsub+0x244>
    8b3e:	002b      	movs	r3, r5
    8b40:	000f      	movs	r7, r1
    8b42:	3b20      	subs	r3, #32
    8b44:	40df      	lsrs	r7, r3
    8b46:	2d20      	cmp	r5, #32
    8b48:	d071      	beq.n	8c2e <__aeabi_dsub+0x416>
    8b4a:	2340      	movs	r3, #64	; 0x40
    8b4c:	1b5d      	subs	r5, r3, r5
    8b4e:	40a9      	lsls	r1, r5
    8b50:	430a      	orrs	r2, r1
    8b52:	1e51      	subs	r1, r2, #1
    8b54:	418a      	sbcs	r2, r1
    8b56:	2100      	movs	r1, #0
    8b58:	4317      	orrs	r7, r2
    8b5a:	e6af      	b.n	88bc <__aeabi_dsub+0xa4>
    8b5c:	000007ff 	.word	0x000007ff
    8b60:	ff7fffff 	.word	0xff7fffff
    8b64:	800fffff 	.word	0x800fffff
    8b68:	2e00      	cmp	r6, #0
    8b6a:	d03e      	beq.n	8bea <__aeabi_dsub+0x3d2>
    8b6c:	4eb3      	ldr	r6, [pc, #716]	; (8e3c <__aeabi_dsub+0x624>)
    8b6e:	45b4      	cmp	ip, r6
    8b70:	d045      	beq.n	8bfe <__aeabi_dsub+0x3e6>
    8b72:	2680      	movs	r6, #128	; 0x80
    8b74:	0436      	lsls	r6, r6, #16
    8b76:	426d      	negs	r5, r5
    8b78:	4334      	orrs	r4, r6
    8b7a:	2d38      	cmp	r5, #56	; 0x38
    8b7c:	dd00      	ble.n	8b80 <__aeabi_dsub+0x368>
    8b7e:	e0a8      	b.n	8cd2 <__aeabi_dsub+0x4ba>
    8b80:	2d1f      	cmp	r5, #31
    8b82:	dd00      	ble.n	8b86 <__aeabi_dsub+0x36e>
    8b84:	e11f      	b.n	8dc6 <__aeabi_dsub+0x5ae>
    8b86:	2620      	movs	r6, #32
    8b88:	0027      	movs	r7, r4
    8b8a:	4650      	mov	r0, sl
    8b8c:	1b76      	subs	r6, r6, r5
    8b8e:	40b7      	lsls	r7, r6
    8b90:	40e8      	lsrs	r0, r5
    8b92:	4307      	orrs	r7, r0
    8b94:	4650      	mov	r0, sl
    8b96:	40b0      	lsls	r0, r6
    8b98:	1e46      	subs	r6, r0, #1
    8b9a:	41b0      	sbcs	r0, r6
    8b9c:	40ec      	lsrs	r4, r5
    8b9e:	4338      	orrs	r0, r7
    8ba0:	1a17      	subs	r7, r2, r0
    8ba2:	42ba      	cmp	r2, r7
    8ba4:	4192      	sbcs	r2, r2
    8ba6:	1b0c      	subs	r4, r1, r4
    8ba8:	4252      	negs	r2, r2
    8baa:	1aa4      	subs	r4, r4, r2
    8bac:	4666      	mov	r6, ip
    8bae:	4698      	mov	r8, r3
    8bb0:	e68b      	b.n	88ca <__aeabi_dsub+0xb2>
    8bb2:	4664      	mov	r4, ip
    8bb4:	4667      	mov	r7, ip
    8bb6:	432c      	orrs	r4, r5
    8bb8:	d000      	beq.n	8bbc <__aeabi_dsub+0x3a4>
    8bba:	e68b      	b.n	88d4 <__aeabi_dsub+0xbc>
    8bbc:	2500      	movs	r5, #0
    8bbe:	2600      	movs	r6, #0
    8bc0:	2700      	movs	r7, #0
    8bc2:	e6ea      	b.n	899a <__aeabi_dsub+0x182>
    8bc4:	001e      	movs	r6, r3
    8bc6:	e6ad      	b.n	8924 <__aeabi_dsub+0x10c>
    8bc8:	2b1f      	cmp	r3, #31
    8bca:	dc60      	bgt.n	8c8e <__aeabi_dsub+0x476>
    8bcc:	2720      	movs	r7, #32
    8bce:	1af8      	subs	r0, r7, r3
    8bd0:	000f      	movs	r7, r1
    8bd2:	4684      	mov	ip, r0
    8bd4:	4087      	lsls	r7, r0
    8bd6:	0010      	movs	r0, r2
    8bd8:	40d8      	lsrs	r0, r3
    8bda:	4307      	orrs	r7, r0
    8bdc:	4660      	mov	r0, ip
    8bde:	4082      	lsls	r2, r0
    8be0:	1e50      	subs	r0, r2, #1
    8be2:	4182      	sbcs	r2, r0
    8be4:	40d9      	lsrs	r1, r3
    8be6:	4317      	orrs	r7, r2
    8be8:	e6f5      	b.n	89d6 <__aeabi_dsub+0x1be>
    8bea:	0026      	movs	r6, r4
    8bec:	4650      	mov	r0, sl
    8bee:	4306      	orrs	r6, r0
    8bf0:	d005      	beq.n	8bfe <__aeabi_dsub+0x3e6>
    8bf2:	43ed      	mvns	r5, r5
    8bf4:	2d00      	cmp	r5, #0
    8bf6:	d0d3      	beq.n	8ba0 <__aeabi_dsub+0x388>
    8bf8:	4e90      	ldr	r6, [pc, #576]	; (8e3c <__aeabi_dsub+0x624>)
    8bfa:	45b4      	cmp	ip, r6
    8bfc:	d1bd      	bne.n	8b7a <__aeabi_dsub+0x362>
    8bfe:	000c      	movs	r4, r1
    8c00:	0017      	movs	r7, r2
    8c02:	4666      	mov	r6, ip
    8c04:	4698      	mov	r8, r3
    8c06:	e68d      	b.n	8924 <__aeabi_dsub+0x10c>
    8c08:	488c      	ldr	r0, [pc, #560]	; (8e3c <__aeabi_dsub+0x624>)
    8c0a:	4283      	cmp	r3, r0
    8c0c:	d00b      	beq.n	8c26 <__aeabi_dsub+0x40e>
    8c0e:	4663      	mov	r3, ip
    8c10:	e6d9      	b.n	89c6 <__aeabi_dsub+0x1ae>
    8c12:	2d00      	cmp	r5, #0
    8c14:	d000      	beq.n	8c18 <__aeabi_dsub+0x400>
    8c16:	e096      	b.n	8d46 <__aeabi_dsub+0x52e>
    8c18:	0008      	movs	r0, r1
    8c1a:	4310      	orrs	r0, r2
    8c1c:	d100      	bne.n	8c20 <__aeabi_dsub+0x408>
    8c1e:	e0e2      	b.n	8de6 <__aeabi_dsub+0x5ce>
    8c20:	000c      	movs	r4, r1
    8c22:	0017      	movs	r7, r2
    8c24:	4698      	mov	r8, r3
    8c26:	4e85      	ldr	r6, [pc, #532]	; (8e3c <__aeabi_dsub+0x624>)
    8c28:	e67c      	b.n	8924 <__aeabi_dsub+0x10c>
    8c2a:	2500      	movs	r5, #0
    8c2c:	e780      	b.n	8b30 <__aeabi_dsub+0x318>
    8c2e:	2100      	movs	r1, #0
    8c30:	e78e      	b.n	8b50 <__aeabi_dsub+0x338>
    8c32:	0023      	movs	r3, r4
    8c34:	4650      	mov	r0, sl
    8c36:	4303      	orrs	r3, r0
    8c38:	2e00      	cmp	r6, #0
    8c3a:	d000      	beq.n	8c3e <__aeabi_dsub+0x426>
    8c3c:	e0a8      	b.n	8d90 <__aeabi_dsub+0x578>
    8c3e:	2b00      	cmp	r3, #0
    8c40:	d100      	bne.n	8c44 <__aeabi_dsub+0x42c>
    8c42:	e0de      	b.n	8e02 <__aeabi_dsub+0x5ea>
    8c44:	000b      	movs	r3, r1
    8c46:	4313      	orrs	r3, r2
    8c48:	d100      	bne.n	8c4c <__aeabi_dsub+0x434>
    8c4a:	e66b      	b.n	8924 <__aeabi_dsub+0x10c>
    8c4c:	4452      	add	r2, sl
    8c4e:	4552      	cmp	r2, sl
    8c50:	4180      	sbcs	r0, r0
    8c52:	1864      	adds	r4, r4, r1
    8c54:	4240      	negs	r0, r0
    8c56:	1824      	adds	r4, r4, r0
    8c58:	0017      	movs	r7, r2
    8c5a:	0223      	lsls	r3, r4, #8
    8c5c:	d400      	bmi.n	8c60 <__aeabi_dsub+0x448>
    8c5e:	e6fd      	b.n	8a5c <__aeabi_dsub+0x244>
    8c60:	4b77      	ldr	r3, [pc, #476]	; (8e40 <__aeabi_dsub+0x628>)
    8c62:	4666      	mov	r6, ip
    8c64:	401c      	ands	r4, r3
    8c66:	e65d      	b.n	8924 <__aeabi_dsub+0x10c>
    8c68:	0025      	movs	r5, r4
    8c6a:	4650      	mov	r0, sl
    8c6c:	4305      	orrs	r5, r0
    8c6e:	2e00      	cmp	r6, #0
    8c70:	d1cf      	bne.n	8c12 <__aeabi_dsub+0x3fa>
    8c72:	2d00      	cmp	r5, #0
    8c74:	d14f      	bne.n	8d16 <__aeabi_dsub+0x4fe>
    8c76:	000c      	movs	r4, r1
    8c78:	4314      	orrs	r4, r2
    8c7a:	d100      	bne.n	8c7e <__aeabi_dsub+0x466>
    8c7c:	e0a0      	b.n	8dc0 <__aeabi_dsub+0x5a8>
    8c7e:	000c      	movs	r4, r1
    8c80:	0017      	movs	r7, r2
    8c82:	4698      	mov	r8, r3
    8c84:	e64e      	b.n	8924 <__aeabi_dsub+0x10c>
    8c86:	4666      	mov	r6, ip
    8c88:	2400      	movs	r4, #0
    8c8a:	2700      	movs	r7, #0
    8c8c:	e685      	b.n	899a <__aeabi_dsub+0x182>
    8c8e:	001f      	movs	r7, r3
    8c90:	0008      	movs	r0, r1
    8c92:	3f20      	subs	r7, #32
    8c94:	40f8      	lsrs	r0, r7
    8c96:	0007      	movs	r7, r0
    8c98:	2b20      	cmp	r3, #32
    8c9a:	d100      	bne.n	8c9e <__aeabi_dsub+0x486>
    8c9c:	e08e      	b.n	8dbc <__aeabi_dsub+0x5a4>
    8c9e:	2040      	movs	r0, #64	; 0x40
    8ca0:	1ac3      	subs	r3, r0, r3
    8ca2:	4099      	lsls	r1, r3
    8ca4:	430a      	orrs	r2, r1
    8ca6:	1e51      	subs	r1, r2, #1
    8ca8:	418a      	sbcs	r2, r1
    8caa:	2100      	movs	r1, #0
    8cac:	4317      	orrs	r7, r2
    8cae:	e692      	b.n	89d6 <__aeabi_dsub+0x1be>
    8cb0:	2e00      	cmp	r6, #0
    8cb2:	d114      	bne.n	8cde <__aeabi_dsub+0x4c6>
    8cb4:	0026      	movs	r6, r4
    8cb6:	4650      	mov	r0, sl
    8cb8:	4306      	orrs	r6, r0
    8cba:	d062      	beq.n	8d82 <__aeabi_dsub+0x56a>
    8cbc:	43db      	mvns	r3, r3
    8cbe:	2b00      	cmp	r3, #0
    8cc0:	d15c      	bne.n	8d7c <__aeabi_dsub+0x564>
    8cc2:	1887      	adds	r7, r0, r2
    8cc4:	4297      	cmp	r7, r2
    8cc6:	4192      	sbcs	r2, r2
    8cc8:	1864      	adds	r4, r4, r1
    8cca:	4252      	negs	r2, r2
    8ccc:	18a4      	adds	r4, r4, r2
    8cce:	4666      	mov	r6, ip
    8cd0:	e687      	b.n	89e2 <__aeabi_dsub+0x1ca>
    8cd2:	4650      	mov	r0, sl
    8cd4:	4320      	orrs	r0, r4
    8cd6:	1e44      	subs	r4, r0, #1
    8cd8:	41a0      	sbcs	r0, r4
    8cda:	2400      	movs	r4, #0
    8cdc:	e760      	b.n	8ba0 <__aeabi_dsub+0x388>
    8cde:	4e57      	ldr	r6, [pc, #348]	; (8e3c <__aeabi_dsub+0x624>)
    8ce0:	45b4      	cmp	ip, r6
    8ce2:	d04e      	beq.n	8d82 <__aeabi_dsub+0x56a>
    8ce4:	2680      	movs	r6, #128	; 0x80
    8ce6:	0436      	lsls	r6, r6, #16
    8ce8:	425b      	negs	r3, r3
    8cea:	4334      	orrs	r4, r6
    8cec:	2b38      	cmp	r3, #56	; 0x38
    8cee:	dd00      	ble.n	8cf2 <__aeabi_dsub+0x4da>
    8cf0:	e07f      	b.n	8df2 <__aeabi_dsub+0x5da>
    8cf2:	2b1f      	cmp	r3, #31
    8cf4:	dd00      	ble.n	8cf8 <__aeabi_dsub+0x4e0>
    8cf6:	e08b      	b.n	8e10 <__aeabi_dsub+0x5f8>
    8cf8:	2620      	movs	r6, #32
    8cfa:	0027      	movs	r7, r4
    8cfc:	4650      	mov	r0, sl
    8cfe:	1af6      	subs	r6, r6, r3
    8d00:	40b7      	lsls	r7, r6
    8d02:	40d8      	lsrs	r0, r3
    8d04:	4307      	orrs	r7, r0
    8d06:	4650      	mov	r0, sl
    8d08:	40b0      	lsls	r0, r6
    8d0a:	1e46      	subs	r6, r0, #1
    8d0c:	41b0      	sbcs	r0, r6
    8d0e:	4307      	orrs	r7, r0
    8d10:	40dc      	lsrs	r4, r3
    8d12:	18bf      	adds	r7, r7, r2
    8d14:	e7d6      	b.n	8cc4 <__aeabi_dsub+0x4ac>
    8d16:	000d      	movs	r5, r1
    8d18:	4315      	orrs	r5, r2
    8d1a:	d100      	bne.n	8d1e <__aeabi_dsub+0x506>
    8d1c:	e602      	b.n	8924 <__aeabi_dsub+0x10c>
    8d1e:	4650      	mov	r0, sl
    8d20:	1a80      	subs	r0, r0, r2
    8d22:	4582      	cmp	sl, r0
    8d24:	41bf      	sbcs	r7, r7
    8d26:	1a65      	subs	r5, r4, r1
    8d28:	427f      	negs	r7, r7
    8d2a:	1bed      	subs	r5, r5, r7
    8d2c:	4684      	mov	ip, r0
    8d2e:	0228      	lsls	r0, r5, #8
    8d30:	d400      	bmi.n	8d34 <__aeabi_dsub+0x51c>
    8d32:	e68d      	b.n	8a50 <__aeabi_dsub+0x238>
    8d34:	4650      	mov	r0, sl
    8d36:	1a17      	subs	r7, r2, r0
    8d38:	42ba      	cmp	r2, r7
    8d3a:	4192      	sbcs	r2, r2
    8d3c:	1b0c      	subs	r4, r1, r4
    8d3e:	4252      	negs	r2, r2
    8d40:	1aa4      	subs	r4, r4, r2
    8d42:	4698      	mov	r8, r3
    8d44:	e5ee      	b.n	8924 <__aeabi_dsub+0x10c>
    8d46:	000d      	movs	r5, r1
    8d48:	4315      	orrs	r5, r2
    8d4a:	d100      	bne.n	8d4e <__aeabi_dsub+0x536>
    8d4c:	e76b      	b.n	8c26 <__aeabi_dsub+0x40e>
    8d4e:	4650      	mov	r0, sl
    8d50:	0767      	lsls	r7, r4, #29
    8d52:	08c0      	lsrs	r0, r0, #3
    8d54:	4307      	orrs	r7, r0
    8d56:	2080      	movs	r0, #128	; 0x80
    8d58:	08e4      	lsrs	r4, r4, #3
    8d5a:	0300      	lsls	r0, r0, #12
    8d5c:	4204      	tst	r4, r0
    8d5e:	d007      	beq.n	8d70 <__aeabi_dsub+0x558>
    8d60:	08cd      	lsrs	r5, r1, #3
    8d62:	4205      	tst	r5, r0
    8d64:	d104      	bne.n	8d70 <__aeabi_dsub+0x558>
    8d66:	002c      	movs	r4, r5
    8d68:	4698      	mov	r8, r3
    8d6a:	08d7      	lsrs	r7, r2, #3
    8d6c:	0749      	lsls	r1, r1, #29
    8d6e:	430f      	orrs	r7, r1
    8d70:	0f7b      	lsrs	r3, r7, #29
    8d72:	00e4      	lsls	r4, r4, #3
    8d74:	431c      	orrs	r4, r3
    8d76:	00ff      	lsls	r7, r7, #3
    8d78:	4e30      	ldr	r6, [pc, #192]	; (8e3c <__aeabi_dsub+0x624>)
    8d7a:	e5d3      	b.n	8924 <__aeabi_dsub+0x10c>
    8d7c:	4e2f      	ldr	r6, [pc, #188]	; (8e3c <__aeabi_dsub+0x624>)
    8d7e:	45b4      	cmp	ip, r6
    8d80:	d1b4      	bne.n	8cec <__aeabi_dsub+0x4d4>
    8d82:	000c      	movs	r4, r1
    8d84:	0017      	movs	r7, r2
    8d86:	4666      	mov	r6, ip
    8d88:	e5cc      	b.n	8924 <__aeabi_dsub+0x10c>
    8d8a:	2700      	movs	r7, #0
    8d8c:	2400      	movs	r4, #0
    8d8e:	e5e8      	b.n	8962 <__aeabi_dsub+0x14a>
    8d90:	2b00      	cmp	r3, #0
    8d92:	d039      	beq.n	8e08 <__aeabi_dsub+0x5f0>
    8d94:	000b      	movs	r3, r1
    8d96:	4313      	orrs	r3, r2
    8d98:	d100      	bne.n	8d9c <__aeabi_dsub+0x584>
    8d9a:	e744      	b.n	8c26 <__aeabi_dsub+0x40e>
    8d9c:	08c0      	lsrs	r0, r0, #3
    8d9e:	0767      	lsls	r7, r4, #29
    8da0:	4307      	orrs	r7, r0
    8da2:	2080      	movs	r0, #128	; 0x80
    8da4:	08e4      	lsrs	r4, r4, #3
    8da6:	0300      	lsls	r0, r0, #12
    8da8:	4204      	tst	r4, r0
    8daa:	d0e1      	beq.n	8d70 <__aeabi_dsub+0x558>
    8dac:	08cb      	lsrs	r3, r1, #3
    8dae:	4203      	tst	r3, r0
    8db0:	d1de      	bne.n	8d70 <__aeabi_dsub+0x558>
    8db2:	08d7      	lsrs	r7, r2, #3
    8db4:	0749      	lsls	r1, r1, #29
    8db6:	430f      	orrs	r7, r1
    8db8:	001c      	movs	r4, r3
    8dba:	e7d9      	b.n	8d70 <__aeabi_dsub+0x558>
    8dbc:	2100      	movs	r1, #0
    8dbe:	e771      	b.n	8ca4 <__aeabi_dsub+0x48c>
    8dc0:	2500      	movs	r5, #0
    8dc2:	2700      	movs	r7, #0
    8dc4:	e5e9      	b.n	899a <__aeabi_dsub+0x182>
    8dc6:	002e      	movs	r6, r5
    8dc8:	0027      	movs	r7, r4
    8dca:	3e20      	subs	r6, #32
    8dcc:	40f7      	lsrs	r7, r6
    8dce:	2d20      	cmp	r5, #32
    8dd0:	d02f      	beq.n	8e32 <__aeabi_dsub+0x61a>
    8dd2:	2640      	movs	r6, #64	; 0x40
    8dd4:	1b75      	subs	r5, r6, r5
    8dd6:	40ac      	lsls	r4, r5
    8dd8:	4650      	mov	r0, sl
    8dda:	4320      	orrs	r0, r4
    8ddc:	1e44      	subs	r4, r0, #1
    8dde:	41a0      	sbcs	r0, r4
    8de0:	2400      	movs	r4, #0
    8de2:	4338      	orrs	r0, r7
    8de4:	e6dc      	b.n	8ba0 <__aeabi_dsub+0x388>
    8de6:	2480      	movs	r4, #128	; 0x80
    8de8:	2500      	movs	r5, #0
    8dea:	0324      	lsls	r4, r4, #12
    8dec:	4e13      	ldr	r6, [pc, #76]	; (8e3c <__aeabi_dsub+0x624>)
    8dee:	2700      	movs	r7, #0
    8df0:	e5d3      	b.n	899a <__aeabi_dsub+0x182>
    8df2:	4650      	mov	r0, sl
    8df4:	4320      	orrs	r0, r4
    8df6:	0007      	movs	r7, r0
    8df8:	1e78      	subs	r0, r7, #1
    8dfa:	4187      	sbcs	r7, r0
    8dfc:	2400      	movs	r4, #0
    8dfe:	18bf      	adds	r7, r7, r2
    8e00:	e760      	b.n	8cc4 <__aeabi_dsub+0x4ac>
    8e02:	000c      	movs	r4, r1
    8e04:	0017      	movs	r7, r2
    8e06:	e58d      	b.n	8924 <__aeabi_dsub+0x10c>
    8e08:	000c      	movs	r4, r1
    8e0a:	0017      	movs	r7, r2
    8e0c:	4e0b      	ldr	r6, [pc, #44]	; (8e3c <__aeabi_dsub+0x624>)
    8e0e:	e589      	b.n	8924 <__aeabi_dsub+0x10c>
    8e10:	001e      	movs	r6, r3
    8e12:	0027      	movs	r7, r4
    8e14:	3e20      	subs	r6, #32
    8e16:	40f7      	lsrs	r7, r6
    8e18:	2b20      	cmp	r3, #32
    8e1a:	d00c      	beq.n	8e36 <__aeabi_dsub+0x61e>
    8e1c:	2640      	movs	r6, #64	; 0x40
    8e1e:	1af3      	subs	r3, r6, r3
    8e20:	409c      	lsls	r4, r3
    8e22:	4650      	mov	r0, sl
    8e24:	4320      	orrs	r0, r4
    8e26:	1e44      	subs	r4, r0, #1
    8e28:	41a0      	sbcs	r0, r4
    8e2a:	4307      	orrs	r7, r0
    8e2c:	2400      	movs	r4, #0
    8e2e:	18bf      	adds	r7, r7, r2
    8e30:	e748      	b.n	8cc4 <__aeabi_dsub+0x4ac>
    8e32:	2400      	movs	r4, #0
    8e34:	e7d0      	b.n	8dd8 <__aeabi_dsub+0x5c0>
    8e36:	2400      	movs	r4, #0
    8e38:	e7f3      	b.n	8e22 <__aeabi_dsub+0x60a>
    8e3a:	46c0      	nop			; (mov r8, r8)
    8e3c:	000007ff 	.word	0x000007ff
    8e40:	ff7fffff 	.word	0xff7fffff

00008e44 <__aeabi_dcmpun>:
    8e44:	b570      	push	{r4, r5, r6, lr}
    8e46:	4e0e      	ldr	r6, [pc, #56]	; (8e80 <__aeabi_dcmpun+0x3c>)
    8e48:	030d      	lsls	r5, r1, #12
    8e4a:	031c      	lsls	r4, r3, #12
    8e4c:	0049      	lsls	r1, r1, #1
    8e4e:	005b      	lsls	r3, r3, #1
    8e50:	0b2d      	lsrs	r5, r5, #12
    8e52:	0d49      	lsrs	r1, r1, #21
    8e54:	0b24      	lsrs	r4, r4, #12
    8e56:	0d5b      	lsrs	r3, r3, #21
    8e58:	42b1      	cmp	r1, r6
    8e5a:	d004      	beq.n	8e66 <__aeabi_dcmpun+0x22>
    8e5c:	4908      	ldr	r1, [pc, #32]	; (8e80 <__aeabi_dcmpun+0x3c>)
    8e5e:	2000      	movs	r0, #0
    8e60:	428b      	cmp	r3, r1
    8e62:	d008      	beq.n	8e76 <__aeabi_dcmpun+0x32>
    8e64:	bd70      	pop	{r4, r5, r6, pc}
    8e66:	4305      	orrs	r5, r0
    8e68:	2001      	movs	r0, #1
    8e6a:	2d00      	cmp	r5, #0
    8e6c:	d1fa      	bne.n	8e64 <__aeabi_dcmpun+0x20>
    8e6e:	4904      	ldr	r1, [pc, #16]	; (8e80 <__aeabi_dcmpun+0x3c>)
    8e70:	2000      	movs	r0, #0
    8e72:	428b      	cmp	r3, r1
    8e74:	d1f6      	bne.n	8e64 <__aeabi_dcmpun+0x20>
    8e76:	4314      	orrs	r4, r2
    8e78:	0020      	movs	r0, r4
    8e7a:	1e44      	subs	r4, r0, #1
    8e7c:	41a0      	sbcs	r0, r4
    8e7e:	e7f1      	b.n	8e64 <__aeabi_dcmpun+0x20>
    8e80:	000007ff 	.word	0x000007ff

00008e84 <__aeabi_i2d>:
    8e84:	b570      	push	{r4, r5, r6, lr}
    8e86:	2800      	cmp	r0, #0
    8e88:	d030      	beq.n	8eec <__aeabi_i2d+0x68>
    8e8a:	17c3      	asrs	r3, r0, #31
    8e8c:	18c4      	adds	r4, r0, r3
    8e8e:	405c      	eors	r4, r3
    8e90:	0fc5      	lsrs	r5, r0, #31
    8e92:	0020      	movs	r0, r4
    8e94:	f000 f934 	bl	9100 <__clzsi2>
    8e98:	4b17      	ldr	r3, [pc, #92]	; (8ef8 <__aeabi_i2d+0x74>)
    8e9a:	4a18      	ldr	r2, [pc, #96]	; (8efc <__aeabi_i2d+0x78>)
    8e9c:	1a1b      	subs	r3, r3, r0
    8e9e:	1ad2      	subs	r2, r2, r3
    8ea0:	2a1f      	cmp	r2, #31
    8ea2:	dd18      	ble.n	8ed6 <__aeabi_i2d+0x52>
    8ea4:	4a16      	ldr	r2, [pc, #88]	; (8f00 <__aeabi_i2d+0x7c>)
    8ea6:	1ad2      	subs	r2, r2, r3
    8ea8:	4094      	lsls	r4, r2
    8eaa:	2200      	movs	r2, #0
    8eac:	0324      	lsls	r4, r4, #12
    8eae:	055b      	lsls	r3, r3, #21
    8eb0:	0b24      	lsrs	r4, r4, #12
    8eb2:	0d5b      	lsrs	r3, r3, #21
    8eb4:	2100      	movs	r1, #0
    8eb6:	0010      	movs	r0, r2
    8eb8:	0324      	lsls	r4, r4, #12
    8eba:	0d0a      	lsrs	r2, r1, #20
    8ebc:	0b24      	lsrs	r4, r4, #12
    8ebe:	0512      	lsls	r2, r2, #20
    8ec0:	4322      	orrs	r2, r4
    8ec2:	4c10      	ldr	r4, [pc, #64]	; (8f04 <__aeabi_i2d+0x80>)
    8ec4:	051b      	lsls	r3, r3, #20
    8ec6:	4022      	ands	r2, r4
    8ec8:	4313      	orrs	r3, r2
    8eca:	005b      	lsls	r3, r3, #1
    8ecc:	07ed      	lsls	r5, r5, #31
    8ece:	085b      	lsrs	r3, r3, #1
    8ed0:	432b      	orrs	r3, r5
    8ed2:	0019      	movs	r1, r3
    8ed4:	bd70      	pop	{r4, r5, r6, pc}
    8ed6:	0021      	movs	r1, r4
    8ed8:	4091      	lsls	r1, r2
    8eda:	000a      	movs	r2, r1
    8edc:	210b      	movs	r1, #11
    8ede:	1a08      	subs	r0, r1, r0
    8ee0:	40c4      	lsrs	r4, r0
    8ee2:	055b      	lsls	r3, r3, #21
    8ee4:	0324      	lsls	r4, r4, #12
    8ee6:	0b24      	lsrs	r4, r4, #12
    8ee8:	0d5b      	lsrs	r3, r3, #21
    8eea:	e7e3      	b.n	8eb4 <__aeabi_i2d+0x30>
    8eec:	2500      	movs	r5, #0
    8eee:	2300      	movs	r3, #0
    8ef0:	2400      	movs	r4, #0
    8ef2:	2200      	movs	r2, #0
    8ef4:	e7de      	b.n	8eb4 <__aeabi_i2d+0x30>
    8ef6:	46c0      	nop			; (mov r8, r8)
    8ef8:	0000041e 	.word	0x0000041e
    8efc:	00000433 	.word	0x00000433
    8f00:	00000413 	.word	0x00000413
    8f04:	800fffff 	.word	0x800fffff

00008f08 <__aeabi_ui2d>:
    8f08:	b510      	push	{r4, lr}
    8f0a:	1e04      	subs	r4, r0, #0
    8f0c:	d028      	beq.n	8f60 <__aeabi_ui2d+0x58>
    8f0e:	f000 f8f7 	bl	9100 <__clzsi2>
    8f12:	4b15      	ldr	r3, [pc, #84]	; (8f68 <__aeabi_ui2d+0x60>)
    8f14:	4a15      	ldr	r2, [pc, #84]	; (8f6c <__aeabi_ui2d+0x64>)
    8f16:	1a1b      	subs	r3, r3, r0
    8f18:	1ad2      	subs	r2, r2, r3
    8f1a:	2a1f      	cmp	r2, #31
    8f1c:	dd15      	ble.n	8f4a <__aeabi_ui2d+0x42>
    8f1e:	4a14      	ldr	r2, [pc, #80]	; (8f70 <__aeabi_ui2d+0x68>)
    8f20:	1ad2      	subs	r2, r2, r3
    8f22:	4094      	lsls	r4, r2
    8f24:	2200      	movs	r2, #0
    8f26:	0324      	lsls	r4, r4, #12
    8f28:	055b      	lsls	r3, r3, #21
    8f2a:	0b24      	lsrs	r4, r4, #12
    8f2c:	0d5b      	lsrs	r3, r3, #21
    8f2e:	2100      	movs	r1, #0
    8f30:	0010      	movs	r0, r2
    8f32:	0324      	lsls	r4, r4, #12
    8f34:	0d0a      	lsrs	r2, r1, #20
    8f36:	0b24      	lsrs	r4, r4, #12
    8f38:	0512      	lsls	r2, r2, #20
    8f3a:	4322      	orrs	r2, r4
    8f3c:	4c0d      	ldr	r4, [pc, #52]	; (8f74 <__aeabi_ui2d+0x6c>)
    8f3e:	051b      	lsls	r3, r3, #20
    8f40:	4022      	ands	r2, r4
    8f42:	4313      	orrs	r3, r2
    8f44:	005b      	lsls	r3, r3, #1
    8f46:	0859      	lsrs	r1, r3, #1
    8f48:	bd10      	pop	{r4, pc}
    8f4a:	0021      	movs	r1, r4
    8f4c:	4091      	lsls	r1, r2
    8f4e:	000a      	movs	r2, r1
    8f50:	210b      	movs	r1, #11
    8f52:	1a08      	subs	r0, r1, r0
    8f54:	40c4      	lsrs	r4, r0
    8f56:	055b      	lsls	r3, r3, #21
    8f58:	0324      	lsls	r4, r4, #12
    8f5a:	0b24      	lsrs	r4, r4, #12
    8f5c:	0d5b      	lsrs	r3, r3, #21
    8f5e:	e7e6      	b.n	8f2e <__aeabi_ui2d+0x26>
    8f60:	2300      	movs	r3, #0
    8f62:	2400      	movs	r4, #0
    8f64:	2200      	movs	r2, #0
    8f66:	e7e2      	b.n	8f2e <__aeabi_ui2d+0x26>
    8f68:	0000041e 	.word	0x0000041e
    8f6c:	00000433 	.word	0x00000433
    8f70:	00000413 	.word	0x00000413
    8f74:	800fffff 	.word	0x800fffff

00008f78 <__aeabi_d2f>:
    8f78:	b5f0      	push	{r4, r5, r6, r7, lr}
    8f7a:	004c      	lsls	r4, r1, #1
    8f7c:	0d64      	lsrs	r4, r4, #21
    8f7e:	030b      	lsls	r3, r1, #12
    8f80:	1c62      	adds	r2, r4, #1
    8f82:	0f45      	lsrs	r5, r0, #29
    8f84:	0a5b      	lsrs	r3, r3, #9
    8f86:	0552      	lsls	r2, r2, #21
    8f88:	432b      	orrs	r3, r5
    8f8a:	0fc9      	lsrs	r1, r1, #31
    8f8c:	00c5      	lsls	r5, r0, #3
    8f8e:	0d52      	lsrs	r2, r2, #21
    8f90:	2a01      	cmp	r2, #1
    8f92:	dd28      	ble.n	8fe6 <__aeabi_d2f+0x6e>
    8f94:	4a3a      	ldr	r2, [pc, #232]	; (9080 <__aeabi_d2f+0x108>)
    8f96:	18a6      	adds	r6, r4, r2
    8f98:	2efe      	cmp	r6, #254	; 0xfe
    8f9a:	dc1b      	bgt.n	8fd4 <__aeabi_d2f+0x5c>
    8f9c:	2e00      	cmp	r6, #0
    8f9e:	dd3e      	ble.n	901e <__aeabi_d2f+0xa6>
    8fa0:	0180      	lsls	r0, r0, #6
    8fa2:	0002      	movs	r2, r0
    8fa4:	1e50      	subs	r0, r2, #1
    8fa6:	4182      	sbcs	r2, r0
    8fa8:	0f6d      	lsrs	r5, r5, #29
    8faa:	432a      	orrs	r2, r5
    8fac:	00db      	lsls	r3, r3, #3
    8fae:	4313      	orrs	r3, r2
    8fb0:	075a      	lsls	r2, r3, #29
    8fb2:	d004      	beq.n	8fbe <__aeabi_d2f+0x46>
    8fb4:	220f      	movs	r2, #15
    8fb6:	401a      	ands	r2, r3
    8fb8:	2a04      	cmp	r2, #4
    8fba:	d000      	beq.n	8fbe <__aeabi_d2f+0x46>
    8fbc:	3304      	adds	r3, #4
    8fbe:	2280      	movs	r2, #128	; 0x80
    8fc0:	04d2      	lsls	r2, r2, #19
    8fc2:	401a      	ands	r2, r3
    8fc4:	d05a      	beq.n	907c <__aeabi_d2f+0x104>
    8fc6:	3601      	adds	r6, #1
    8fc8:	2eff      	cmp	r6, #255	; 0xff
    8fca:	d003      	beq.n	8fd4 <__aeabi_d2f+0x5c>
    8fcc:	019b      	lsls	r3, r3, #6
    8fce:	0a5b      	lsrs	r3, r3, #9
    8fd0:	b2f4      	uxtb	r4, r6
    8fd2:	e001      	b.n	8fd8 <__aeabi_d2f+0x60>
    8fd4:	24ff      	movs	r4, #255	; 0xff
    8fd6:	2300      	movs	r3, #0
    8fd8:	0258      	lsls	r0, r3, #9
    8fda:	05e4      	lsls	r4, r4, #23
    8fdc:	0a40      	lsrs	r0, r0, #9
    8fde:	07c9      	lsls	r1, r1, #31
    8fe0:	4320      	orrs	r0, r4
    8fe2:	4308      	orrs	r0, r1
    8fe4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    8fe6:	2c00      	cmp	r4, #0
    8fe8:	d007      	beq.n	8ffa <__aeabi_d2f+0x82>
    8fea:	431d      	orrs	r5, r3
    8fec:	d0f2      	beq.n	8fd4 <__aeabi_d2f+0x5c>
    8fee:	2080      	movs	r0, #128	; 0x80
    8ff0:	00db      	lsls	r3, r3, #3
    8ff2:	0480      	lsls	r0, r0, #18
    8ff4:	4303      	orrs	r3, r0
    8ff6:	26ff      	movs	r6, #255	; 0xff
    8ff8:	e7da      	b.n	8fb0 <__aeabi_d2f+0x38>
    8ffa:	432b      	orrs	r3, r5
    8ffc:	d003      	beq.n	9006 <__aeabi_d2f+0x8e>
    8ffe:	2305      	movs	r3, #5
    9000:	08db      	lsrs	r3, r3, #3
    9002:	2cff      	cmp	r4, #255	; 0xff
    9004:	d003      	beq.n	900e <__aeabi_d2f+0x96>
    9006:	025b      	lsls	r3, r3, #9
    9008:	0a5b      	lsrs	r3, r3, #9
    900a:	b2e4      	uxtb	r4, r4
    900c:	e7e4      	b.n	8fd8 <__aeabi_d2f+0x60>
    900e:	2b00      	cmp	r3, #0
    9010:	d032      	beq.n	9078 <__aeabi_d2f+0x100>
    9012:	2080      	movs	r0, #128	; 0x80
    9014:	03c0      	lsls	r0, r0, #15
    9016:	4303      	orrs	r3, r0
    9018:	025b      	lsls	r3, r3, #9
    901a:	0a5b      	lsrs	r3, r3, #9
    901c:	e7dc      	b.n	8fd8 <__aeabi_d2f+0x60>
    901e:	0032      	movs	r2, r6
    9020:	3217      	adds	r2, #23
    9022:	db14      	blt.n	904e <__aeabi_d2f+0xd6>
    9024:	2280      	movs	r2, #128	; 0x80
    9026:	271e      	movs	r7, #30
    9028:	0412      	lsls	r2, r2, #16
    902a:	4313      	orrs	r3, r2
    902c:	1bbf      	subs	r7, r7, r6
    902e:	2f1f      	cmp	r7, #31
    9030:	dc0f      	bgt.n	9052 <__aeabi_d2f+0xda>
    9032:	4a14      	ldr	r2, [pc, #80]	; (9084 <__aeabi_d2f+0x10c>)
    9034:	4694      	mov	ip, r2
    9036:	4464      	add	r4, ip
    9038:	002a      	movs	r2, r5
    903a:	40a5      	lsls	r5, r4
    903c:	002e      	movs	r6, r5
    903e:	40a3      	lsls	r3, r4
    9040:	1e75      	subs	r5, r6, #1
    9042:	41ae      	sbcs	r6, r5
    9044:	40fa      	lsrs	r2, r7
    9046:	4333      	orrs	r3, r6
    9048:	4313      	orrs	r3, r2
    904a:	2600      	movs	r6, #0
    904c:	e7b0      	b.n	8fb0 <__aeabi_d2f+0x38>
    904e:	2400      	movs	r4, #0
    9050:	e7d5      	b.n	8ffe <__aeabi_d2f+0x86>
    9052:	2202      	movs	r2, #2
    9054:	4252      	negs	r2, r2
    9056:	1b96      	subs	r6, r2, r6
    9058:	001a      	movs	r2, r3
    905a:	40f2      	lsrs	r2, r6
    905c:	2f20      	cmp	r7, #32
    905e:	d009      	beq.n	9074 <__aeabi_d2f+0xfc>
    9060:	4809      	ldr	r0, [pc, #36]	; (9088 <__aeabi_d2f+0x110>)
    9062:	4684      	mov	ip, r0
    9064:	4464      	add	r4, ip
    9066:	40a3      	lsls	r3, r4
    9068:	432b      	orrs	r3, r5
    906a:	1e5d      	subs	r5, r3, #1
    906c:	41ab      	sbcs	r3, r5
    906e:	2600      	movs	r6, #0
    9070:	4313      	orrs	r3, r2
    9072:	e79d      	b.n	8fb0 <__aeabi_d2f+0x38>
    9074:	2300      	movs	r3, #0
    9076:	e7f7      	b.n	9068 <__aeabi_d2f+0xf0>
    9078:	2300      	movs	r3, #0
    907a:	e7ad      	b.n	8fd8 <__aeabi_d2f+0x60>
    907c:	0034      	movs	r4, r6
    907e:	e7bf      	b.n	9000 <__aeabi_d2f+0x88>
    9080:	fffffc80 	.word	0xfffffc80
    9084:	fffffc82 	.word	0xfffffc82
    9088:	fffffca2 	.word	0xfffffca2

0000908c <__aeabi_cfrcmple>:
    908c:	4684      	mov	ip, r0
    908e:	1c08      	adds	r0, r1, #0
    9090:	4661      	mov	r1, ip
    9092:	e7ff      	b.n	9094 <__aeabi_cfcmpeq>

00009094 <__aeabi_cfcmpeq>:
    9094:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    9096:	f000 f8b7 	bl	9208 <__lesf2>
    909a:	2800      	cmp	r0, #0
    909c:	d401      	bmi.n	90a2 <__aeabi_cfcmpeq+0xe>
    909e:	2100      	movs	r1, #0
    90a0:	42c8      	cmn	r0, r1
    90a2:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

000090a4 <__aeabi_fcmpeq>:
    90a4:	b510      	push	{r4, lr}
    90a6:	f000 f849 	bl	913c <__eqsf2>
    90aa:	4240      	negs	r0, r0
    90ac:	3001      	adds	r0, #1
    90ae:	bd10      	pop	{r4, pc}

000090b0 <__aeabi_fcmplt>:
    90b0:	b510      	push	{r4, lr}
    90b2:	f000 f8a9 	bl	9208 <__lesf2>
    90b6:	2800      	cmp	r0, #0
    90b8:	db01      	blt.n	90be <__aeabi_fcmplt+0xe>
    90ba:	2000      	movs	r0, #0
    90bc:	bd10      	pop	{r4, pc}
    90be:	2001      	movs	r0, #1
    90c0:	bd10      	pop	{r4, pc}
    90c2:	46c0      	nop			; (mov r8, r8)

000090c4 <__aeabi_fcmple>:
    90c4:	b510      	push	{r4, lr}
    90c6:	f000 f89f 	bl	9208 <__lesf2>
    90ca:	2800      	cmp	r0, #0
    90cc:	dd01      	ble.n	90d2 <__aeabi_fcmple+0xe>
    90ce:	2000      	movs	r0, #0
    90d0:	bd10      	pop	{r4, pc}
    90d2:	2001      	movs	r0, #1
    90d4:	bd10      	pop	{r4, pc}
    90d6:	46c0      	nop			; (mov r8, r8)

000090d8 <__aeabi_fcmpgt>:
    90d8:	b510      	push	{r4, lr}
    90da:	f000 f855 	bl	9188 <__gesf2>
    90de:	2800      	cmp	r0, #0
    90e0:	dc01      	bgt.n	90e6 <__aeabi_fcmpgt+0xe>
    90e2:	2000      	movs	r0, #0
    90e4:	bd10      	pop	{r4, pc}
    90e6:	2001      	movs	r0, #1
    90e8:	bd10      	pop	{r4, pc}
    90ea:	46c0      	nop			; (mov r8, r8)

000090ec <__aeabi_fcmpge>:
    90ec:	b510      	push	{r4, lr}
    90ee:	f000 f84b 	bl	9188 <__gesf2>
    90f2:	2800      	cmp	r0, #0
    90f4:	da01      	bge.n	90fa <__aeabi_fcmpge+0xe>
    90f6:	2000      	movs	r0, #0
    90f8:	bd10      	pop	{r4, pc}
    90fa:	2001      	movs	r0, #1
    90fc:	bd10      	pop	{r4, pc}
    90fe:	46c0      	nop			; (mov r8, r8)

00009100 <__clzsi2>:
    9100:	211c      	movs	r1, #28
    9102:	2301      	movs	r3, #1
    9104:	041b      	lsls	r3, r3, #16
    9106:	4298      	cmp	r0, r3
    9108:	d301      	bcc.n	910e <__clzsi2+0xe>
    910a:	0c00      	lsrs	r0, r0, #16
    910c:	3910      	subs	r1, #16
    910e:	0a1b      	lsrs	r3, r3, #8
    9110:	4298      	cmp	r0, r3
    9112:	d301      	bcc.n	9118 <__clzsi2+0x18>
    9114:	0a00      	lsrs	r0, r0, #8
    9116:	3908      	subs	r1, #8
    9118:	091b      	lsrs	r3, r3, #4
    911a:	4298      	cmp	r0, r3
    911c:	d301      	bcc.n	9122 <__clzsi2+0x22>
    911e:	0900      	lsrs	r0, r0, #4
    9120:	3904      	subs	r1, #4
    9122:	a202      	add	r2, pc, #8	; (adr r2, 912c <__clzsi2+0x2c>)
    9124:	5c10      	ldrb	r0, [r2, r0]
    9126:	1840      	adds	r0, r0, r1
    9128:	4770      	bx	lr
    912a:	46c0      	nop			; (mov r8, r8)
    912c:	02020304 	.word	0x02020304
    9130:	01010101 	.word	0x01010101
	...

0000913c <__eqsf2>:
    913c:	b570      	push	{r4, r5, r6, lr}
    913e:	0042      	lsls	r2, r0, #1
    9140:	0245      	lsls	r5, r0, #9
    9142:	024e      	lsls	r6, r1, #9
    9144:	004c      	lsls	r4, r1, #1
    9146:	0fc3      	lsrs	r3, r0, #31
    9148:	0a6d      	lsrs	r5, r5, #9
    914a:	0e12      	lsrs	r2, r2, #24
    914c:	0a76      	lsrs	r6, r6, #9
    914e:	0e24      	lsrs	r4, r4, #24
    9150:	0fc9      	lsrs	r1, r1, #31
    9152:	2001      	movs	r0, #1
    9154:	2aff      	cmp	r2, #255	; 0xff
    9156:	d006      	beq.n	9166 <__eqsf2+0x2a>
    9158:	2cff      	cmp	r4, #255	; 0xff
    915a:	d003      	beq.n	9164 <__eqsf2+0x28>
    915c:	42a2      	cmp	r2, r4
    915e:	d101      	bne.n	9164 <__eqsf2+0x28>
    9160:	42b5      	cmp	r5, r6
    9162:	d006      	beq.n	9172 <__eqsf2+0x36>
    9164:	bd70      	pop	{r4, r5, r6, pc}
    9166:	2d00      	cmp	r5, #0
    9168:	d1fc      	bne.n	9164 <__eqsf2+0x28>
    916a:	2cff      	cmp	r4, #255	; 0xff
    916c:	d1fa      	bne.n	9164 <__eqsf2+0x28>
    916e:	2e00      	cmp	r6, #0
    9170:	d1f8      	bne.n	9164 <__eqsf2+0x28>
    9172:	428b      	cmp	r3, r1
    9174:	d006      	beq.n	9184 <__eqsf2+0x48>
    9176:	2001      	movs	r0, #1
    9178:	2a00      	cmp	r2, #0
    917a:	d1f3      	bne.n	9164 <__eqsf2+0x28>
    917c:	0028      	movs	r0, r5
    917e:	1e45      	subs	r5, r0, #1
    9180:	41a8      	sbcs	r0, r5
    9182:	e7ef      	b.n	9164 <__eqsf2+0x28>
    9184:	2000      	movs	r0, #0
    9186:	e7ed      	b.n	9164 <__eqsf2+0x28>

00009188 <__gesf2>:
    9188:	b5f0      	push	{r4, r5, r6, r7, lr}
    918a:	0042      	lsls	r2, r0, #1
    918c:	0245      	lsls	r5, r0, #9
    918e:	024c      	lsls	r4, r1, #9
    9190:	0fc3      	lsrs	r3, r0, #31
    9192:	0048      	lsls	r0, r1, #1
    9194:	0a6d      	lsrs	r5, r5, #9
    9196:	0e12      	lsrs	r2, r2, #24
    9198:	0a64      	lsrs	r4, r4, #9
    919a:	0e00      	lsrs	r0, r0, #24
    919c:	0fc9      	lsrs	r1, r1, #31
    919e:	2aff      	cmp	r2, #255	; 0xff
    91a0:	d01e      	beq.n	91e0 <__gesf2+0x58>
    91a2:	28ff      	cmp	r0, #255	; 0xff
    91a4:	d021      	beq.n	91ea <__gesf2+0x62>
    91a6:	2a00      	cmp	r2, #0
    91a8:	d10a      	bne.n	91c0 <__gesf2+0x38>
    91aa:	426e      	negs	r6, r5
    91ac:	416e      	adcs	r6, r5
    91ae:	b2f6      	uxtb	r6, r6
    91b0:	2800      	cmp	r0, #0
    91b2:	d10f      	bne.n	91d4 <__gesf2+0x4c>
    91b4:	2c00      	cmp	r4, #0
    91b6:	d10d      	bne.n	91d4 <__gesf2+0x4c>
    91b8:	2000      	movs	r0, #0
    91ba:	2d00      	cmp	r5, #0
    91bc:	d009      	beq.n	91d2 <__gesf2+0x4a>
    91be:	e005      	b.n	91cc <__gesf2+0x44>
    91c0:	2800      	cmp	r0, #0
    91c2:	d101      	bne.n	91c8 <__gesf2+0x40>
    91c4:	2c00      	cmp	r4, #0
    91c6:	d001      	beq.n	91cc <__gesf2+0x44>
    91c8:	428b      	cmp	r3, r1
    91ca:	d011      	beq.n	91f0 <__gesf2+0x68>
    91cc:	2101      	movs	r1, #1
    91ce:	4258      	negs	r0, r3
    91d0:	4308      	orrs	r0, r1
    91d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    91d4:	2e00      	cmp	r6, #0
    91d6:	d0f7      	beq.n	91c8 <__gesf2+0x40>
    91d8:	2001      	movs	r0, #1
    91da:	3901      	subs	r1, #1
    91dc:	4308      	orrs	r0, r1
    91de:	e7f8      	b.n	91d2 <__gesf2+0x4a>
    91e0:	2d00      	cmp	r5, #0
    91e2:	d0de      	beq.n	91a2 <__gesf2+0x1a>
    91e4:	2002      	movs	r0, #2
    91e6:	4240      	negs	r0, r0
    91e8:	e7f3      	b.n	91d2 <__gesf2+0x4a>
    91ea:	2c00      	cmp	r4, #0
    91ec:	d0db      	beq.n	91a6 <__gesf2+0x1e>
    91ee:	e7f9      	b.n	91e4 <__gesf2+0x5c>
    91f0:	4282      	cmp	r2, r0
    91f2:	dceb      	bgt.n	91cc <__gesf2+0x44>
    91f4:	db04      	blt.n	9200 <__gesf2+0x78>
    91f6:	42a5      	cmp	r5, r4
    91f8:	d8e8      	bhi.n	91cc <__gesf2+0x44>
    91fa:	2000      	movs	r0, #0
    91fc:	42a5      	cmp	r5, r4
    91fe:	d2e8      	bcs.n	91d2 <__gesf2+0x4a>
    9200:	2101      	movs	r1, #1
    9202:	1e58      	subs	r0, r3, #1
    9204:	4308      	orrs	r0, r1
    9206:	e7e4      	b.n	91d2 <__gesf2+0x4a>

00009208 <__lesf2>:
    9208:	b5f0      	push	{r4, r5, r6, r7, lr}
    920a:	0042      	lsls	r2, r0, #1
    920c:	024d      	lsls	r5, r1, #9
    920e:	004c      	lsls	r4, r1, #1
    9210:	0246      	lsls	r6, r0, #9
    9212:	0a76      	lsrs	r6, r6, #9
    9214:	0e12      	lsrs	r2, r2, #24
    9216:	0fc3      	lsrs	r3, r0, #31
    9218:	0a6d      	lsrs	r5, r5, #9
    921a:	0e24      	lsrs	r4, r4, #24
    921c:	0fc9      	lsrs	r1, r1, #31
    921e:	2aff      	cmp	r2, #255	; 0xff
    9220:	d016      	beq.n	9250 <__lesf2+0x48>
    9222:	2cff      	cmp	r4, #255	; 0xff
    9224:	d018      	beq.n	9258 <__lesf2+0x50>
    9226:	2a00      	cmp	r2, #0
    9228:	d10a      	bne.n	9240 <__lesf2+0x38>
    922a:	4270      	negs	r0, r6
    922c:	4170      	adcs	r0, r6
    922e:	b2c0      	uxtb	r0, r0
    9230:	2c00      	cmp	r4, #0
    9232:	d015      	beq.n	9260 <__lesf2+0x58>
    9234:	2800      	cmp	r0, #0
    9236:	d005      	beq.n	9244 <__lesf2+0x3c>
    9238:	2001      	movs	r0, #1
    923a:	3901      	subs	r1, #1
    923c:	4308      	orrs	r0, r1
    923e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    9240:	2c00      	cmp	r4, #0
    9242:	d013      	beq.n	926c <__lesf2+0x64>
    9244:	4299      	cmp	r1, r3
    9246:	d014      	beq.n	9272 <__lesf2+0x6a>
    9248:	2001      	movs	r0, #1
    924a:	425b      	negs	r3, r3
    924c:	4318      	orrs	r0, r3
    924e:	e7f6      	b.n	923e <__lesf2+0x36>
    9250:	2002      	movs	r0, #2
    9252:	2e00      	cmp	r6, #0
    9254:	d1f3      	bne.n	923e <__lesf2+0x36>
    9256:	e7e4      	b.n	9222 <__lesf2+0x1a>
    9258:	2002      	movs	r0, #2
    925a:	2d00      	cmp	r5, #0
    925c:	d1ef      	bne.n	923e <__lesf2+0x36>
    925e:	e7e2      	b.n	9226 <__lesf2+0x1e>
    9260:	2d00      	cmp	r5, #0
    9262:	d1e7      	bne.n	9234 <__lesf2+0x2c>
    9264:	2000      	movs	r0, #0
    9266:	2e00      	cmp	r6, #0
    9268:	d0e9      	beq.n	923e <__lesf2+0x36>
    926a:	e7ed      	b.n	9248 <__lesf2+0x40>
    926c:	2d00      	cmp	r5, #0
    926e:	d1e9      	bne.n	9244 <__lesf2+0x3c>
    9270:	e7ea      	b.n	9248 <__lesf2+0x40>
    9272:	42a2      	cmp	r2, r4
    9274:	dc06      	bgt.n	9284 <__lesf2+0x7c>
    9276:	dbdf      	blt.n	9238 <__lesf2+0x30>
    9278:	42ae      	cmp	r6, r5
    927a:	d803      	bhi.n	9284 <__lesf2+0x7c>
    927c:	2000      	movs	r0, #0
    927e:	42ae      	cmp	r6, r5
    9280:	d3da      	bcc.n	9238 <__lesf2+0x30>
    9282:	e7dc      	b.n	923e <__lesf2+0x36>
    9284:	2001      	movs	r0, #1
    9286:	4249      	negs	r1, r1
    9288:	4308      	orrs	r0, r1
    928a:	e7d8      	b.n	923e <__lesf2+0x36>

0000928c <__errno>:
    928c:	4b01      	ldr	r3, [pc, #4]	; (9294 <__errno+0x8>)
    928e:	6818      	ldr	r0, [r3, #0]
    9290:	4770      	bx	lr
    9292:	46c0      	nop			; (mov r8, r8)
    9294:	200000bc 	.word	0x200000bc

00009298 <__libc_init_array>:
    9298:	b570      	push	{r4, r5, r6, lr}
    929a:	2600      	movs	r6, #0
    929c:	4d0c      	ldr	r5, [pc, #48]	; (92d0 <__libc_init_array+0x38>)
    929e:	4c0d      	ldr	r4, [pc, #52]	; (92d4 <__libc_init_array+0x3c>)
    92a0:	1b64      	subs	r4, r4, r5
    92a2:	10a4      	asrs	r4, r4, #2
    92a4:	42a6      	cmp	r6, r4
    92a6:	d109      	bne.n	92bc <__libc_init_array+0x24>
    92a8:	2600      	movs	r6, #0
    92aa:	f000 fdab 	bl	9e04 <_init>
    92ae:	4d0a      	ldr	r5, [pc, #40]	; (92d8 <__libc_init_array+0x40>)
    92b0:	4c0a      	ldr	r4, [pc, #40]	; (92dc <__libc_init_array+0x44>)
    92b2:	1b64      	subs	r4, r4, r5
    92b4:	10a4      	asrs	r4, r4, #2
    92b6:	42a6      	cmp	r6, r4
    92b8:	d105      	bne.n	92c6 <__libc_init_array+0x2e>
    92ba:	bd70      	pop	{r4, r5, r6, pc}
    92bc:	00b3      	lsls	r3, r6, #2
    92be:	58eb      	ldr	r3, [r5, r3]
    92c0:	4798      	blx	r3
    92c2:	3601      	adds	r6, #1
    92c4:	e7ee      	b.n	92a4 <__libc_init_array+0xc>
    92c6:	00b3      	lsls	r3, r6, #2
    92c8:	58eb      	ldr	r3, [r5, r3]
    92ca:	4798      	blx	r3
    92cc:	3601      	adds	r6, #1
    92ce:	e7f2      	b.n	92b6 <__libc_init_array+0x1e>
    92d0:	00009e10 	.word	0x00009e10
    92d4:	00009e10 	.word	0x00009e10
    92d8:	00009e10 	.word	0x00009e10
    92dc:	00009e14 	.word	0x00009e14

000092e0 <memcpy>:
    92e0:	2300      	movs	r3, #0
    92e2:	b510      	push	{r4, lr}
    92e4:	429a      	cmp	r2, r3
    92e6:	d100      	bne.n	92ea <memcpy+0xa>
    92e8:	bd10      	pop	{r4, pc}
    92ea:	5ccc      	ldrb	r4, [r1, r3]
    92ec:	54c4      	strb	r4, [r0, r3]
    92ee:	3301      	adds	r3, #1
    92f0:	e7f8      	b.n	92e4 <memcpy+0x4>

000092f2 <memset>:
    92f2:	0003      	movs	r3, r0
    92f4:	1882      	adds	r2, r0, r2
    92f6:	4293      	cmp	r3, r2
    92f8:	d100      	bne.n	92fc <memset+0xa>
    92fa:	4770      	bx	lr
    92fc:	7019      	strb	r1, [r3, #0]
    92fe:	3301      	adds	r3, #1
    9300:	e7f9      	b.n	92f6 <memset+0x4>
	...

00009304 <siprintf>:
    9304:	b40e      	push	{r1, r2, r3}
    9306:	b510      	push	{r4, lr}
    9308:	b09d      	sub	sp, #116	; 0x74
    930a:	a902      	add	r1, sp, #8
    930c:	9002      	str	r0, [sp, #8]
    930e:	6108      	str	r0, [r1, #16]
    9310:	480b      	ldr	r0, [pc, #44]	; (9340 <siprintf+0x3c>)
    9312:	2482      	movs	r4, #130	; 0x82
    9314:	6088      	str	r0, [r1, #8]
    9316:	6148      	str	r0, [r1, #20]
    9318:	2001      	movs	r0, #1
    931a:	4240      	negs	r0, r0
    931c:	ab1f      	add	r3, sp, #124	; 0x7c
    931e:	81c8      	strh	r0, [r1, #14]
    9320:	4808      	ldr	r0, [pc, #32]	; (9344 <siprintf+0x40>)
    9322:	cb04      	ldmia	r3!, {r2}
    9324:	00a4      	lsls	r4, r4, #2
    9326:	6800      	ldr	r0, [r0, #0]
    9328:	9301      	str	r3, [sp, #4]
    932a:	818c      	strh	r4, [r1, #12]
    932c:	f000 f8cc 	bl	94c8 <_svfiprintf_r>
    9330:	2300      	movs	r3, #0
    9332:	9a02      	ldr	r2, [sp, #8]
    9334:	7013      	strb	r3, [r2, #0]
    9336:	b01d      	add	sp, #116	; 0x74
    9338:	bc10      	pop	{r4}
    933a:	bc08      	pop	{r3}
    933c:	b003      	add	sp, #12
    933e:	4718      	bx	r3
    9340:	7fffffff 	.word	0x7fffffff
    9344:	200000bc 	.word	0x200000bc

00009348 <_malloc_r>:
    9348:	2303      	movs	r3, #3
    934a:	b570      	push	{r4, r5, r6, lr}
    934c:	1ccd      	adds	r5, r1, #3
    934e:	439d      	bics	r5, r3
    9350:	3508      	adds	r5, #8
    9352:	0006      	movs	r6, r0
    9354:	2d0c      	cmp	r5, #12
    9356:	d21e      	bcs.n	9396 <_malloc_r+0x4e>
    9358:	250c      	movs	r5, #12
    935a:	42a9      	cmp	r1, r5
    935c:	d81d      	bhi.n	939a <_malloc_r+0x52>
    935e:	0030      	movs	r0, r6
    9360:	f000 fb6d 	bl	9a3e <__malloc_lock>
    9364:	4a25      	ldr	r2, [pc, #148]	; (93fc <_malloc_r+0xb4>)
    9366:	6814      	ldr	r4, [r2, #0]
    9368:	0021      	movs	r1, r4
    936a:	2900      	cmp	r1, #0
    936c:	d119      	bne.n	93a2 <_malloc_r+0x5a>
    936e:	4c24      	ldr	r4, [pc, #144]	; (9400 <_malloc_r+0xb8>)
    9370:	6823      	ldr	r3, [r4, #0]
    9372:	2b00      	cmp	r3, #0
    9374:	d103      	bne.n	937e <_malloc_r+0x36>
    9376:	0030      	movs	r0, r6
    9378:	f000 fb32 	bl	99e0 <_sbrk_r>
    937c:	6020      	str	r0, [r4, #0]
    937e:	0029      	movs	r1, r5
    9380:	0030      	movs	r0, r6
    9382:	f000 fb2d 	bl	99e0 <_sbrk_r>
    9386:	1c43      	adds	r3, r0, #1
    9388:	d12c      	bne.n	93e4 <_malloc_r+0x9c>
    938a:	230c      	movs	r3, #12
    938c:	0030      	movs	r0, r6
    938e:	6033      	str	r3, [r6, #0]
    9390:	f000 fb56 	bl	9a40 <__malloc_unlock>
    9394:	e003      	b.n	939e <_malloc_r+0x56>
    9396:	2d00      	cmp	r5, #0
    9398:	dadf      	bge.n	935a <_malloc_r+0x12>
    939a:	230c      	movs	r3, #12
    939c:	6033      	str	r3, [r6, #0]
    939e:	2000      	movs	r0, #0
    93a0:	bd70      	pop	{r4, r5, r6, pc}
    93a2:	680b      	ldr	r3, [r1, #0]
    93a4:	1b5b      	subs	r3, r3, r5
    93a6:	d41a      	bmi.n	93de <_malloc_r+0x96>
    93a8:	2b0b      	cmp	r3, #11
    93aa:	d903      	bls.n	93b4 <_malloc_r+0x6c>
    93ac:	600b      	str	r3, [r1, #0]
    93ae:	18cc      	adds	r4, r1, r3
    93b0:	6025      	str	r5, [r4, #0]
    93b2:	e003      	b.n	93bc <_malloc_r+0x74>
    93b4:	428c      	cmp	r4, r1
    93b6:	d10e      	bne.n	93d6 <_malloc_r+0x8e>
    93b8:	6863      	ldr	r3, [r4, #4]
    93ba:	6013      	str	r3, [r2, #0]
    93bc:	0030      	movs	r0, r6
    93be:	f000 fb3f 	bl	9a40 <__malloc_unlock>
    93c2:	0020      	movs	r0, r4
    93c4:	2207      	movs	r2, #7
    93c6:	300b      	adds	r0, #11
    93c8:	1d23      	adds	r3, r4, #4
    93ca:	4390      	bics	r0, r2
    93cc:	1ac3      	subs	r3, r0, r3
    93ce:	d0e7      	beq.n	93a0 <_malloc_r+0x58>
    93d0:	425a      	negs	r2, r3
    93d2:	50e2      	str	r2, [r4, r3]
    93d4:	e7e4      	b.n	93a0 <_malloc_r+0x58>
    93d6:	684b      	ldr	r3, [r1, #4]
    93d8:	6063      	str	r3, [r4, #4]
    93da:	000c      	movs	r4, r1
    93dc:	e7ee      	b.n	93bc <_malloc_r+0x74>
    93de:	000c      	movs	r4, r1
    93e0:	6849      	ldr	r1, [r1, #4]
    93e2:	e7c2      	b.n	936a <_malloc_r+0x22>
    93e4:	2303      	movs	r3, #3
    93e6:	1cc4      	adds	r4, r0, #3
    93e8:	439c      	bics	r4, r3
    93ea:	42a0      	cmp	r0, r4
    93ec:	d0e0      	beq.n	93b0 <_malloc_r+0x68>
    93ee:	1a21      	subs	r1, r4, r0
    93f0:	0030      	movs	r0, r6
    93f2:	f000 faf5 	bl	99e0 <_sbrk_r>
    93f6:	1c43      	adds	r3, r0, #1
    93f8:	d1da      	bne.n	93b0 <_malloc_r+0x68>
    93fa:	e7c6      	b.n	938a <_malloc_r+0x42>
    93fc:	20000504 	.word	0x20000504
    9400:	20000508 	.word	0x20000508

00009404 <__ssputs_r>:
    9404:	b5f0      	push	{r4, r5, r6, r7, lr}
    9406:	688e      	ldr	r6, [r1, #8]
    9408:	b085      	sub	sp, #20
    940a:	0007      	movs	r7, r0
    940c:	000c      	movs	r4, r1
    940e:	9203      	str	r2, [sp, #12]
    9410:	9301      	str	r3, [sp, #4]
    9412:	429e      	cmp	r6, r3
    9414:	d839      	bhi.n	948a <__ssputs_r+0x86>
    9416:	2390      	movs	r3, #144	; 0x90
    9418:	898a      	ldrh	r2, [r1, #12]
    941a:	00db      	lsls	r3, r3, #3
    941c:	421a      	tst	r2, r3
    941e:	d034      	beq.n	948a <__ssputs_r+0x86>
    9420:	2503      	movs	r5, #3
    9422:	6909      	ldr	r1, [r1, #16]
    9424:	6823      	ldr	r3, [r4, #0]
    9426:	1a5b      	subs	r3, r3, r1
    9428:	9302      	str	r3, [sp, #8]
    942a:	6963      	ldr	r3, [r4, #20]
    942c:	9802      	ldr	r0, [sp, #8]
    942e:	435d      	muls	r5, r3
    9430:	0feb      	lsrs	r3, r5, #31
    9432:	195d      	adds	r5, r3, r5
    9434:	9b01      	ldr	r3, [sp, #4]
    9436:	106d      	asrs	r5, r5, #1
    9438:	3301      	adds	r3, #1
    943a:	181b      	adds	r3, r3, r0
    943c:	42ab      	cmp	r3, r5
    943e:	d900      	bls.n	9442 <__ssputs_r+0x3e>
    9440:	001d      	movs	r5, r3
    9442:	0553      	lsls	r3, r2, #21
    9444:	d532      	bpl.n	94ac <__ssputs_r+0xa8>
    9446:	0029      	movs	r1, r5
    9448:	0038      	movs	r0, r7
    944a:	f7ff ff7d 	bl	9348 <_malloc_r>
    944e:	1e06      	subs	r6, r0, #0
    9450:	d109      	bne.n	9466 <__ssputs_r+0x62>
    9452:	230c      	movs	r3, #12
    9454:	603b      	str	r3, [r7, #0]
    9456:	2340      	movs	r3, #64	; 0x40
    9458:	2001      	movs	r0, #1
    945a:	89a2      	ldrh	r2, [r4, #12]
    945c:	4240      	negs	r0, r0
    945e:	4313      	orrs	r3, r2
    9460:	81a3      	strh	r3, [r4, #12]
    9462:	b005      	add	sp, #20
    9464:	bdf0      	pop	{r4, r5, r6, r7, pc}
    9466:	9a02      	ldr	r2, [sp, #8]
    9468:	6921      	ldr	r1, [r4, #16]
    946a:	f7ff ff39 	bl	92e0 <memcpy>
    946e:	89a3      	ldrh	r3, [r4, #12]
    9470:	4a14      	ldr	r2, [pc, #80]	; (94c4 <__ssputs_r+0xc0>)
    9472:	401a      	ands	r2, r3
    9474:	2380      	movs	r3, #128	; 0x80
    9476:	4313      	orrs	r3, r2
    9478:	81a3      	strh	r3, [r4, #12]
    947a:	9b02      	ldr	r3, [sp, #8]
    947c:	6126      	str	r6, [r4, #16]
    947e:	18f6      	adds	r6, r6, r3
    9480:	6026      	str	r6, [r4, #0]
    9482:	6165      	str	r5, [r4, #20]
    9484:	9e01      	ldr	r6, [sp, #4]
    9486:	1aed      	subs	r5, r5, r3
    9488:	60a5      	str	r5, [r4, #8]
    948a:	9b01      	ldr	r3, [sp, #4]
    948c:	42b3      	cmp	r3, r6
    948e:	d200      	bcs.n	9492 <__ssputs_r+0x8e>
    9490:	001e      	movs	r6, r3
    9492:	0032      	movs	r2, r6
    9494:	9903      	ldr	r1, [sp, #12]
    9496:	6820      	ldr	r0, [r4, #0]
    9498:	f000 fabf 	bl	9a1a <memmove>
    949c:	68a3      	ldr	r3, [r4, #8]
    949e:	2000      	movs	r0, #0
    94a0:	1b9b      	subs	r3, r3, r6
    94a2:	60a3      	str	r3, [r4, #8]
    94a4:	6823      	ldr	r3, [r4, #0]
    94a6:	199e      	adds	r6, r3, r6
    94a8:	6026      	str	r6, [r4, #0]
    94aa:	e7da      	b.n	9462 <__ssputs_r+0x5e>
    94ac:	002a      	movs	r2, r5
    94ae:	0038      	movs	r0, r7
    94b0:	f000 fb12 	bl	9ad8 <_realloc_r>
    94b4:	1e06      	subs	r6, r0, #0
    94b6:	d1e0      	bne.n	947a <__ssputs_r+0x76>
    94b8:	6921      	ldr	r1, [r4, #16]
    94ba:	0038      	movs	r0, r7
    94bc:	f000 fac2 	bl	9a44 <_free_r>
    94c0:	e7c7      	b.n	9452 <__ssputs_r+0x4e>
    94c2:	46c0      	nop			; (mov r8, r8)
    94c4:	fffffb7f 	.word	0xfffffb7f

000094c8 <_svfiprintf_r>:
    94c8:	b5f0      	push	{r4, r5, r6, r7, lr}
    94ca:	b09f      	sub	sp, #124	; 0x7c
    94cc:	9002      	str	r0, [sp, #8]
    94ce:	9305      	str	r3, [sp, #20]
    94d0:	898b      	ldrh	r3, [r1, #12]
    94d2:	000f      	movs	r7, r1
    94d4:	0016      	movs	r6, r2
    94d6:	061b      	lsls	r3, r3, #24
    94d8:	d511      	bpl.n	94fe <_svfiprintf_r+0x36>
    94da:	690b      	ldr	r3, [r1, #16]
    94dc:	2b00      	cmp	r3, #0
    94de:	d10e      	bne.n	94fe <_svfiprintf_r+0x36>
    94e0:	2140      	movs	r1, #64	; 0x40
    94e2:	f7ff ff31 	bl	9348 <_malloc_r>
    94e6:	6038      	str	r0, [r7, #0]
    94e8:	6138      	str	r0, [r7, #16]
    94ea:	2800      	cmp	r0, #0
    94ec:	d105      	bne.n	94fa <_svfiprintf_r+0x32>
    94ee:	230c      	movs	r3, #12
    94f0:	9a02      	ldr	r2, [sp, #8]
    94f2:	3801      	subs	r0, #1
    94f4:	6013      	str	r3, [r2, #0]
    94f6:	b01f      	add	sp, #124	; 0x7c
    94f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    94fa:	2340      	movs	r3, #64	; 0x40
    94fc:	617b      	str	r3, [r7, #20]
    94fe:	2300      	movs	r3, #0
    9500:	ad06      	add	r5, sp, #24
    9502:	616b      	str	r3, [r5, #20]
    9504:	3320      	adds	r3, #32
    9506:	766b      	strb	r3, [r5, #25]
    9508:	3310      	adds	r3, #16
    950a:	76ab      	strb	r3, [r5, #26]
    950c:	0034      	movs	r4, r6
    950e:	7823      	ldrb	r3, [r4, #0]
    9510:	2b00      	cmp	r3, #0
    9512:	d147      	bne.n	95a4 <_svfiprintf_r+0xdc>
    9514:	1ba3      	subs	r3, r4, r6
    9516:	9304      	str	r3, [sp, #16]
    9518:	d00d      	beq.n	9536 <_svfiprintf_r+0x6e>
    951a:	1ba3      	subs	r3, r4, r6
    951c:	0032      	movs	r2, r6
    951e:	0039      	movs	r1, r7
    9520:	9802      	ldr	r0, [sp, #8]
    9522:	f7ff ff6f 	bl	9404 <__ssputs_r>
    9526:	1c43      	adds	r3, r0, #1
    9528:	d100      	bne.n	952c <_svfiprintf_r+0x64>
    952a:	e0b5      	b.n	9698 <_svfiprintf_r+0x1d0>
    952c:	696a      	ldr	r2, [r5, #20]
    952e:	9b04      	ldr	r3, [sp, #16]
    9530:	4694      	mov	ip, r2
    9532:	4463      	add	r3, ip
    9534:	616b      	str	r3, [r5, #20]
    9536:	7823      	ldrb	r3, [r4, #0]
    9538:	2b00      	cmp	r3, #0
    953a:	d100      	bne.n	953e <_svfiprintf_r+0x76>
    953c:	e0ac      	b.n	9698 <_svfiprintf_r+0x1d0>
    953e:	2201      	movs	r2, #1
    9540:	2300      	movs	r3, #0
    9542:	4252      	negs	r2, r2
    9544:	606a      	str	r2, [r5, #4]
    9546:	a902      	add	r1, sp, #8
    9548:	3254      	adds	r2, #84	; 0x54
    954a:	1852      	adds	r2, r2, r1
    954c:	3401      	adds	r4, #1
    954e:	602b      	str	r3, [r5, #0]
    9550:	60eb      	str	r3, [r5, #12]
    9552:	60ab      	str	r3, [r5, #8]
    9554:	7013      	strb	r3, [r2, #0]
    9556:	65ab      	str	r3, [r5, #88]	; 0x58
    9558:	4e58      	ldr	r6, [pc, #352]	; (96bc <_svfiprintf_r+0x1f4>)
    955a:	2205      	movs	r2, #5
    955c:	7821      	ldrb	r1, [r4, #0]
    955e:	0030      	movs	r0, r6
    9560:	f000 fa50 	bl	9a04 <memchr>
    9564:	1c62      	adds	r2, r4, #1
    9566:	2800      	cmp	r0, #0
    9568:	d120      	bne.n	95ac <_svfiprintf_r+0xe4>
    956a:	6829      	ldr	r1, [r5, #0]
    956c:	06cb      	lsls	r3, r1, #27
    956e:	d504      	bpl.n	957a <_svfiprintf_r+0xb2>
    9570:	2353      	movs	r3, #83	; 0x53
    9572:	ae02      	add	r6, sp, #8
    9574:	3020      	adds	r0, #32
    9576:	199b      	adds	r3, r3, r6
    9578:	7018      	strb	r0, [r3, #0]
    957a:	070b      	lsls	r3, r1, #28
    957c:	d504      	bpl.n	9588 <_svfiprintf_r+0xc0>
    957e:	2353      	movs	r3, #83	; 0x53
    9580:	202b      	movs	r0, #43	; 0x2b
    9582:	ae02      	add	r6, sp, #8
    9584:	199b      	adds	r3, r3, r6
    9586:	7018      	strb	r0, [r3, #0]
    9588:	7823      	ldrb	r3, [r4, #0]
    958a:	2b2a      	cmp	r3, #42	; 0x2a
    958c:	d016      	beq.n	95bc <_svfiprintf_r+0xf4>
    958e:	2000      	movs	r0, #0
    9590:	210a      	movs	r1, #10
    9592:	9b09      	ldr	r3, [sp, #36]	; 0x24
    9594:	7822      	ldrb	r2, [r4, #0]
    9596:	3a30      	subs	r2, #48	; 0x30
    9598:	2a09      	cmp	r2, #9
    959a:	d955      	bls.n	9648 <_svfiprintf_r+0x180>
    959c:	2800      	cmp	r0, #0
    959e:	d015      	beq.n	95cc <_svfiprintf_r+0x104>
    95a0:	9309      	str	r3, [sp, #36]	; 0x24
    95a2:	e013      	b.n	95cc <_svfiprintf_r+0x104>
    95a4:	2b25      	cmp	r3, #37	; 0x25
    95a6:	d0b5      	beq.n	9514 <_svfiprintf_r+0x4c>
    95a8:	3401      	adds	r4, #1
    95aa:	e7b0      	b.n	950e <_svfiprintf_r+0x46>
    95ac:	2301      	movs	r3, #1
    95ae:	1b80      	subs	r0, r0, r6
    95b0:	4083      	lsls	r3, r0
    95b2:	6829      	ldr	r1, [r5, #0]
    95b4:	0014      	movs	r4, r2
    95b6:	430b      	orrs	r3, r1
    95b8:	602b      	str	r3, [r5, #0]
    95ba:	e7cd      	b.n	9558 <_svfiprintf_r+0x90>
    95bc:	9b05      	ldr	r3, [sp, #20]
    95be:	1d18      	adds	r0, r3, #4
    95c0:	681b      	ldr	r3, [r3, #0]
    95c2:	9005      	str	r0, [sp, #20]
    95c4:	2b00      	cmp	r3, #0
    95c6:	db39      	blt.n	963c <_svfiprintf_r+0x174>
    95c8:	9309      	str	r3, [sp, #36]	; 0x24
    95ca:	0014      	movs	r4, r2
    95cc:	7823      	ldrb	r3, [r4, #0]
    95ce:	2b2e      	cmp	r3, #46	; 0x2e
    95d0:	d10b      	bne.n	95ea <_svfiprintf_r+0x122>
    95d2:	7863      	ldrb	r3, [r4, #1]
    95d4:	1c62      	adds	r2, r4, #1
    95d6:	2b2a      	cmp	r3, #42	; 0x2a
    95d8:	d13e      	bne.n	9658 <_svfiprintf_r+0x190>
    95da:	9b05      	ldr	r3, [sp, #20]
    95dc:	3402      	adds	r4, #2
    95de:	1d1a      	adds	r2, r3, #4
    95e0:	681b      	ldr	r3, [r3, #0]
    95e2:	9205      	str	r2, [sp, #20]
    95e4:	2b00      	cmp	r3, #0
    95e6:	db34      	blt.n	9652 <_svfiprintf_r+0x18a>
    95e8:	9307      	str	r3, [sp, #28]
    95ea:	4e35      	ldr	r6, [pc, #212]	; (96c0 <_svfiprintf_r+0x1f8>)
    95ec:	7821      	ldrb	r1, [r4, #0]
    95ee:	2203      	movs	r2, #3
    95f0:	0030      	movs	r0, r6
    95f2:	f000 fa07 	bl	9a04 <memchr>
    95f6:	2800      	cmp	r0, #0
    95f8:	d006      	beq.n	9608 <_svfiprintf_r+0x140>
    95fa:	2340      	movs	r3, #64	; 0x40
    95fc:	1b80      	subs	r0, r0, r6
    95fe:	4083      	lsls	r3, r0
    9600:	682a      	ldr	r2, [r5, #0]
    9602:	3401      	adds	r4, #1
    9604:	4313      	orrs	r3, r2
    9606:	602b      	str	r3, [r5, #0]
    9608:	7821      	ldrb	r1, [r4, #0]
    960a:	2206      	movs	r2, #6
    960c:	482d      	ldr	r0, [pc, #180]	; (96c4 <_svfiprintf_r+0x1fc>)
    960e:	1c66      	adds	r6, r4, #1
    9610:	7629      	strb	r1, [r5, #24]
    9612:	f000 f9f7 	bl	9a04 <memchr>
    9616:	2800      	cmp	r0, #0
    9618:	d046      	beq.n	96a8 <_svfiprintf_r+0x1e0>
    961a:	4b2b      	ldr	r3, [pc, #172]	; (96c8 <_svfiprintf_r+0x200>)
    961c:	2b00      	cmp	r3, #0
    961e:	d12f      	bne.n	9680 <_svfiprintf_r+0x1b8>
    9620:	6829      	ldr	r1, [r5, #0]
    9622:	9b05      	ldr	r3, [sp, #20]
    9624:	2207      	movs	r2, #7
    9626:	05c9      	lsls	r1, r1, #23
    9628:	d528      	bpl.n	967c <_svfiprintf_r+0x1b4>
    962a:	189b      	adds	r3, r3, r2
    962c:	4393      	bics	r3, r2
    962e:	3308      	adds	r3, #8
    9630:	9305      	str	r3, [sp, #20]
    9632:	696b      	ldr	r3, [r5, #20]
    9634:	9a03      	ldr	r2, [sp, #12]
    9636:	189b      	adds	r3, r3, r2
    9638:	616b      	str	r3, [r5, #20]
    963a:	e767      	b.n	950c <_svfiprintf_r+0x44>
    963c:	425b      	negs	r3, r3
    963e:	60eb      	str	r3, [r5, #12]
    9640:	2302      	movs	r3, #2
    9642:	430b      	orrs	r3, r1
    9644:	602b      	str	r3, [r5, #0]
    9646:	e7c0      	b.n	95ca <_svfiprintf_r+0x102>
    9648:	434b      	muls	r3, r1
    964a:	3401      	adds	r4, #1
    964c:	189b      	adds	r3, r3, r2
    964e:	2001      	movs	r0, #1
    9650:	e7a0      	b.n	9594 <_svfiprintf_r+0xcc>
    9652:	2301      	movs	r3, #1
    9654:	425b      	negs	r3, r3
    9656:	e7c7      	b.n	95e8 <_svfiprintf_r+0x120>
    9658:	2300      	movs	r3, #0
    965a:	0014      	movs	r4, r2
    965c:	200a      	movs	r0, #10
    965e:	001a      	movs	r2, r3
    9660:	606b      	str	r3, [r5, #4]
    9662:	7821      	ldrb	r1, [r4, #0]
    9664:	3930      	subs	r1, #48	; 0x30
    9666:	2909      	cmp	r1, #9
    9668:	d903      	bls.n	9672 <_svfiprintf_r+0x1aa>
    966a:	2b00      	cmp	r3, #0
    966c:	d0bd      	beq.n	95ea <_svfiprintf_r+0x122>
    966e:	9207      	str	r2, [sp, #28]
    9670:	e7bb      	b.n	95ea <_svfiprintf_r+0x122>
    9672:	4342      	muls	r2, r0
    9674:	3401      	adds	r4, #1
    9676:	1852      	adds	r2, r2, r1
    9678:	2301      	movs	r3, #1
    967a:	e7f2      	b.n	9662 <_svfiprintf_r+0x19a>
    967c:	3307      	adds	r3, #7
    967e:	e7d5      	b.n	962c <_svfiprintf_r+0x164>
    9680:	ab05      	add	r3, sp, #20
    9682:	9300      	str	r3, [sp, #0]
    9684:	003a      	movs	r2, r7
    9686:	4b11      	ldr	r3, [pc, #68]	; (96cc <_svfiprintf_r+0x204>)
    9688:	0029      	movs	r1, r5
    968a:	9802      	ldr	r0, [sp, #8]
    968c:	e000      	b.n	9690 <_svfiprintf_r+0x1c8>
    968e:	bf00      	nop
    9690:	9003      	str	r0, [sp, #12]
    9692:	9b03      	ldr	r3, [sp, #12]
    9694:	3301      	adds	r3, #1
    9696:	d1cc      	bne.n	9632 <_svfiprintf_r+0x16a>
    9698:	89bb      	ldrh	r3, [r7, #12]
    969a:	980b      	ldr	r0, [sp, #44]	; 0x2c
    969c:	065b      	lsls	r3, r3, #25
    969e:	d400      	bmi.n	96a2 <_svfiprintf_r+0x1da>
    96a0:	e729      	b.n	94f6 <_svfiprintf_r+0x2e>
    96a2:	2001      	movs	r0, #1
    96a4:	4240      	negs	r0, r0
    96a6:	e726      	b.n	94f6 <_svfiprintf_r+0x2e>
    96a8:	ab05      	add	r3, sp, #20
    96aa:	9300      	str	r3, [sp, #0]
    96ac:	003a      	movs	r2, r7
    96ae:	4b07      	ldr	r3, [pc, #28]	; (96cc <_svfiprintf_r+0x204>)
    96b0:	0029      	movs	r1, r5
    96b2:	9802      	ldr	r0, [sp, #8]
    96b4:	f000 f87a 	bl	97ac <_printf_i>
    96b8:	e7ea      	b.n	9690 <_svfiprintf_r+0x1c8>
    96ba:	46c0      	nop			; (mov r8, r8)
    96bc:	00009dd0 	.word	0x00009dd0
    96c0:	00009dd6 	.word	0x00009dd6
    96c4:	00009dda 	.word	0x00009dda
    96c8:	00000000 	.word	0x00000000
    96cc:	00009405 	.word	0x00009405

000096d0 <_printf_common>:
    96d0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    96d2:	0015      	movs	r5, r2
    96d4:	9301      	str	r3, [sp, #4]
    96d6:	688a      	ldr	r2, [r1, #8]
    96d8:	690b      	ldr	r3, [r1, #16]
    96da:	9000      	str	r0, [sp, #0]
    96dc:	000c      	movs	r4, r1
    96de:	4293      	cmp	r3, r2
    96e0:	da00      	bge.n	96e4 <_printf_common+0x14>
    96e2:	0013      	movs	r3, r2
    96e4:	0022      	movs	r2, r4
    96e6:	602b      	str	r3, [r5, #0]
    96e8:	3243      	adds	r2, #67	; 0x43
    96ea:	7812      	ldrb	r2, [r2, #0]
    96ec:	2a00      	cmp	r2, #0
    96ee:	d001      	beq.n	96f4 <_printf_common+0x24>
    96f0:	3301      	adds	r3, #1
    96f2:	602b      	str	r3, [r5, #0]
    96f4:	6823      	ldr	r3, [r4, #0]
    96f6:	069b      	lsls	r3, r3, #26
    96f8:	d502      	bpl.n	9700 <_printf_common+0x30>
    96fa:	682b      	ldr	r3, [r5, #0]
    96fc:	3302      	adds	r3, #2
    96fe:	602b      	str	r3, [r5, #0]
    9700:	2706      	movs	r7, #6
    9702:	6823      	ldr	r3, [r4, #0]
    9704:	401f      	ands	r7, r3
    9706:	d027      	beq.n	9758 <_printf_common+0x88>
    9708:	0023      	movs	r3, r4
    970a:	3343      	adds	r3, #67	; 0x43
    970c:	781b      	ldrb	r3, [r3, #0]
    970e:	1e5a      	subs	r2, r3, #1
    9710:	4193      	sbcs	r3, r2
    9712:	6822      	ldr	r2, [r4, #0]
    9714:	0692      	lsls	r2, r2, #26
    9716:	d430      	bmi.n	977a <_printf_common+0xaa>
    9718:	0022      	movs	r2, r4
    971a:	9901      	ldr	r1, [sp, #4]
    971c:	3243      	adds	r2, #67	; 0x43
    971e:	9800      	ldr	r0, [sp, #0]
    9720:	9e08      	ldr	r6, [sp, #32]
    9722:	47b0      	blx	r6
    9724:	1c43      	adds	r3, r0, #1
    9726:	d025      	beq.n	9774 <_printf_common+0xa4>
    9728:	2306      	movs	r3, #6
    972a:	6820      	ldr	r0, [r4, #0]
    972c:	682a      	ldr	r2, [r5, #0]
    972e:	68e1      	ldr	r1, [r4, #12]
    9730:	4003      	ands	r3, r0
    9732:	2500      	movs	r5, #0
    9734:	2b04      	cmp	r3, #4
    9736:	d103      	bne.n	9740 <_printf_common+0x70>
    9738:	1a8d      	subs	r5, r1, r2
    973a:	43eb      	mvns	r3, r5
    973c:	17db      	asrs	r3, r3, #31
    973e:	401d      	ands	r5, r3
    9740:	68a3      	ldr	r3, [r4, #8]
    9742:	6922      	ldr	r2, [r4, #16]
    9744:	4293      	cmp	r3, r2
    9746:	dd01      	ble.n	974c <_printf_common+0x7c>
    9748:	1a9b      	subs	r3, r3, r2
    974a:	18ed      	adds	r5, r5, r3
    974c:	2700      	movs	r7, #0
    974e:	42bd      	cmp	r5, r7
    9750:	d120      	bne.n	9794 <_printf_common+0xc4>
    9752:	2000      	movs	r0, #0
    9754:	e010      	b.n	9778 <_printf_common+0xa8>
    9756:	3701      	adds	r7, #1
    9758:	68e3      	ldr	r3, [r4, #12]
    975a:	682a      	ldr	r2, [r5, #0]
    975c:	1a9b      	subs	r3, r3, r2
    975e:	429f      	cmp	r7, r3
    9760:	dad2      	bge.n	9708 <_printf_common+0x38>
    9762:	0022      	movs	r2, r4
    9764:	2301      	movs	r3, #1
    9766:	3219      	adds	r2, #25
    9768:	9901      	ldr	r1, [sp, #4]
    976a:	9800      	ldr	r0, [sp, #0]
    976c:	9e08      	ldr	r6, [sp, #32]
    976e:	47b0      	blx	r6
    9770:	1c43      	adds	r3, r0, #1
    9772:	d1f0      	bne.n	9756 <_printf_common+0x86>
    9774:	2001      	movs	r0, #1
    9776:	4240      	negs	r0, r0
    9778:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    977a:	2030      	movs	r0, #48	; 0x30
    977c:	18e1      	adds	r1, r4, r3
    977e:	3143      	adds	r1, #67	; 0x43
    9780:	7008      	strb	r0, [r1, #0]
    9782:	0021      	movs	r1, r4
    9784:	1c5a      	adds	r2, r3, #1
    9786:	3145      	adds	r1, #69	; 0x45
    9788:	7809      	ldrb	r1, [r1, #0]
    978a:	18a2      	adds	r2, r4, r2
    978c:	3243      	adds	r2, #67	; 0x43
    978e:	3302      	adds	r3, #2
    9790:	7011      	strb	r1, [r2, #0]
    9792:	e7c1      	b.n	9718 <_printf_common+0x48>
    9794:	0022      	movs	r2, r4
    9796:	2301      	movs	r3, #1
    9798:	321a      	adds	r2, #26
    979a:	9901      	ldr	r1, [sp, #4]
    979c:	9800      	ldr	r0, [sp, #0]
    979e:	9e08      	ldr	r6, [sp, #32]
    97a0:	47b0      	blx	r6
    97a2:	1c43      	adds	r3, r0, #1
    97a4:	d0e6      	beq.n	9774 <_printf_common+0xa4>
    97a6:	3701      	adds	r7, #1
    97a8:	e7d1      	b.n	974e <_printf_common+0x7e>
	...

000097ac <_printf_i>:
    97ac:	b5f0      	push	{r4, r5, r6, r7, lr}
    97ae:	b08b      	sub	sp, #44	; 0x2c
    97b0:	9206      	str	r2, [sp, #24]
    97b2:	000a      	movs	r2, r1
    97b4:	3243      	adds	r2, #67	; 0x43
    97b6:	9307      	str	r3, [sp, #28]
    97b8:	9005      	str	r0, [sp, #20]
    97ba:	9204      	str	r2, [sp, #16]
    97bc:	7e0a      	ldrb	r2, [r1, #24]
    97be:	000c      	movs	r4, r1
    97c0:	9b10      	ldr	r3, [sp, #64]	; 0x40
    97c2:	2a6e      	cmp	r2, #110	; 0x6e
    97c4:	d100      	bne.n	97c8 <_printf_i+0x1c>
    97c6:	e08f      	b.n	98e8 <_printf_i+0x13c>
    97c8:	d817      	bhi.n	97fa <_printf_i+0x4e>
    97ca:	2a63      	cmp	r2, #99	; 0x63
    97cc:	d02c      	beq.n	9828 <_printf_i+0x7c>
    97ce:	d808      	bhi.n	97e2 <_printf_i+0x36>
    97d0:	2a00      	cmp	r2, #0
    97d2:	d100      	bne.n	97d6 <_printf_i+0x2a>
    97d4:	e099      	b.n	990a <_printf_i+0x15e>
    97d6:	2a58      	cmp	r2, #88	; 0x58
    97d8:	d054      	beq.n	9884 <_printf_i+0xd8>
    97da:	0026      	movs	r6, r4
    97dc:	3642      	adds	r6, #66	; 0x42
    97de:	7032      	strb	r2, [r6, #0]
    97e0:	e029      	b.n	9836 <_printf_i+0x8a>
    97e2:	2a64      	cmp	r2, #100	; 0x64
    97e4:	d001      	beq.n	97ea <_printf_i+0x3e>
    97e6:	2a69      	cmp	r2, #105	; 0x69
    97e8:	d1f7      	bne.n	97da <_printf_i+0x2e>
    97ea:	6821      	ldr	r1, [r4, #0]
    97ec:	681a      	ldr	r2, [r3, #0]
    97ee:	0608      	lsls	r0, r1, #24
    97f0:	d523      	bpl.n	983a <_printf_i+0x8e>
    97f2:	1d11      	adds	r1, r2, #4
    97f4:	6019      	str	r1, [r3, #0]
    97f6:	6815      	ldr	r5, [r2, #0]
    97f8:	e025      	b.n	9846 <_printf_i+0x9a>
    97fa:	2a73      	cmp	r2, #115	; 0x73
    97fc:	d100      	bne.n	9800 <_printf_i+0x54>
    97fe:	e088      	b.n	9912 <_printf_i+0x166>
    9800:	d808      	bhi.n	9814 <_printf_i+0x68>
    9802:	2a6f      	cmp	r2, #111	; 0x6f
    9804:	d029      	beq.n	985a <_printf_i+0xae>
    9806:	2a70      	cmp	r2, #112	; 0x70
    9808:	d1e7      	bne.n	97da <_printf_i+0x2e>
    980a:	2220      	movs	r2, #32
    980c:	6809      	ldr	r1, [r1, #0]
    980e:	430a      	orrs	r2, r1
    9810:	6022      	str	r2, [r4, #0]
    9812:	e003      	b.n	981c <_printf_i+0x70>
    9814:	2a75      	cmp	r2, #117	; 0x75
    9816:	d020      	beq.n	985a <_printf_i+0xae>
    9818:	2a78      	cmp	r2, #120	; 0x78
    981a:	d1de      	bne.n	97da <_printf_i+0x2e>
    981c:	0022      	movs	r2, r4
    981e:	2178      	movs	r1, #120	; 0x78
    9820:	3245      	adds	r2, #69	; 0x45
    9822:	7011      	strb	r1, [r2, #0]
    9824:	4a6c      	ldr	r2, [pc, #432]	; (99d8 <_printf_i+0x22c>)
    9826:	e030      	b.n	988a <_printf_i+0xde>
    9828:	000e      	movs	r6, r1
    982a:	681a      	ldr	r2, [r3, #0]
    982c:	3642      	adds	r6, #66	; 0x42
    982e:	1d11      	adds	r1, r2, #4
    9830:	6019      	str	r1, [r3, #0]
    9832:	6813      	ldr	r3, [r2, #0]
    9834:	7033      	strb	r3, [r6, #0]
    9836:	2301      	movs	r3, #1
    9838:	e079      	b.n	992e <_printf_i+0x182>
    983a:	0649      	lsls	r1, r1, #25
    983c:	d5d9      	bpl.n	97f2 <_printf_i+0x46>
    983e:	1d11      	adds	r1, r2, #4
    9840:	6019      	str	r1, [r3, #0]
    9842:	2300      	movs	r3, #0
    9844:	5ed5      	ldrsh	r5, [r2, r3]
    9846:	2d00      	cmp	r5, #0
    9848:	da03      	bge.n	9852 <_printf_i+0xa6>
    984a:	232d      	movs	r3, #45	; 0x2d
    984c:	9a04      	ldr	r2, [sp, #16]
    984e:	426d      	negs	r5, r5
    9850:	7013      	strb	r3, [r2, #0]
    9852:	4b62      	ldr	r3, [pc, #392]	; (99dc <_printf_i+0x230>)
    9854:	270a      	movs	r7, #10
    9856:	9303      	str	r3, [sp, #12]
    9858:	e02f      	b.n	98ba <_printf_i+0x10e>
    985a:	6820      	ldr	r0, [r4, #0]
    985c:	6819      	ldr	r1, [r3, #0]
    985e:	0605      	lsls	r5, r0, #24
    9860:	d503      	bpl.n	986a <_printf_i+0xbe>
    9862:	1d08      	adds	r0, r1, #4
    9864:	6018      	str	r0, [r3, #0]
    9866:	680d      	ldr	r5, [r1, #0]
    9868:	e005      	b.n	9876 <_printf_i+0xca>
    986a:	0640      	lsls	r0, r0, #25
    986c:	d5f9      	bpl.n	9862 <_printf_i+0xb6>
    986e:	680d      	ldr	r5, [r1, #0]
    9870:	1d08      	adds	r0, r1, #4
    9872:	6018      	str	r0, [r3, #0]
    9874:	b2ad      	uxth	r5, r5
    9876:	4b59      	ldr	r3, [pc, #356]	; (99dc <_printf_i+0x230>)
    9878:	2708      	movs	r7, #8
    987a:	9303      	str	r3, [sp, #12]
    987c:	2a6f      	cmp	r2, #111	; 0x6f
    987e:	d018      	beq.n	98b2 <_printf_i+0x106>
    9880:	270a      	movs	r7, #10
    9882:	e016      	b.n	98b2 <_printf_i+0x106>
    9884:	3145      	adds	r1, #69	; 0x45
    9886:	700a      	strb	r2, [r1, #0]
    9888:	4a54      	ldr	r2, [pc, #336]	; (99dc <_printf_i+0x230>)
    988a:	9203      	str	r2, [sp, #12]
    988c:	681a      	ldr	r2, [r3, #0]
    988e:	6821      	ldr	r1, [r4, #0]
    9890:	1d10      	adds	r0, r2, #4
    9892:	6018      	str	r0, [r3, #0]
    9894:	6815      	ldr	r5, [r2, #0]
    9896:	0608      	lsls	r0, r1, #24
    9898:	d522      	bpl.n	98e0 <_printf_i+0x134>
    989a:	07cb      	lsls	r3, r1, #31
    989c:	d502      	bpl.n	98a4 <_printf_i+0xf8>
    989e:	2320      	movs	r3, #32
    98a0:	4319      	orrs	r1, r3
    98a2:	6021      	str	r1, [r4, #0]
    98a4:	2710      	movs	r7, #16
    98a6:	2d00      	cmp	r5, #0
    98a8:	d103      	bne.n	98b2 <_printf_i+0x106>
    98aa:	2320      	movs	r3, #32
    98ac:	6822      	ldr	r2, [r4, #0]
    98ae:	439a      	bics	r2, r3
    98b0:	6022      	str	r2, [r4, #0]
    98b2:	0023      	movs	r3, r4
    98b4:	2200      	movs	r2, #0
    98b6:	3343      	adds	r3, #67	; 0x43
    98b8:	701a      	strb	r2, [r3, #0]
    98ba:	6863      	ldr	r3, [r4, #4]
    98bc:	60a3      	str	r3, [r4, #8]
    98be:	2b00      	cmp	r3, #0
    98c0:	db5c      	blt.n	997c <_printf_i+0x1d0>
    98c2:	2204      	movs	r2, #4
    98c4:	6821      	ldr	r1, [r4, #0]
    98c6:	4391      	bics	r1, r2
    98c8:	6021      	str	r1, [r4, #0]
    98ca:	2d00      	cmp	r5, #0
    98cc:	d158      	bne.n	9980 <_printf_i+0x1d4>
    98ce:	9e04      	ldr	r6, [sp, #16]
    98d0:	2b00      	cmp	r3, #0
    98d2:	d064      	beq.n	999e <_printf_i+0x1f2>
    98d4:	0026      	movs	r6, r4
    98d6:	9b03      	ldr	r3, [sp, #12]
    98d8:	3642      	adds	r6, #66	; 0x42
    98da:	781b      	ldrb	r3, [r3, #0]
    98dc:	7033      	strb	r3, [r6, #0]
    98de:	e05e      	b.n	999e <_printf_i+0x1f2>
    98e0:	0648      	lsls	r0, r1, #25
    98e2:	d5da      	bpl.n	989a <_printf_i+0xee>
    98e4:	b2ad      	uxth	r5, r5
    98e6:	e7d8      	b.n	989a <_printf_i+0xee>
    98e8:	6809      	ldr	r1, [r1, #0]
    98ea:	681a      	ldr	r2, [r3, #0]
    98ec:	0608      	lsls	r0, r1, #24
    98ee:	d505      	bpl.n	98fc <_printf_i+0x150>
    98f0:	1d11      	adds	r1, r2, #4
    98f2:	6019      	str	r1, [r3, #0]
    98f4:	6813      	ldr	r3, [r2, #0]
    98f6:	6962      	ldr	r2, [r4, #20]
    98f8:	601a      	str	r2, [r3, #0]
    98fa:	e006      	b.n	990a <_printf_i+0x15e>
    98fc:	0649      	lsls	r1, r1, #25
    98fe:	d5f7      	bpl.n	98f0 <_printf_i+0x144>
    9900:	1d11      	adds	r1, r2, #4
    9902:	6019      	str	r1, [r3, #0]
    9904:	6813      	ldr	r3, [r2, #0]
    9906:	8aa2      	ldrh	r2, [r4, #20]
    9908:	801a      	strh	r2, [r3, #0]
    990a:	2300      	movs	r3, #0
    990c:	9e04      	ldr	r6, [sp, #16]
    990e:	6123      	str	r3, [r4, #16]
    9910:	e054      	b.n	99bc <_printf_i+0x210>
    9912:	681a      	ldr	r2, [r3, #0]
    9914:	1d11      	adds	r1, r2, #4
    9916:	6019      	str	r1, [r3, #0]
    9918:	6816      	ldr	r6, [r2, #0]
    991a:	2100      	movs	r1, #0
    991c:	6862      	ldr	r2, [r4, #4]
    991e:	0030      	movs	r0, r6
    9920:	f000 f870 	bl	9a04 <memchr>
    9924:	2800      	cmp	r0, #0
    9926:	d001      	beq.n	992c <_printf_i+0x180>
    9928:	1b80      	subs	r0, r0, r6
    992a:	6060      	str	r0, [r4, #4]
    992c:	6863      	ldr	r3, [r4, #4]
    992e:	6123      	str	r3, [r4, #16]
    9930:	2300      	movs	r3, #0
    9932:	9a04      	ldr	r2, [sp, #16]
    9934:	7013      	strb	r3, [r2, #0]
    9936:	e041      	b.n	99bc <_printf_i+0x210>
    9938:	6923      	ldr	r3, [r4, #16]
    993a:	0032      	movs	r2, r6
    993c:	9906      	ldr	r1, [sp, #24]
    993e:	9805      	ldr	r0, [sp, #20]
    9940:	9d07      	ldr	r5, [sp, #28]
    9942:	47a8      	blx	r5
    9944:	1c43      	adds	r3, r0, #1
    9946:	d043      	beq.n	99d0 <_printf_i+0x224>
    9948:	6823      	ldr	r3, [r4, #0]
    994a:	2500      	movs	r5, #0
    994c:	079b      	lsls	r3, r3, #30
    994e:	d40f      	bmi.n	9970 <_printf_i+0x1c4>
    9950:	9b09      	ldr	r3, [sp, #36]	; 0x24
    9952:	68e0      	ldr	r0, [r4, #12]
    9954:	4298      	cmp	r0, r3
    9956:	da3d      	bge.n	99d4 <_printf_i+0x228>
    9958:	0018      	movs	r0, r3
    995a:	e03b      	b.n	99d4 <_printf_i+0x228>
    995c:	0022      	movs	r2, r4
    995e:	2301      	movs	r3, #1
    9960:	3219      	adds	r2, #25
    9962:	9906      	ldr	r1, [sp, #24]
    9964:	9805      	ldr	r0, [sp, #20]
    9966:	9e07      	ldr	r6, [sp, #28]
    9968:	47b0      	blx	r6
    996a:	1c43      	adds	r3, r0, #1
    996c:	d030      	beq.n	99d0 <_printf_i+0x224>
    996e:	3501      	adds	r5, #1
    9970:	68e3      	ldr	r3, [r4, #12]
    9972:	9a09      	ldr	r2, [sp, #36]	; 0x24
    9974:	1a9b      	subs	r3, r3, r2
    9976:	429d      	cmp	r5, r3
    9978:	dbf0      	blt.n	995c <_printf_i+0x1b0>
    997a:	e7e9      	b.n	9950 <_printf_i+0x1a4>
    997c:	2d00      	cmp	r5, #0
    997e:	d0a9      	beq.n	98d4 <_printf_i+0x128>
    9980:	9e04      	ldr	r6, [sp, #16]
    9982:	0028      	movs	r0, r5
    9984:	0039      	movs	r1, r7
    9986:	f7fd fb6b 	bl	7060 <__aeabi_uidivmod>
    998a:	9b03      	ldr	r3, [sp, #12]
    998c:	3e01      	subs	r6, #1
    998e:	5c5b      	ldrb	r3, [r3, r1]
    9990:	0028      	movs	r0, r5
    9992:	7033      	strb	r3, [r6, #0]
    9994:	0039      	movs	r1, r7
    9996:	f7fd fadd 	bl	6f54 <__udivsi3>
    999a:	1e05      	subs	r5, r0, #0
    999c:	d1f1      	bne.n	9982 <_printf_i+0x1d6>
    999e:	2f08      	cmp	r7, #8
    99a0:	d109      	bne.n	99b6 <_printf_i+0x20a>
    99a2:	6823      	ldr	r3, [r4, #0]
    99a4:	07db      	lsls	r3, r3, #31
    99a6:	d506      	bpl.n	99b6 <_printf_i+0x20a>
    99a8:	6863      	ldr	r3, [r4, #4]
    99aa:	6922      	ldr	r2, [r4, #16]
    99ac:	4293      	cmp	r3, r2
    99ae:	dc02      	bgt.n	99b6 <_printf_i+0x20a>
    99b0:	2330      	movs	r3, #48	; 0x30
    99b2:	3e01      	subs	r6, #1
    99b4:	7033      	strb	r3, [r6, #0]
    99b6:	9b04      	ldr	r3, [sp, #16]
    99b8:	1b9b      	subs	r3, r3, r6
    99ba:	6123      	str	r3, [r4, #16]
    99bc:	9b07      	ldr	r3, [sp, #28]
    99be:	aa09      	add	r2, sp, #36	; 0x24
    99c0:	9300      	str	r3, [sp, #0]
    99c2:	0021      	movs	r1, r4
    99c4:	9b06      	ldr	r3, [sp, #24]
    99c6:	9805      	ldr	r0, [sp, #20]
    99c8:	f7ff fe82 	bl	96d0 <_printf_common>
    99cc:	1c43      	adds	r3, r0, #1
    99ce:	d1b3      	bne.n	9938 <_printf_i+0x18c>
    99d0:	2001      	movs	r0, #1
    99d2:	4240      	negs	r0, r0
    99d4:	b00b      	add	sp, #44	; 0x2c
    99d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    99d8:	00009df2 	.word	0x00009df2
    99dc:	00009de1 	.word	0x00009de1

000099e0 <_sbrk_r>:
    99e0:	2300      	movs	r3, #0
    99e2:	b570      	push	{r4, r5, r6, lr}
    99e4:	4c06      	ldr	r4, [pc, #24]	; (9a00 <_sbrk_r+0x20>)
    99e6:	0005      	movs	r5, r0
    99e8:	0008      	movs	r0, r1
    99ea:	6023      	str	r3, [r4, #0]
    99ec:	f7f9 fb1c 	bl	3028 <_sbrk>
    99f0:	1c43      	adds	r3, r0, #1
    99f2:	d103      	bne.n	99fc <_sbrk_r+0x1c>
    99f4:	6823      	ldr	r3, [r4, #0]
    99f6:	2b00      	cmp	r3, #0
    99f8:	d000      	beq.n	99fc <_sbrk_r+0x1c>
    99fa:	602b      	str	r3, [r5, #0]
    99fc:	bd70      	pop	{r4, r5, r6, pc}
    99fe:	46c0      	nop			; (mov r8, r8)
    9a00:	20000548 	.word	0x20000548

00009a04 <memchr>:
    9a04:	b2c9      	uxtb	r1, r1
    9a06:	1882      	adds	r2, r0, r2
    9a08:	4290      	cmp	r0, r2
    9a0a:	d101      	bne.n	9a10 <memchr+0xc>
    9a0c:	2000      	movs	r0, #0
    9a0e:	4770      	bx	lr
    9a10:	7803      	ldrb	r3, [r0, #0]
    9a12:	428b      	cmp	r3, r1
    9a14:	d0fb      	beq.n	9a0e <memchr+0xa>
    9a16:	3001      	adds	r0, #1
    9a18:	e7f6      	b.n	9a08 <memchr+0x4>

00009a1a <memmove>:
    9a1a:	b510      	push	{r4, lr}
    9a1c:	4288      	cmp	r0, r1
    9a1e:	d902      	bls.n	9a26 <memmove+0xc>
    9a20:	188b      	adds	r3, r1, r2
    9a22:	4298      	cmp	r0, r3
    9a24:	d308      	bcc.n	9a38 <memmove+0x1e>
    9a26:	2300      	movs	r3, #0
    9a28:	429a      	cmp	r2, r3
    9a2a:	d007      	beq.n	9a3c <memmove+0x22>
    9a2c:	5ccc      	ldrb	r4, [r1, r3]
    9a2e:	54c4      	strb	r4, [r0, r3]
    9a30:	3301      	adds	r3, #1
    9a32:	e7f9      	b.n	9a28 <memmove+0xe>
    9a34:	5c8b      	ldrb	r3, [r1, r2]
    9a36:	5483      	strb	r3, [r0, r2]
    9a38:	3a01      	subs	r2, #1
    9a3a:	d2fb      	bcs.n	9a34 <memmove+0x1a>
    9a3c:	bd10      	pop	{r4, pc}

00009a3e <__malloc_lock>:
    9a3e:	4770      	bx	lr

00009a40 <__malloc_unlock>:
    9a40:	4770      	bx	lr
	...

00009a44 <_free_r>:
    9a44:	b570      	push	{r4, r5, r6, lr}
    9a46:	0005      	movs	r5, r0
    9a48:	2900      	cmp	r1, #0
    9a4a:	d010      	beq.n	9a6e <_free_r+0x2a>
    9a4c:	1f0c      	subs	r4, r1, #4
    9a4e:	6823      	ldr	r3, [r4, #0]
    9a50:	2b00      	cmp	r3, #0
    9a52:	da00      	bge.n	9a56 <_free_r+0x12>
    9a54:	18e4      	adds	r4, r4, r3
    9a56:	0028      	movs	r0, r5
    9a58:	f7ff fff1 	bl	9a3e <__malloc_lock>
    9a5c:	4a1d      	ldr	r2, [pc, #116]	; (9ad4 <_free_r+0x90>)
    9a5e:	6813      	ldr	r3, [r2, #0]
    9a60:	2b00      	cmp	r3, #0
    9a62:	d105      	bne.n	9a70 <_free_r+0x2c>
    9a64:	6063      	str	r3, [r4, #4]
    9a66:	6014      	str	r4, [r2, #0]
    9a68:	0028      	movs	r0, r5
    9a6a:	f7ff ffe9 	bl	9a40 <__malloc_unlock>
    9a6e:	bd70      	pop	{r4, r5, r6, pc}
    9a70:	42a3      	cmp	r3, r4
    9a72:	d909      	bls.n	9a88 <_free_r+0x44>
    9a74:	6821      	ldr	r1, [r4, #0]
    9a76:	1860      	adds	r0, r4, r1
    9a78:	4283      	cmp	r3, r0
    9a7a:	d1f3      	bne.n	9a64 <_free_r+0x20>
    9a7c:	6818      	ldr	r0, [r3, #0]
    9a7e:	685b      	ldr	r3, [r3, #4]
    9a80:	1841      	adds	r1, r0, r1
    9a82:	6021      	str	r1, [r4, #0]
    9a84:	e7ee      	b.n	9a64 <_free_r+0x20>
    9a86:	0013      	movs	r3, r2
    9a88:	685a      	ldr	r2, [r3, #4]
    9a8a:	2a00      	cmp	r2, #0
    9a8c:	d001      	beq.n	9a92 <_free_r+0x4e>
    9a8e:	42a2      	cmp	r2, r4
    9a90:	d9f9      	bls.n	9a86 <_free_r+0x42>
    9a92:	6819      	ldr	r1, [r3, #0]
    9a94:	1858      	adds	r0, r3, r1
    9a96:	42a0      	cmp	r0, r4
    9a98:	d10b      	bne.n	9ab2 <_free_r+0x6e>
    9a9a:	6820      	ldr	r0, [r4, #0]
    9a9c:	1809      	adds	r1, r1, r0
    9a9e:	1858      	adds	r0, r3, r1
    9aa0:	6019      	str	r1, [r3, #0]
    9aa2:	4282      	cmp	r2, r0
    9aa4:	d1e0      	bne.n	9a68 <_free_r+0x24>
    9aa6:	6810      	ldr	r0, [r2, #0]
    9aa8:	6852      	ldr	r2, [r2, #4]
    9aaa:	1841      	adds	r1, r0, r1
    9aac:	6019      	str	r1, [r3, #0]
    9aae:	605a      	str	r2, [r3, #4]
    9ab0:	e7da      	b.n	9a68 <_free_r+0x24>
    9ab2:	42a0      	cmp	r0, r4
    9ab4:	d902      	bls.n	9abc <_free_r+0x78>
    9ab6:	230c      	movs	r3, #12
    9ab8:	602b      	str	r3, [r5, #0]
    9aba:	e7d5      	b.n	9a68 <_free_r+0x24>
    9abc:	6821      	ldr	r1, [r4, #0]
    9abe:	1860      	adds	r0, r4, r1
    9ac0:	4282      	cmp	r2, r0
    9ac2:	d103      	bne.n	9acc <_free_r+0x88>
    9ac4:	6810      	ldr	r0, [r2, #0]
    9ac6:	6852      	ldr	r2, [r2, #4]
    9ac8:	1841      	adds	r1, r0, r1
    9aca:	6021      	str	r1, [r4, #0]
    9acc:	6062      	str	r2, [r4, #4]
    9ace:	605c      	str	r4, [r3, #4]
    9ad0:	e7ca      	b.n	9a68 <_free_r+0x24>
    9ad2:	46c0      	nop			; (mov r8, r8)
    9ad4:	20000504 	.word	0x20000504

00009ad8 <_realloc_r>:
    9ad8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    9ada:	0007      	movs	r7, r0
    9adc:	000d      	movs	r5, r1
    9ade:	0016      	movs	r6, r2
    9ae0:	2900      	cmp	r1, #0
    9ae2:	d105      	bne.n	9af0 <_realloc_r+0x18>
    9ae4:	0011      	movs	r1, r2
    9ae6:	f7ff fc2f 	bl	9348 <_malloc_r>
    9aea:	0004      	movs	r4, r0
    9aec:	0020      	movs	r0, r4
    9aee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    9af0:	2a00      	cmp	r2, #0
    9af2:	d103      	bne.n	9afc <_realloc_r+0x24>
    9af4:	f7ff ffa6 	bl	9a44 <_free_r>
    9af8:	0034      	movs	r4, r6
    9afa:	e7f7      	b.n	9aec <_realloc_r+0x14>
    9afc:	f000 f812 	bl	9b24 <_malloc_usable_size_r>
    9b00:	002c      	movs	r4, r5
    9b02:	4286      	cmp	r6, r0
    9b04:	d9f2      	bls.n	9aec <_realloc_r+0x14>
    9b06:	0031      	movs	r1, r6
    9b08:	0038      	movs	r0, r7
    9b0a:	f7ff fc1d 	bl	9348 <_malloc_r>
    9b0e:	1e04      	subs	r4, r0, #0
    9b10:	d0ec      	beq.n	9aec <_realloc_r+0x14>
    9b12:	0029      	movs	r1, r5
    9b14:	0032      	movs	r2, r6
    9b16:	f7ff fbe3 	bl	92e0 <memcpy>
    9b1a:	0029      	movs	r1, r5
    9b1c:	0038      	movs	r0, r7
    9b1e:	f7ff ff91 	bl	9a44 <_free_r>
    9b22:	e7e3      	b.n	9aec <_realloc_r+0x14>

00009b24 <_malloc_usable_size_r>:
    9b24:	1f0b      	subs	r3, r1, #4
    9b26:	681b      	ldr	r3, [r3, #0]
    9b28:	1f18      	subs	r0, r3, #4
    9b2a:	2b00      	cmp	r3, #0
    9b2c:	da01      	bge.n	9b32 <_malloc_usable_size_r+0xe>
    9b2e:	580b      	ldr	r3, [r1, r0]
    9b30:	18c0      	adds	r0, r0, r3
    9b32:	4770      	bx	lr
    9b34:	682f2e2e 	.word	0x682f2e2e
    9b38:	732f6c61 	.word	0x732f6c61
    9b3c:	682f6372 	.word	0x682f6372
    9b40:	615f6c61 	.word	0x615f6c61
    9b44:	735f6364 	.word	0x735f6364
    9b48:	2e636e79 	.word	0x2e636e79
    9b4c:	00000063 	.word	0x00000063
    9b50:	682f2e2e 	.word	0x682f2e2e
    9b54:	732f6c61 	.word	0x732f6c61
    9b58:	682f6372 	.word	0x682f6372
    9b5c:	635f6c61 	.word	0x635f6c61
    9b60:	735f6372 	.word	0x735f6372
    9b64:	2e636e79 	.word	0x2e636e79
    9b68:	00000063 	.word	0x00000063
    9b6c:	682f2e2e 	.word	0x682f2e2e
    9b70:	732f6c61 	.word	0x732f6c61
    9b74:	682f6372 	.word	0x682f6372
    9b78:	695f6c61 	.word	0x695f6c61
    9b7c:	6d5f6332 	.word	0x6d5f6332
    9b80:	6e79735f 	.word	0x6e79735f
    9b84:	00632e63 	.word	0x00632e63
    9b88:	682f2e2e 	.word	0x682f2e2e
    9b8c:	732f6c61 	.word	0x732f6c61
    9b90:	682f6372 	.word	0x682f6372
    9b94:	695f6c61 	.word	0x695f6c61
    9b98:	00632e6f 	.word	0x00632e6f
    9b9c:	682f2e2e 	.word	0x682f2e2e
    9ba0:	732f6c61 	.word	0x732f6c61
    9ba4:	682f6372 	.word	0x682f6372
    9ba8:	735f6c61 	.word	0x735f6c61
    9bac:	6d5f6970 	.word	0x6d5f6970
    9bb0:	6e79735f 	.word	0x6e79735f
    9bb4:	00632e63 	.word	0x00632e63
    9bb8:	682f2e2e 	.word	0x682f2e2e
    9bbc:	752f6c61 	.word	0x752f6c61
    9bc0:	736c6974 	.word	0x736c6974
    9bc4:	6372732f 	.word	0x6372732f
    9bc8:	6974752f 	.word	0x6974752f
    9bcc:	6c5f736c 	.word	0x6c5f736c
    9bd0:	2e747369 	.word	0x2e747369
    9bd4:	00000063 	.word	0x00000063

00009bd8 <_adcs>:
    9bd8:	00020200 00010000 00000000 00000000     ................
	...
    9bf4:	682f2e2e 612f6c70 682f6364 615f6c70     ../hpl/adc/hpl_a
    9c04:	632e6364 00000000                       dc.c....

00009c0c <_i2cms>:
    9c0c:	00000003 00200014 00000100 00000004     ...... .........
    9c1c:	00d70000 007a1200                       ......z.

00009c24 <sercomspi_regs>:
    9c24:	0001000c 00020000 00000000 01ff004f     ............O...
    9c34:	00000004 682f2e2e 732f6c70 6f637265     ....../hpl/serco
    9c44:	70682f6d 65735f6c 6d6f6372 0000632e     m/hpl_sercom.c..
    9c54:	00002000                                . ..

00009c58 <_usb_ep_cfgs>:
    9c58:	20000374 00000000 00000040 20000334     t.. ....@...4.. 
    9c68:	00000000 00000040 200002f4 00000000     ....@...... ....
    9c78:	00000040 6867694c 654c2074 3a6c6576     @...Light Level:
    9c88:	6c302520 756c2058 00000a78 000059e0      %0lX lux....Y..
    9c98:	000056c8 000059e0 000056fa 000059e0     .V...Y...V...Y..
    9ca8:	0000561e 000059e0 000059e0 000059e0     .V...Y...Y...Y..
    9cb8:	00005632 000059e0 0000572e 752f2e2e     2V...Y...W..../u
    9cc8:	642f6273 63697665 73752f65 2e636462     sb/device/usbdc.
    9cd8:	00000063 00776f70                       c...pow.

00009ce0 <TWO52>:
    9ce0:	00000000 43300000 00000000 c3300000     ......0C......0.
    9cf0:	00007ca8 00007c8a 00007c44 00007b62     .|...|..D|..b{..
    9d00:	00007c44 00007c7c 00007c44 00007b62     D|..||..D|..b{..
    9d10:	00007c8a 00007c8a 00007c7c 00007b62     .|...|..||..b{..
    9d20:	00007b5a 00007b5a 00007b5a 00007ec0     Z{..Z{..Z{...~..
    9d30:	00008508 000083c8 000083c8 000083c4     ................
    9d40:	000084e0 000084e0 000084d2 000083c4     ................
    9d50:	000084e0 000084d2 000084e0 000083c4     ................
    9d60:	000084e8 000084e8 000084e8 000086ec     ................

00009d70 <__sf_fake_stderr>:
	...

00009d90 <__sf_fake_stdin>:
	...

00009db0 <__sf_fake_stdout>:
	...
    9dd0:	2b302d23 6c680020 6665004c 47464567     #-0+ .hlL.efgEFG
    9de0:	32313000 36353433 41393837 45444342     .0123456789ABCDE
    9df0:	31300046 35343332 39383736 64636261     F.0123456789abcd
    9e00:	00006665                                ef..

00009e04 <_init>:
    9e04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    9e06:	46c0      	nop			; (mov r8, r8)
    9e08:	bcf8      	pop	{r3, r4, r5, r6, r7}
    9e0a:	bc08      	pop	{r3}
    9e0c:	469e      	mov	lr, r3
    9e0e:	4770      	bx	lr

00009e10 <__init_array_start>:
    9e10:	000020dd 	.word	0x000020dd

00009e14 <_fini>:
    9e14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    9e16:	46c0      	nop			; (mov r8, r8)
    9e18:	bcf8      	pop	{r3, r4, r5, r6, r7}
    9e1a:	bc08      	pop	{r3}
    9e1c:	469e      	mov	lr, r3
    9e1e:	4770      	bx	lr

00009e20 <__fini_array_start>:
    9e20:	000020b5 	.word	0x000020b5
